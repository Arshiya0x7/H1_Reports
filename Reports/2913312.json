{
  "id": 2913312,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yOTEzMzEy",
  "url": "https://hackerone.com/reports/2913312",
  "title": "Usage of unsafe random function in undici for choosing boundary",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2024-12-24T10:43:44.172Z",
  "submitted_at": "2024-12-24T10:43:44.475Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "parrot409",
    "url": "/parrot409",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22984,
    "url": "https://hackerone.com/nodejs",
    "handle": "nodejs",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Node.js",
      "twitter_handle": "nodejs",
      "website": "https://nodejs.org",
      "about": "The Node.js JavaScript Runtime"
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2025-22150"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2025-01-23T13:43:08.671Z",
  "bug_reporter_agreed_on_going_public_at": "2025-01-23T13:43:08.508Z",
  "team_member_agreed_on_going_public_at": "2025-01-21T18:03:25.382Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:** \n[Undici uses Math.random()](https://github.com/nodejs/undici/blob/8b06b8250907d92fead664b3368f1d2aa27c1f35/lib/web/fetch/body.js#L113) to choose the boundary for a `multipart/form-data` request. It is known that the output of `Math.random()` can be predicted if several of its generated values are known.\n\n**Description:** \nIf an attacker can access a few generated values of `Math.random()` and has control over one of the fields of a multipart request, they can add or overwrite fields that are not meant to be controllable.\n\nIf there is a mechanism in an app that sends multipart requests to an attacker-controlled website, they can use this to leak the necessary values.\n\nHere is an example app that is vulnerable to this bug.\n```javascript\n#!/usr/bin/env node\nconst express = require('express')\n\nconst BACKEND_API = 'http://localhost:2000/order.php'\n\nconst app = express()\n\napp.use(express.urlencoded({ extended: false }))\n\napp.get('/trigger-webhook',(req,res)=>{\n\tlet url = req.query.url\n\tlet data = new FormData()\n\tdata.append('event','example-event')\n\tfetch(url,{\n\t\tbody: data,\n\t\tmethod: 'POST'\n\t})\n\tres.send('OK')\n})\n\napp.post('/order',(req,res)=>{\n\tlet description = req.body.description || 'Please wrap it in Christmas-themed wrapping paper.'\n\tlet data = new FormData()\n\tdata.append('price','4000')\n\tdata.append('customer_id','1')\n\tdata.append('item_id','1')\n\tdata.append('description',description)\n\tfetch(BACKEND_API,{\n\t\tbody: data,\n\t\tmethod: `POST`\n\t}).then(r=>r.text()).then(r=>res.send(r)).catch(r=>res.send('Err'))\n})\n\napp.listen(8000)\n```\n\n`BACKEND_API` points to this php app (`order.php`):\n\n```php\n$<?= $_POST['price'] ?> has been subtracted from the account of customer #<?= $_POST['customer_id'] ?> for item <?= $_POST['item_id'] ?>.\ndescription of order: (\"<?= $_POST['description'] ?>\")\n```\n\n## Steps To Reproduce:\n  1. Extract F3883352.\n  2. In the `server` directory: `npm install; node ./server.js`.\n  3. In the `server` directory: `php -S 127.0.0.1:2000`.\n  4. In the `exp` directory: `pip3 install z3-solver; node ./exp.js`.\n\nA successful exploit looks like this:\n```\n$ node --version\nv22.12.0\n$ node ./server.js \n\n```\n```\n$ node ./exp.js \nNeed 9 more values\nNeed 8 more values\nNeed 7 more values\nNeed 6 more values\nNeed 5 more values\nNeed 4 more values\nNeed 3 more values\nNeed 2 more values\nNeed 1 more values\n$4000 has been subtracted from the account of customer #1337 for item 1.\ndescription of order: (\"zzz\")\n```\n\nThe `customer_id` parameter could be successfully tampered with.\n\n## Impact: \n\nAn attacker can tamper with the requests going to the backend APIs if certain conditions are met.\n\n## Supporting Material/References:\n\n-  `predict.py` is the modified version of https://github.com/PwnFunction/v8-randomness-predictor/tree/main\n- https://blog.securityevaluators.com/hacking-the-javascript-lottery-80cc437e3b7f\n\n## Impact\n\nAn attacker can tamper with the requests going to the backend APIs if certain conditions are met.",
  "weakness": {
    "id": 43,
    "name": "Use of Insufficiently Random Values"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 3883352,
      "file_name": "report.tar.xz",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/2i0sfsucc6rebgubrn8b04gc09xg?response-content-disposition=attachment%3B%20filename%3D%22report.tar.xz%22%3B%20filename%2A%3DUTF-8%27%27report.tar.xz&response-content-type=application%2Fx-xz&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQXMS6E3C%2F20250920%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250920T173810Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCIQCp%2FBKg%2FuirBlu9bDxgWYctHDOJmz%2FmJZ1pDA%2FoCzPbNgIgOKZC5q1ZkDZNN3Eh6Qmu9bi1ByRV%2BN2XXge4sEGImEgqugUI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDPN%2B0IT4O%2F3Zh2uA5CqOBX39MmfXERoBZ6Z5RNd%2BdA91Ri%2Fq8HjuzIZCzjGVqfcXNtpwFBq7I1vwtmOf%2F0%2FZQx8MPY36mmEFIGSzIXq2Tf0F13gk%2BjDufoXv%2FVwRw%2F1KIiN6VxDUiiPpoRoJ%2BZpASN2OLiNTX1nWsiV490LBcluQ%2Bg7krCUXuvpc%2BD1frF1YazQ3EtvXRbUT%2B%2BrIQZaj0pNFPkXQz1YlkrOOqdkncNOFBSaVp2IV7r7yg6XCnDdT25KtSex3i1JJQeKSbq26iZpmMLFKjuRmkINElegAdH5QLJwyJ6JqULYgqQbgOC9Wdr5jzwN1RKGOj1JPO9aGgY4JgPnCCUcUp9jRm%2FKfrbgOqu9haTlqJ5ZMWNJfgrKbptppwXxT%2FF%2BEqEVSDCB2diGbIWOZylZ4nDsb9uTfXUklpOhQU2e%2FsnFnAox%2BhSdeRz4lkGdCK9547lkwBDh94JQwY7XxTarSHR5ij5HVm3NPtPuhiYYT4jENxTnRYcOSA5CGuUPrGizCVc1j3gJvtgDvvxAUKtgPaya2DhrfZCCqJ99kCLsbj29KpLpg600ZT75vWrsLhR7yWorI2oG%2BEkkp0fdhVBijAglFwEEOCdmQKjkZmrUcIxphONmcSYQr7RkmGD7Vu7CcwGIfPpZ51QmT3A4ehyfGEHUM3rr1g3JHxRVgjmrwxB9xR75GNGkjm9Ko212aVR7nlt45gpnE39Wq2KWRG8AldDtCLgfvKgeX%2BFB3%2BmJ8OMD9WOcFgQ8Hk1Egkif2pzYaVntra2ctQqyN%2FW1xg6YP6Kcfy48vy59nf3F7i9vtWVMbkpB10oi7MVd9Zte5SuPr1TV3otaaCF7xp8nLTzjf8Y12tMqQiN37fvRRUukNutLO0Gm%2FYzC77LrGBjqxAWAFzpbr3CxJg2rfPLGfQOOr0OjplgdV77g9%2BlScSge8MKF%2F51kTcvDmY7jFfsuV7LccQSCIy6Ya6Q4UVuDVl6U%2BSrLBQTDqeTptoGOuojQb66RR0PiLrmFFGOz0Dtw2D6AfrFdaqZywnh4masscTn4%2FLYnfCyzlBKkVlly1Nz9Y3dkAIir4xccQFXuxxxv4NgtSAxLL3p8DkValLd1IWUPG0nQQkDmf7LeyfDjNq0oySg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=4b7e898bbd14fa6ce9dbd6bd8444a0b68ba605a158cb384bb2184fe768be935d",
      "file_size": 1968,
      "type": "application/x-xz",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2025-02-20T18:03:25.720Z",
  "allow_singular_disclosure_after": -18315284.628353506,
  "singular_disclosure_allowed": true,
  "vote_count": 24,
  "voters": [
    "tinmo",
    "zy9ard3",
    "odaysec",
    "never_die",
    "2026",
    "mohaned0101",
    "bolabolabola",
    "who_am_i_",
    "realkalki",
    "luca88",
    "and 14 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 6.8,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "none",
      "user_interaction": "required",
      "scope": "unchanged",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 666,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/nodejs/node",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
