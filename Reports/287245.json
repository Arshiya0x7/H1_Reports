{
  "id": 287245,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yODcyNDU=",
  "url": "https://hackerone.com/reports/287245",
  "title": "Blind SSRF in \"Integrations\" by abusing a bug in Ruby's native resolver.",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2017-11-03T23:32:34.644Z",
  "submitted_at": "2017-11-03T23:32:34.644Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "edoverflow",
    "url": "/edoverflow",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 13,
    "url": "https://hackerone.com/security",
    "handle": "security",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "HackerOne",
      "twitter_handle": "Hacker0x01",
      "website": "https://hackerone.com",
      "about": "Vulnerability disclosure should be safe, transparent, and rewarding."
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2017-0904"
  ],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2017-11-09T18:36:34.928Z",
  "bug_reporter_agreed_on_going_public_at": "2017-11-09T18:36:34.824Z",
  "team_member_agreed_on_going_public_at": "2017-11-09T18:36:16.271Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "# Summary\n\nHackerOne allows bug bounty programs to integrate their reports queue with issue tracking tools such as Jira and Phabricator. By abusing a bug that I discovered in Ruby's native resolver, I am able to bypass the SSRF filter and could potentially scan your internal network.\n\n# Vulnerability Details\n\nHackerOne uses the [private_address_check](https://github.com/jtdowney/private_address_check) gem to prevent SSRF on the \"Integrations\" panel: https://hackerone.com/{BBP}/integrations. The actual filtering takes place in [lib/private_address_check.rb](https://github.com/jtdowney/private_address_check/blob/c95a538542d8d5bd8b969d9d8d95753e74fb7e52/lib/private_address_check.rb). The process starts by attempting to resolve the user-supplied URL with `Resolv::getaddresses` and then compares the returned value with a the values in the blacklist. I discovered a bug in `Resolv::getaddresses` that allows me to return an empty value, which is not included in the blacklist and therefore completely bypasses any checks.\n\n```ruby\ndef resolves_to_private_address?(hostname)\n    ips = Resolv.getaddresses(hostname)\n    ips.any? do |ip| \n      private_address?(ip)\n    end\nend\n```\n\nThe bypass consists of providing encoded IP addresses that when forwarded on to the operating system in `lib/resolv.rb` return an empty value.\n\n```\nhttp://0177.1:22/\nhttp://0x7f.1:22/\nhttp://127.000.001:22/\n```\n\nI discovered the bug in `Resolv::getaddresses` by running it on different Linux machines and noticing that the outputs vary. Until the Ruby Core come up with a better solution I suggest not relying on this library for any security-related features.\n\n**Machine 1** returned the following:\n\n```\nirb(main):001:0> require 'resolv'\nirb(main):002:0> Resolv.getaddresses(\"127.000.000.1\")\n=> []\n```\n\nAnd **Machine 2** returned this:\n\n```\nirb(main):001:0> require 'resolv'\nirb(main):002:0> Resolv.getaddresses(\"127.000.000.1\")\n=> [\"127.0.0.1\"]\n```\n\n# Exploit\n\nAdmittedly, I was unable to actually exploit this issue and I am still playing around to see if I can exfiltrate valuable data. The current issue only consists of a filter bypass.\n\n# Mitigation\n\nI would suggest using `Socket.getaddrinfo()` as it is more reliable and is not affected by this bug. Something along the lines of this should work:\n\n```ruby\nrequire \"socket\"\n...\ndef resolves_to_private_address?(hostname)\n  ips = Socket.getaddrinfo(hostname, nil).sample[3]\n  ips.any? do |ip| \n    private_address?(ip)\n  end\nend\n```\n\nMy suggested patch can be found here: {F236338}.",
  "weakness": {
    "id": 68,
    "name": "Server-Side Request Forgery (SSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 236338,
      "file_name": "private_address_check.rb.patch",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/236/338/c4d5f99300f382c15f80045ba1ad2ef17315989e/private_address_check.rb.patch?response-content-disposition=attachment%3B%20filename%3D%22private_address_check.rb.patch%22%3B%20filename%2A%3DUTF-8%27%27private_address_check.rb.patch&response-content-type=text%2Fx-ruby&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ7TY53NAO%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T194110Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIEXkR1lg621bE17cu%2Fl3fXwdZqc3ohK8RLoUW6neTOnUAiEA1hVcNDQ0HwLz92IFS%2BgVT485kbOVACCMZOb9uO2j69oqsQUIGRADGgwwMTM2MTkyNzQ4NDkiDLnpL0YhLpymbc6hLiqOBV1CaTmkhcUZlzYsktvfJWg%2Fm1RG06rbDZybD1fxzCGn3wbF4jjjJUQ2ScgmEFpzTl1Q3AqXLGOli0TDRTqN2rNHVDdk4bU9V5M%2FeBVdBo4qrt0f5je9X3fGbikIf26eWeEKLG3EhEqFK2lAUZmV5315nncfTk6hoszJHkQ8sRjDlN2HS9TtXTryF61OFTtRVjJNTH%2BLtNyV9BtIJQn%2F4BxNCnlGbsixm2CKXEaiC8CXDcYojRSbHDKW7Ynd%2BssAEjCFrYz5xQb5%2F9WDmBLkZLsp0RZpFKEuTO%2FsxE8MZ53IetZilewLtTExCRLi4yVWvd6RKr9z%2Bg38vAoLhkIRJrh1Pnoc4muTfSuaNqR2zPwuqRRpQExXPBLZs2Dqho2td7D7D59nhiLMBwoeQFq4toyGBQeFp1loI2ba2KWA27Ojs5Xy%2FNhd3CtKtQeCeoC0sTvfmZgUDu236C%2B2Cd%2FPkiNKuO0VXWq5SmNbmS%2BDDcaZSgyT2Ck2tu8LfLeYvCB6UjYC5SqpGoJ%2BBhN6Yj2o57WPXYo3yw8Za7dxfzDLusTZLfTNCXg%2FKga55KcTAusLwlnLEkCSqFGv8YSDe%2F7ANND2JHh505IlqbZg7nNadcE%2Fn5uhBqfdHzfoMEWLwtDA7cvwEB0GGxv%2FZ8j7tHIIajXdhkWblxZroQGISMj6R%2BcF0ynatCZQ%2Fnl%2FmMLA%2BtAnjy6LxZrFxJTL8ehsF48BaqaMPWtTFY0489glRg%2B%2BTCBrMRND4%2BWnJ7%2Fc7ldXTCwGQsEqO0sHuX3SDIfa4KqORwxQfFf1JJIU%2B2%2FTnEu3ZOKwCrvKT6%2Fl%2B6ujUKNDXnXQJSWA1z%2FYyX99rBlKWt0JXX7B4l%2F4R69pcDKn16ZcgjD6ycDGBjqxAXAuX6Omt6PkikjdkxQ2Y2mRMR65OggU4DqSRgS2wUwGnciOVqgDnaca3BCcAJ%2BmMGOYDkGFsgFv89LcJ%2FH6%2Fq6ggTPzdb%2B9jO69O1SyqbRuJbfu%2BuhDWmWaIgUrRddktOFe%2FFZgznaOMgpq1Hb2Ktm%2FqrF85hbzPR%2B1oVZR5hU%2BjyTSBXUExbJ0qdus2cJ%2FmUIVFrnuCqJHUn1yOziH5zT45%2B%2B9%2FMz7i%2BFiDiPI%2BsEnuw%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=fca17d67b1a54da318b8810d6aee2f69d59daa50280eae5e07d6662b1ed8383e",
      "file_size": 697,
      "type": "text/x-ruby",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2017-12-09T18:36:16.465Z",
  "allow_singular_disclosure_after": -245639094.41300792,
  "singular_disclosure_allowed": true,
  "vote_count": 29,
  "voters": [
    "jensec",
    "sp1d3rs",
    "cdl",
    "hunter",
    "yumi",
    "michiel",
    "bl4de",
    "ysx",
    "0nlymohammed",
    "gamliel",
    "and 19 more..."
  ],
  "structured_scope": {
    "databaseId": 3,
    "asset_type": "URL",
    "asset_identifier": "hackerone.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
