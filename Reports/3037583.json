{
  "id": 3037583,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMDM3NTgz",
  "url": "https://hackerone.com/reports/3037583",
  "title": "Buffer Overflow in curl's Rustls Backend",
  "state": "Closed",
  "substate": "informative",
  "readable_substate": "Informative",
  "created_at": "2025-03-14T06:42:17.586Z",
  "submitted_at": "2025-03-14T06:42:17.769Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "cyberguardianrd",
    "url": "/cyberguardianrd",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/36bca6668139d77be42208d896968344ae7a76c55ee0f8b0f28281ccd492ff02",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/19c85a12ac35f466af1ea2b0ae853bfe5e8f057fb1d6fb62db131707bb67b30d"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool doing internet transfers"
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2025-06-30T18:54:26.214Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2025-06-28T12:26:54.067Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\n[summary of the vulnerability]\n\n\nA buffer overflow vulnerability exists in the curl library's Rustls backend due to an integer overflow in the dynamic buffer management. This issue could potentially allow an attacker to overwrite memory, leading to application crashes or, in theory, arbitrary code execution. However, exploitation is highly impractical due to the enormous file sizes required, making the real-world risk low.\n## Affected version\n[Which curl/libcurl version are you using to reproduce? On which platform? `curl -V` typically generates good output to include]\n\nAll versions of curl using the Rustls backend with the vulnerable dynamic buffer management code in the Curl_dyn_addn function are affected.\n\n## Steps To Reproduce:\n[add details for how we can reproduce the issue]\nUnsanitized input from a file flows into memcpy, where it is used to manipulate application memory. This may result in a buffer overflow vulnerability.\n\nData flow\n8 steps in 2 files\n‎lib/vtls/rustls.c\n3 steps\n421:13\nbufbuf\nSource\n1 - 2\n424:39\nbuf\n3\n‎lib/dynbuf.c\n5 steps\n167:42\nconst void *mem\n4\n172:25\nmem\n5\n70:29\nconst unsigned char *mem\n6\n119:28\nmemmemcpy\n7 - 8\n:28\nmem\n7\n:5\nmemcpy\n\n https://github.com/curl/curl/tree/acdb48272a53fe97f63e5437fce27c7036a9c43e/lib/vtls/rustls.c#L421\n\nhttps://github.com/curl/curl/tree/acdb48272a53fe97f63e5437fce27c7036a9c43e/lib/dynbuf.c#L119\n  \nImpact\nIf exploited, this vulnerability could result in memory corruption, potentially causing application crashes or enabling arbitrary code execution. However, the conditions required for exploitation—such as processing files approaching 4GB on 32-bit systems or 18 exabytes on 64-bit systems—are highly impractical. Additionally, modern memory protections like Address Space Layout Randomization (ASLR) and Data Execution Prevention (DEP) further reduce the likelihood of successful exploitation. As a result, the overall risk is considered low.\n\n\nTechnical Details\nThe vulnerability originates in the Curl_dyn_addn function, located in lib/dynbuf.c, which is responsible for adding data to a dynamic buffer. The function performs a size check to ensure the buffer has sufficient capacity:\nc\nif (s->len + len > s->size) {\n    /* Need to reallocate to fit the new data */\n}\nHowever, if the sum of the current buffer length (s->len) and the new data length (len) exceeds the maximum value of size_t, an integer overflow occurs. This causes the condition s->len + len > s->size to incorrectly evaluate to false, even when the total size exceeds the allocated buffer capacity. As a result, the subsequent memcpy operation writes data beyond the buffer's bounds, leading to a buffer overflow.\nThis issue can theoretically be triggered when processing extremely large files, such as Certificate Revocation Lists (CRLs). For example:\nOn a 32-bit system, where size_t is typically 32 bits, the overflow occurs near 4GB (2³² bytes).\nOn a 64-bit system, where size_t is 64 bits, the overflow requires approximately 18 exabytes (2⁶⁴ bytes), an impractical size for most real-world scenarios.\nMitigation\nTo protect against this vulnerability, consider the following recommendations:\nUsers: Avoid processing untrusted files that approach or exceed the size limits of size_t (e.g., 4GB on 32-bit systems or 18 exabytes on 64-bit systems). Validate input file sizes before processing where possible.\nDevelopers: Update the Curl_dyn_addn function to include explicit overflow checks. For example, verify that s->len + len does not exceed SIZE_MAX before performing the addition, or use safe arithmetic libraries to prevent integer overflows. A patch could resemble:\nc\nif (len > SIZE_MAX - s->len || s->len + len > s->size) {\n    /* Handle overflow or insufficient size */\n}\n\n\n## Supporting Material/References:\n[list any additional material (e.g. screenshots, logs, etc.)]\n\n  * [attachment / reference]\n\n## Impact\n\n## Summary:\nWhile the impracticality of exploitation reduces the urgency, addressing this issue in the codebase will enhance the overall robustness of the curl library.\nThis report provides a comprehensive overview of the vulnerability, its potential impact, and actionable steps to mitigate it, suitable for both technical and non-technical audiences.",
  "weakness": {
    "id": 15,
    "name": "Integer Overflow"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 5,
  "voters": [
    "zy9ard3",
    "2026",
    "thalaivar304",
    "bilalhacker302",
    "rudrakumar24"
  ],
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
