{
  "id": 2914705,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yOTE0NzA1",
  "url": "https://hackerone.com/reports/2914705",
  "title": "Making transfer v2 channel unupgradable through the forwarding ",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2024-12-26T14:42:39.950Z",
  "submitted_at": "2024-12-26T15:48:29.414Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "unknown_feature",
    "url": "/unknown_feature",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/e2jwu1qqnaamts54tp26zknww322/36bca6668139d77be42208d896968344ae7a76c55ee0f8b0f28281ccd492ff02"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 24626,
    "url": "https://hackerone.com/cosmos",
    "handle": "cosmos",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/l8innmct0qu74b6xv2jzvh5lk5ap/36bca6668139d77be42208d896968344ae7a76c55ee0f8b0f28281ccd492ff02",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/l8innmct0qu74b6xv2jzvh5lk5ap/19c85a12ac35f466af1ea2b0ae853bfe5e8f057fb1d6fb62db131707bb67b30d"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Cosmos",
      "twitter_handle": "cosmos",
      "website": "https://interchain.io/",
      "about": "The Internet of Blockchains."
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2025-06-30T12:46:29.034Z",
  "bug_reporter_agreed_on_going_public_at": "2025-05-31T12:46:02.061Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "### Summary of Impact\nOn one hand we have this upgrade functionality that has this specific check [HasInflightPackets](https://github.com/cosmos/ibc-go/blob/e10bbbc47fb70e138a3369902d18586b3da95800/modules/core/04-channel/keeper/keeper.go#L712). It looks up channel's committed packets. And if there are any it won't set the channel into `FLUSHCOMPLETE`. In [handleFlushState](https://github.com/cosmos/ibc-go/blob/f5e1a4c33c01d355323ea368d8d63664180736e5/modules/core/04-channel/keeper/packet.go#L486), in  [WriteUpgradeAckChannel](https://github.com/cosmos/ibc-go/blob/f5e1a4c33c01d355323ea368d8d63664180736e5/modules/core/04-channel/keeper/upgrade.go#L354) and in [WriteUpgradeConfirmChannel](https://github.com/cosmos/ibc-go/blob/f5e1a4c33c01d355323ea368d8d63664180736e5/modules/core/04-channel/keeper/upgrade.go#L484). And upgrade can't be fully completed if the channel is not in the `FLUSHCOMPLETE` state.  In [ChanUpgradeOpen](https://github.com/cosmos/ibc-go/blob/f5e1a4c33c01d355323ea368d8d63664180736e5/modules/core/04-channel/keeper/upgrade.go#L512). Which would error and prevent it from getting into [WriteUpgradeOpenChannel](https://github.com/cosmos/ibc-go/blob/f5e1a4c33c01d355323ea368d8d63664180736e5/modules/core/keeper/msg_server.go#L844) where it sets the channel back to open with [upgraded fields](https://github.com/cosmos/ibc-go/blob/f5e1a4c33c01d355323ea368d8d63664180736e5/modules/core/04-channel/keeper/upgrade.go#L634)\n\nPacket commitments can be deleted through 2 ways: [acknowledgement](https://github.com/cosmos/ibc-go/blob/f5e1a4c33c01d355323ea368d8d63664180736e5/modules/core/04-channel/keeper/packet.go#L445) and [timeout](https://github.com/cosmos/ibc-go/blob/f5e1a4c33c01d355323ea368d8d63664180736e5/modules/core/04-channel/keeper/timeout.go#L138). \n\nOn the other hand we have this forwarding [functionality](https://github.com/cosmos/ibc-go/blob/0e72d08c4aeded65f74d93500fb282314fd1acc0/modules/apps/transfer/ibc_module.go#L203)  that does NOT write an acknowledgement for the [forwarded packet](https://github.com/cosmos/ibc-go/blob/f5e1a4c33c01d355323ea368d8d63664180736e5/modules/core/keeper/msg_server.go#L412)  until it [receives](https://github.com/cosmos/ibc-go/blob/0e72d08c4aeded65f74d93500fb282314fd1acc0/modules/apps/transfer/keeper/relay.go#L287)  an acknowledgement to the channel it forwarded the packet to.\n\nSo this approach to forwarding introduced a situation when a legit channel might become dependent on a malicious channel. And malicious channel doesn't have to acknowledge packets. And if it doesn't ack them, it seems like the legit channel will not be able to transition into `FLUSHCOMPLETE` state.  And as a result would not be able to complete upgrades. Neither current nor future. \n\n\n### Steps to Reproduce\nThe POC first creates legit transfer v2 channels: channel-0 on ibc-0 <-> channel-0 on ibc-1. Thst's the part which relayer takes care of.\nThen in my app I open another 2 channels channel-1 on ibc-0 <-my local chain  ibc-1 ||   my local chain ibc-0   -> channel-1 on ibc-1. \nAnd I submit receive packet that looks like [this](https://gist.github.com/unknownfeature/b5c7323df65300a4699a3fa5471e9153#file-gistfile1-txt-L87):\n```\n\tibc0Cw.ReceivePacketV2(ibc0Path, types.FungibleTokenPacketDataV2{\n\t\tTokens: []types.Token{\n\t\t\t{\n\t\t\t\tAmount: \"1\",\n\t\t\t\tDenom:  types.Denom{Base: \"x\"},\n\t\t\t},\n\t\t},\n\t\tMemo:     \"\",\n\t\tSender:   ibc1Cw.Address(),\n\t\tReceiver: ibc0Cw.Address(),\n\t\tForwarding: types.ForwardingPacketData{Hops: []types.Hop{\n\t\t\t{ChannelId: legitChannel, PortId: port}, {ChannelId: ibc0Path.Dest.ChanId, PortId: port},\n\t\t}, DestinationMemo: \"\"},\n\t})\n``` \nPacket is getting received on channel-1 on ibc-0, because of the forwarding it gets submitted via channel-0 to channel-0 on ibc-1 where it gets forwarded again to my channel-1 on ibc-1. And because of that it doesn't write any acknowledgements. Writes the receipt though. Which means that we won't be able to timeout it. So we end up in a situation when a legit channel-0 on ibc-0 will continues having committed (inflight) packets until my channel-1 on ibc-1 receives an acknowledgement. Which it won't. So the victim channel is channel-0 on ibc-0.   Which will end up having this commitment.\n\nSo the POC itself is not a new scenario. It just shows the scenario that can create these everlasting commitments on legit channels.\nMethods that I use in the POC  are defined here https://github.com/h1uf/ibc-tools/blob/master/chain/wrapper.go, \n\n(make sure no simd is running)\n  1. Have Go installed\n  2. Check out and build https://github.com/cosmos/ibc-go. Run `make build` and take a note of the path to simd\n  2. Download my relayer https://github.com/h1uf/relayer. It's pretty much the same as original just demo scripts were edited. You will need to run a relayer. You can build that one or a legit one. And make sure rly is in the path. Just scripts need to be ones form the https://github.com/h1uf/relayer/tree/main/examples/demo folder. Replace [path to binary](https://github.com/h1uf/relayer/blob/main/examples/demo/scripts/two-chainz#L8) with the path to simd that you noted in a prev step. Run `./dev-env`\n  3. Meanwhile checkout https://github.com/h1uf/ibc-tools. And put attached `lock_upgrade.go` to the root. Make sure your [path](https://gist.github.com/unknownfeature/b5c7323df65300a4699a3fa5471e9153#file-gistfile1-txt-L22) points to correct data folder and your [home](https://gist.github.com/unknownfeature/b5c7323df65300a4699a3fa5471e9153#file-gistfile1-txt-L30)  path  is your current dir. It will be parsing seed phrase from the chain data and storing keys in cur dir. \n  4. Run the app\n\nIt establishes channel-1 to channel-1 via my proxy chain. So everything before this line https://gist.github.com/unknownfeature/b5c7323df65300a4699a3fa5471e9153#file-gistfile1-txt-L79 is just establishing a channel. And then receive the packet on channel-1 on ibc-0 . If you switch to relayer you will start seeing that there is no ack in a few minutes. But that's all expected. Just not expected(as it seems) that my channel will not write acknowledgments.  It doesn't seem like it's expected that commitments can stay committed forever(unless I missed a place where they can be deleted except 2 places that I've mentioned). It seems rather unacknowledged that this dependency on potentially malicious channel got introduced through this part of forwarding functionality. Where it waits for an ack from another channel. \n\n### Workarounds\nFrom what I  see it doesn't seem like. There is no other way to delete commitments and  it doesn't seem the channel can become FLUSHCOMPLETE w\\o flushing all the packets.  Though I could miss something.\n\n### Supporting Material/References\n\n- lock_upgrade.go - the POC\n- upgrade.mov - the video of the POC\n\n## Impact\n\nTransfer v2 channels could be made unupgradable through the forwarding functionality that allows malicious channels to create commitments on legit channels that will be left unacknowledged. ",
  "weakness": {
    "id": 65,
    "name": "Business Logic Errors"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 3889317,
      "file_name": "lock_upgrade.go",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/t8tdhb9kp3v151qfj7mc1pdgwtfx?response-content-disposition=attachment%3B%20filename%3D%22lock_upgrade.go%22%3B%20filename%2A%3DUTF-8%27%27lock_upgrade.go&response-content-type=text%2Fx-go&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQZVIMWS2L%2F20250704%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250704T194136Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJGMEQCIC9ZwRFnBFSFQsVWxlAWhbrYe0TwV49S8kJio22hYw20AiAl5V20JaUJ8isIitDfIVPg2QOmpTp7G3qMS7Ifh%2B7YXSqyBQgzEAMaDDAxMzYxOTI3NDg0OSIMEJc1vbuQY%2F6VqrpbKo8FRbhrzdy1LwBoC8QHHRhlijpKgtukuNUM9dYfdJH%2BsrfZbGHG3UVEu4Vz00wpsaBWIwbs6gTbWy%2B%2BNwmBAqO62P8nI0hbHzHmKY9sBIsf%2F7ng3g593hzGvD9FA4Wbi5W0LNIoJcswbfhVqYexfmHO%2BTaibkaTyvE8Hcl0lLf%2FGS1MKmDZse5n0YgflQqQPmrDNcHs%2B0fMF93iwGl7UKjbRZWF4Xkd2uhjlmbvRHFLJAcxWJmUQlg9aY9pRlqAm3ma4hjhAvBo98cxU8I6I4cNYLCayCcQP7eMRmKzymdWld9m4%2B%2FDVBViVixB%2FSna3%2FKfUUOaWf5iMxgPop1wGy3p1MuqFzohkqQaKlmzgas3xwuq6Jj5SrIOWuL4EVSyx1qavj%2F7qL%2FmxozTA0j5H4qXL0Rz5ykE%2B2mRsjsMIUQ9f5WWcovN8M0IjwcsMO2iuqm9NK1qxulQpugxg02MnXzzudkCl9cX84fmPBuc3of4iLjvVmEDETrgdZPTlceCu69K4YzNAD3XeLFme6zippxYfJUQe9CBoMapIAD630SF1eBolLSEiRNIilaOmtyLrknFC1XOovHCukYTtDusVHQgyAuN8UDCgTAaYUB20egELBi7d%2F%2FU5crAfDyatXcmW2Q7uMNfIA6w7UxHCiIMjyWf5j1cESPiqttP0V%2FZtyNFJDCcKlpveP7WoGQcux91sv8WyrAginM7CbJ3lLvBaDnDd%2F3U0ayTQ7SvIPPZEEqYmjndMa%2F2eZXgJpJeN0H0MEMI3NVsCxTLntjWQxf0cv50rtxijcmsgXt1oG4MX2KGWzel9ImKQr79nWdAt%2FjtTwkkoIUR8Vhd6Zbo4h5KdMw71W6ShPCAcW4qhA1foEZ9ujDeo6DDBjqyAQgDaxA9dWyWjpUs5X9wrLOA1%2F1bVA%2FS50vBZGnwevraycGBy%2F5fAG%2BqRGZtOz31ZNfarctttDvgqseJsEm34zV%2Fg%2FDDeVgJvjG4VOkb7o9andBrdxgRLki5XzRpgTmR563%2BXJ98n2mlcmazSPkh7g3KNRiIq17ezRpAL%2FslrGSXToEO5WDsjXV53TAC1y3BxpqttV75553LSIRRl%2BAUHtDQcRgZm8wxqlf%2BSaimD8CG1U0%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=e26dfe17e54a9ac9d8bad68a6a55c2df88ce164486a7f44b1ec10ef72a58007e",
      "file_size": 3722,
      "type": "text/x-go",
      "moderated": null
    },
    {
      "id": 3889381,
      "file_name": "upgrade.mov",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/4hitmyd94dr1ejkusphihybjn6t5?response-content-disposition=attachment%3B%20filename%3D%22upgrade.mov%22%3B%20filename%2A%3DUTF-8%27%27upgrade.mov&response-content-type=video%2Fquicktime&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQZVIMWS2L%2F20250704%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250704T194136Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJGMEQCIC9ZwRFnBFSFQsVWxlAWhbrYe0TwV49S8kJio22hYw20AiAl5V20JaUJ8isIitDfIVPg2QOmpTp7G3qMS7Ifh%2B7YXSqyBQgzEAMaDDAxMzYxOTI3NDg0OSIMEJc1vbuQY%2F6VqrpbKo8FRbhrzdy1LwBoC8QHHRhlijpKgtukuNUM9dYfdJH%2BsrfZbGHG3UVEu4Vz00wpsaBWIwbs6gTbWy%2B%2BNwmBAqO62P8nI0hbHzHmKY9sBIsf%2F7ng3g593hzGvD9FA4Wbi5W0LNIoJcswbfhVqYexfmHO%2BTaibkaTyvE8Hcl0lLf%2FGS1MKmDZse5n0YgflQqQPmrDNcHs%2B0fMF93iwGl7UKjbRZWF4Xkd2uhjlmbvRHFLJAcxWJmUQlg9aY9pRlqAm3ma4hjhAvBo98cxU8I6I4cNYLCayCcQP7eMRmKzymdWld9m4%2B%2FDVBViVixB%2FSna3%2FKfUUOaWf5iMxgPop1wGy3p1MuqFzohkqQaKlmzgas3xwuq6Jj5SrIOWuL4EVSyx1qavj%2F7qL%2FmxozTA0j5H4qXL0Rz5ykE%2B2mRsjsMIUQ9f5WWcovN8M0IjwcsMO2iuqm9NK1qxulQpugxg02MnXzzudkCl9cX84fmPBuc3of4iLjvVmEDETrgdZPTlceCu69K4YzNAD3XeLFme6zippxYfJUQe9CBoMapIAD630SF1eBolLSEiRNIilaOmtyLrknFC1XOovHCukYTtDusVHQgyAuN8UDCgTAaYUB20egELBi7d%2F%2FU5crAfDyatXcmW2Q7uMNfIA6w7UxHCiIMjyWf5j1cESPiqttP0V%2FZtyNFJDCcKlpveP7WoGQcux91sv8WyrAginM7CbJ3lLvBaDnDd%2F3U0ayTQ7SvIPPZEEqYmjndMa%2F2eZXgJpJeN0H0MEMI3NVsCxTLntjWQxf0cv50rtxijcmsgXt1oG4MX2KGWzel9ImKQr79nWdAt%2FjtTwkkoIUR8Vhd6Zbo4h5KdMw71W6ShPCAcW4qhA1foEZ9ujDeo6DDBjqyAQgDaxA9dWyWjpUs5X9wrLOA1%2F1bVA%2FS50vBZGnwevraycGBy%2F5fAG%2BqRGZtOz31ZNfarctttDvgqseJsEm34zV%2Fg%2FDDeVgJvjG4VOkb7o9andBrdxgRLki5XzRpgTmR563%2BXJ98n2mlcmazSPkh7g3KNRiIq17ezRpAL%2FslrGSXToEO5WDsjXV53TAC1y3BxpqttV75553LSIRRl%2BAUHtDQcRgZm8wxqlf%2BSaimD8CG1U0%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=e93ba882ba95816508c8b0dc7e9ed10da65f3dbfd901707beabc34dc324daf85",
      "file_size": 113346027,
      "type": "video/quicktime",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2025-06-30T12:46:02.200Z",
  "allow_singular_disclosure_after": -370533.963542804,
  "singular_disclosure_allowed": true,
  "vote_count": 12,
  "voters": [
    "n1m0",
    "zy9ard3",
    "2026",
    "polem4rch",
    "mohaned0101",
    "thalaivar304",
    "aintsophie28",
    "sumonkhan36",
    "c0mplexsec",
    "ibroo888",
    "and 2 more..."
  ],
  "severity": {
    "rating": "low",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 562114,
    "asset_type": "OTHER",
    "asset_identifier": "ibc-go",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
