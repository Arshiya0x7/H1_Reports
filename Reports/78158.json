{
  "id": 78158,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83ODE1OA==",
  "url": "https://hackerone.com/reports/78158",
  "title": "Wrong Handling of Content-Type allows Flash injection and Rosseta flash patch bypass",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2015-07-23T13:03:39.060Z",
  "submitted_at": "2015-07-23T13:03:39.060Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "benhayak",
    "url": "/benhayak",
    "profile_picture_urls": {
      "small": "https://hackerone.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsiZGF0YSI6MzYwMSwicHVyIjoiYmxvYl9pZCJ9fQ==--6ca133595079bcde26426bf912250f5e74a57eee/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJqcGciLCJncmF2aXR5IjoiQ2VudGVyIiwicmVzaXplIjoiNjJ4NjJeIiwiY3JvcCI6IjYyeDYyKzArMCJ9LCJwdXIiOiJ2YXJpYXRpb24ifX0=--2de8067d228529d65848a4eeed0bed0bb2531bc3/images.jpg"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 54349,
    "url": "https://hackerone.com/ibb",
    "handle": "ibb",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYGAVB3Z7%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T132826Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIAY19IlFbpZEGZZnklbjs4ufzCVl3nXNnn09ExIIE%2FeHAiEAj4AKUgJ9R9X1CSh20Sf0M1gNhMrLBbzNYoXykSz3T7YqsQUIFRADGgwwMTM2MTkyNzQ4NDkiDPzXazQCJX%2FwLDoqyCqOBWps58w1etIYIaa3P4zFfk1%2FaCWN2MdZKKnfhatw8%2BRlBLiTqrE4X6AWrTgkVNQaiOuaZj6%2F1nx616Pe3OvlEveMEaJZ%2Fbmch0Xy0FNaYc2jL9Ui8jSbXgliRLn6s5u1IqGMvC3mvbxuW1TtRuQ4w6%2BjlTLpwiEnD46PxGQ%2BN1LS9IfRcdKtQrmuo5LS6G47EyBAZgpYDewFSxQnnMWrnO7IP2KL2MXOdJqtCZSm2wMs6tRqaxA4NYf1ckGHB9BLfNvCvEhPuLWi0w8D43QWbSzKU6iTXZIhSQa6VJ7nVHvYnLNw5P7OPSutllqAi7vFeFh9RRCh%2BUEgCMLQXRaLrO05U3HrLVufbu5wAKObUJA1KJYgm4QWrmQplbpBgd4XHK9uM9xaHJEMEbLf63Wzwo%2Bgc3TNQOPf5GFxukBxWKzBzsF%2FSNkHKsB4Be8BLr51uA%2FaC%2BllGx66bht2Pd22zIxaotIyKSbZ3VPAywe%2BUDsCekJhwA3IYRjbmhP1JjWY5xjSHn33%2FqZAFp55N%2FUjra2pZAnU5kKWAe0hRjuFoL2%2FJdDB9dEbaeHg9WuTq20rPQvnaD%2FYlaL7e0gXYXJ3q7MWJZrvF7xRXVJeLKI3LIqXpGCUS9cT2wl2ozC9rdJtlPTo%2F%2F94aq1nMCqtbmdXclnV58KJ5%2FAYOa%2BbknaIzAxbz9ggeWCmL2q%2FWx3cnd0amN7StoXQFQEB%2FNBT2D85RUIFWGMkQoLsrntfSM0s2VFsHIhd%2F73sJc1D4o%2FRuQq0qa%2FtwTo9i81dTjaMPDGmWFu3Kk5oG4DV4Yo3o%2BXLOckPWZBYPLS7uxQDIsUp3HRANFj4NezhzyimR8z8gghPw3pFhTTEKogygCEL5HtLTTC0xr%2FGBjqxAcQdidZoi%2Fk%2BW9Mf6Q7OCXlCoIbidpUhf8Ta7ByIrgb92S9YJmtu2zJu%2BdsJTFs%2BYJY0PhxbOGwoFQdS4Zt8kbWFRmcEvyS8E0Ts5cgkw2CFr%2BVMiYvb6q7D0ep6LsVwua8Zef4rFGj7%2Ft8zlb91p2wZWlJZB2I3NIZUu09SMMV4euCSgXaL2BlIbO9tzyHcL%2BSpedojsGj3ZLrxc07VOpd9azvxsNbVbxWxRGTOK0nQEg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=bf0b19078437c6bb44c70064807d3f6336bd05201280762cec32f3c60a334819",
      "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYGAVB3Z7%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T132826Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIAY19IlFbpZEGZZnklbjs4ufzCVl3nXNnn09ExIIE%2FeHAiEAj4AKUgJ9R9X1CSh20Sf0M1gNhMrLBbzNYoXykSz3T7YqsQUIFRADGgwwMTM2MTkyNzQ4NDkiDPzXazQCJX%2FwLDoqyCqOBWps58w1etIYIaa3P4zFfk1%2FaCWN2MdZKKnfhatw8%2BRlBLiTqrE4X6AWrTgkVNQaiOuaZj6%2F1nx616Pe3OvlEveMEaJZ%2Fbmch0Xy0FNaYc2jL9Ui8jSbXgliRLn6s5u1IqGMvC3mvbxuW1TtRuQ4w6%2BjlTLpwiEnD46PxGQ%2BN1LS9IfRcdKtQrmuo5LS6G47EyBAZgpYDewFSxQnnMWrnO7IP2KL2MXOdJqtCZSm2wMs6tRqaxA4NYf1ckGHB9BLfNvCvEhPuLWi0w8D43QWbSzKU6iTXZIhSQa6VJ7nVHvYnLNw5P7OPSutllqAi7vFeFh9RRCh%2BUEgCMLQXRaLrO05U3HrLVufbu5wAKObUJA1KJYgm4QWrmQplbpBgd4XHK9uM9xaHJEMEbLf63Wzwo%2Bgc3TNQOPf5GFxukBxWKzBzsF%2FSNkHKsB4Be8BLr51uA%2FaC%2BllGx66bht2Pd22zIxaotIyKSbZ3VPAywe%2BUDsCekJhwA3IYRjbmhP1JjWY5xjSHn33%2FqZAFp55N%2FUjra2pZAnU5kKWAe0hRjuFoL2%2FJdDB9dEbaeHg9WuTq20rPQvnaD%2FYlaL7e0gXYXJ3q7MWJZrvF7xRXVJeLKI3LIqXpGCUS9cT2wl2ozC9rdJtlPTo%2F%2F94aq1nMCqtbmdXclnV58KJ5%2FAYOa%2BbknaIzAxbz9ggeWCmL2q%2FWx3cnd0amN7StoXQFQEB%2FNBT2D85RUIFWGMkQoLsrntfSM0s2VFsHIhd%2F73sJc1D4o%2FRuQq0qa%2FtwTo9i81dTjaMPDGmWFu3Kk5oG4DV4Yo3o%2BXLOckPWZBYPLS7uxQDIsUp3HRANFj4NezhzyimR8z8gghPw3pFhTTEKogygCEL5HtLTTC0xr%2FGBjqxAcQdidZoi%2Fk%2BW9Mf6Q7OCXlCoIbidpUhf8Ta7ByIrgb92S9YJmtu2zJu%2BdsJTFs%2BYJY0PhxbOGwoFQdS4Zt8kbWFRmcEvyS8E0Ts5cgkw2CFr%2BVMiYvb6q7D0ep6LsVwua8Zef4rFGj7%2Ft8zlb91p2wZWlJZB2I3NIZUu09SMMV4euCSgXaL2BlIbO9tzyHcL%2BSpedojsGj3ZLrxc07VOpd9azvxsNbVbxWxRGTOK0nQEg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=272dc1d19e2fa4000b02b96681926f022df0208b14f56fa65c86fb9da10c1aac"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Internet Bug Bounty",
      "twitter_handle": "",
      "website": "https://www.hackerone.com/internet-bug-bounty",
      "about": "The Internet Bug Bounty rewards security research into vulnerabilities impacting Open Source Software Projects."
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2019-11-12T09:43:40.625Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2019-10-13T09:43:36.591Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hey, \r\nI spent some time reversing the mitigation of Rosetta Flash. This research helped me to discover a very interesting bug:\r\n\r\nAdobe Flash player uses \"string searching\" (similar to indexOf) over the entire response's \"Content-Type\" header value to match the \"application/x-shockwave-flash\" string. Once matched, the flash player will skip all checks/restrictions and render the file as a valid Flash file. Therefore responses which will include this string *anywhere* within the content header will allow the execution of various file types as flash applications (such files types may be images,videos,css,text files, and so on) - MIME Sniffing. This bug will also fully bypass an existing nosniff header: X-Content-Type-Options: nosniff. \r\n\r\nExample vulnerable response header:\r\nContent-Type: text/plain; lang=application/x-shockwave-flash\r\n\r\nSome web applications allow user data inside the content-type header. Such header injection can include \"language\" , \"encoding type\"(UTF-8,ISO.) etc or response splitting (vulnerable in Chrome).\r\n\r\n\r\nThere are two main case scenarios: \r\n\r\nClassic MIME Sniffing - Rendering Images/text/media as Flash:\r\n1. The web application allows uploading an image file.\r\n2. Viewing the uploaded image is served through an Servlet that accepts encoding/language parameter.\r\n3. The attacker uploads a malicious flash file as an Image: \"flashsniff.png\"\r\n4. The attacker forge a malicious web page with the following payload\r\n<object type=\"application/x-shockwave-flash\"\r\ndata=\"http://vulnerable-site.com/RenderImageServlet.php?imgId=1234&lang=application/x-shockwave-flash\">\r\n<param name=\"AllowScriptAccess\" value=\"always\">\r\n</object>\r\n\r\n4. The hosting server will respond with the following headers:\r\nHTTP/1.1 200 OK\r\n....\r\nX-Content-Type-Options: nosniff\r\n....\r\nContent-Length: 733\r\nContent-Type: image/png; charset=utf-8; lang=application/x-shockwave-flash\r\n\r\nIn this case Flash will execute malicious file types as flash applications even when X-Content-Type-Options: nosniff is on.\r\nPoC (Rendering Images as FLASH Files) \r\n\r\nhttp://poc.benhayak.com/Flash/SniffingFlash.html\r\nHere I just present an alert as a PoC but this could've been a flash that will leak information via SOP bypass.\r\n\r\n\r\nRosetta Flash patch bypass using only alpha numeric flash:\r\nBrilliant Michele Spagnuolo made an amazing research and discovered the possibility to make execute flash files using only alphanumeric charset via jsonp endpoints: https://miki.it/blog/2014/7/8/abusing-jsonp-with-rosetta-flash/\r\n\r\nA mitigation was implemented to avoid this risk by:\r\n1. If content-type is application/x-shockwave-flash, execute the flash. (string search!)\r\n2. Verify there's at least 1 non alphanumeric character which is not a valid UTF-8 in the incoming string.\r\n\r\nSince flash will ignore anything but the \"application/x-shockwave-flash\" value in the content-type string. using this bug will bypass the rosseta flash patch and allow executing Flash applications via jsonp endpoints once again!\r\n\r\nPoC: (LOOK at the network panel for \"attacker.com/crossdomain.xml\" to see a SOP bypass via Michele's techinique)\r\n\r\n http://poc.benhayak.com/Flash/rossetabypass.html\r\n\r\n\r\nRegards,\r\nBen Hayak\r\n",
  "bounty_amount": "3000.0",
  "formatted_bounty": "$3,000",
  "weakness": {
    "id": 60,
    "name": "Cross-site Scripting (XSS) - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2019-11-12T09:43:36.677Z",
  "allow_singular_disclosure_after": -184909489.55486098,
  "singular_disclosure_allowed": true,
  "vote_count": 1,
  "voters": [
    "shivammusic"
  ],
  "structured_scope": {
    "databaseId": 84122,
    "asset_type": "OTHER",
    "asset_identifier": "IBB (Legacy)",
    "max_severity": "none"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
