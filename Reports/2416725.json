{
  "id": 2416725,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yNDE2NzI1",
  "url": "https://hackerone.com/reports/2416725",
  "title": "CVE-2024-2466: TLS certificate check bypass with mbedTLS",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2024-03-14T11:49:49.229Z",
  "submitted_at": "2024-03-14T14:38:37.627Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "frankyueh",
    "url": "/frankyueh",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool doing internet transfers"
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2016-3739",
    "CVE-2013-4545",
    "CVE-2013-6422",
    "CVE-2014-0139",
    "CVE-2014-1263",
    "CVE-2014-2522",
    "CVE-2014-8151",
    "CVE-2024-2466"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2024-03-27T10:44:42.575Z",
  "bug_reporter_agreed_on_going_public_at": "2024-03-27T10:44:42.386Z",
  "team_member_agreed_on_going_public_at": "2024-03-27T07:24:01.926Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\n\nCurl library has a security vulnerability where the certificate name check is bypassed when connecting to a host via its IP address. This could potentially introduce spoofing attacks or unauthorized access due to unverified server certificate.\n\nThis issue only affects the Curl with MbedTLS.\n\n- Affected versions: from libcurl 8.5.0 to and including 8.6.0 (current master versions at the time of writing)\n- Not affected versions: libcurl 8.4.0 and earlier\n\nThis issue affect all kinds of protocol over TLS session, e.g. HTTPS, FTPS, SMTPS, etc.\n\n## Steps To Reproduce:\n\n### (Preparation) Download and build the Curl with MbedTLS:\n\n*Skip this step if you already have the Curl (>= 8.5.0) with MbedTLS.*\n\nBefore building the code, make sure you have environment to build the code in Linux, `sudo apt install build-essential`.\n\n1. Get and extract the code:\n\n```shell\nwget https://curl.se/download/curl-8.6.0.tar.gz -O curl-8.6.0.tar.gz\nwget https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v2.28.7.tar.gz -O mbedtls-2.28.7.tar.gz\ntar zxf curl-8.6.0.tar.gz\ntar zxf mbedtls-2.28.7.tar.gz\n```\n\n2. Build MbedTLS:\n\n```shell\ncd mbedtls-2.28.7\nmake SHARED=1 -j$(nproc)\nsudo make install DESTDIR=/usr/local/lib\n```\n\n3. Build Curl with MbedTLS:\n\n```shell\ncd curl-8.6.0\nexport LD_LIBRARY_PATH=/usr/local/lib\nexport PATH=/usr/local/lib:$PATH\n./configure --with-mbedtls=/usr/local --without-libpsl\nmake -j$(nproc) CFLAGS=\"-I/usr/local/include\" LDFLAGS=\"-L/usr/local/lib\"\n```\n\n### Reproduce the issue via Curl CLI:\n\nIf you build the Curl with MbedTLS from above, you should export the `LD_LIBRARY_PATH` and `PATH` to use the built Curl.\n\n```shell\nexport LD_LIBRARY_PATH=/usr/local/lib\nexport PATH=/usr/local/lib:$PATH\n```\n\n1. Check the version of the Curl:\n\n```shell\n$ curl --version\ncurl 8.6.0 (x86_64-pc-linux-gnu) libcurl/8.6.0 mbedTLS/2.28.7 zlib/1.2.11 libidn2/2.2.0\nRelease-Date: 2024-01-31\nProtocols: dict file ftp ftps gopher gophers http https imap imaps ipfs ipns mqtt pop3 pop3s rtsp smb smbs smtp smtps telnet tftp\nFeatures: alt-svc AsynchDNS HSTS HTTPS-proxy IDN IPv6 Largefile libz NTLM SSL threadsafe UnixSockets\n```\n\n2. Get IP from an example https server and use it to connect:\n\n```shell\n$ host -t A www.example.org\nwww.example.org has address 93.184.216.34\n$ curl https://93.184.216.34\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n         \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n        <head>\n                <title>404 - Not Found</title>\n        </head>\n        <body>\n                <h1>404 - Not Found</h1>\n        </body>\n</html>\n```\n\nYou could see that the Curl is able to connect to the server via its IP address. This not an expected behavior because the server certificate is not verified against the host name.\n\nThe expect result should be an error message like this:\n\n```shell\ncurl: (60) SSL: no alternative certificate subject name matches target host name '93.184.216.34'\nMore details here: https://curl.se/docs/sslcerts.html\n\ncurl failed to verify the legitimacy of the server and therefore could not\nestablish a secure connection to it. To learn more about this situation and\nhow to fix it, please visit the web page mentioned above.\n```\n\nI just demonstrated the issue with the Curl CLI, but this issue could be exploited in any application that uses the Curl library with MbedTLS and if the connection is made via IP address.\n\n## Supporting Material/References:\n\n### Cause of the issue:\n\nThis issue is caused by the skipping call of the `mbedtls_ssl_set_hostname` function in `mbed_connect_step1`. The `mbedtls_ssl_set_hostname` function is used to set the server name for the SNI extension and also for the server certificate name check. If the `mbedtls_ssl_set_hostname` function is not called, the server certificate name check will be bypassed.\n\nThe vulnerable of code snippet from `mbed_connect_step1` (`lib/vtls/mbedtls.c`) as following:\n\n```c\n  if(connssl->peer.sni) {\n    if(mbedtls_ssl_set_hostname(&backend->ssl, connssl->peer.sni)) {\n      /* mbedtls_ssl_set_hostname() sets the name to use in CN/SAN checks and\n         the name to set in the SNI extension. So even if curl connects to a\n         host specified as an IP address, this function must be used. */\n      failf(data, \"Failed to set SNI\");\n      return CURLE_SSL_CONNECT_ERROR;\n    }\n  }\n```\n\nIf `connssl->peer.sni` is not set, the `mbedtls_ssl_set_hostname` function will not be called and the server certificate name check will be bypassed.\n\nThe `connssl->peer` object contains the peer information, including the `sni`, `hostname`, `dispname` and `type`.\n\n```c\ntypedef enum {\n  CURL_SSL_PEER_DNS,\n  CURL_SSL_PEER_IPV4,\n  CURL_SSL_PEER_IPV6\n} ssl_peer_type;\n\nstruct ssl_peer {\n  char *hostname;        /* hostname for verification */\n  char *dispname;        /* display version of hostname */\n  char *sni;             /* SNI version of hostname or NULL if not usable */\n  ssl_peer_type type;    /* type of the peer information */\n};\n```\n\nBefore the handshake of TLS session, the peer information is created from `Curl_ssl_peer_init` function. The `sni` is optional and only set if the peer type is `CURL_SSL_PEER_DNS`. If peer type is `CURL_SSL_PEER_IPV4` or `CURL_SSL_PEER_IPV6`, the `sni` will be `null`. The code snippet from `Curl_ssl_peer_init` function (`lib/vtls/vtls.c`):\n\n```c\n    peer->sni = NULL;\n    peer->type = get_peer_type(peer->hostname);\n    if(peer->type == CURL_SSL_PEER_DNS && peer->hostname[0]) {\n      /* not an IP address, normalize according to RCC 6066 ch. 3,\n       * max len of SNI is 2^16-1, no trailing dot */\n      size_t len = strlen(peer->hostname);\n      if(len && (peer->hostname[len-1] == '.'))\n        len--;\n      if(len < USHRT_MAX) {\n        peer->sni = calloc(1, len + 1);\n        if(!peer->sni) {\n          Curl_ssl_peer_cleanup(peer);\n          return CURLE_OUT_OF_MEMORY;\n        }\n        Curl_strntolower(peer->sni, peer->hostname, len);\n        peer->sni[len] = 0;\n      }\n    }\n```\n\nTherefore, if the Curl connect to a IP address host, the `sni` will be `null` and the `mbedtls_ssl_set_hostname` function will not be called. The server certificate name check will be bypassed and the connection will be established without the server certificate name verification.\n\n*Noticeable, this issue is similar to [CVE-2016-3739](https://curl.se/docs/CVE-2016-3739.html). Basically, this is the bug from 7.21.0 and reintroduced in 8.5.0 to 8.6.0 with slightly different way.*\n\n### Detailed code change timeline about this issue:\n\nFirst, the fix for CVE-2016-3739 is this [commit](https://github.com/curl/curl/commit/6efd2fa529a189bf41736a610f). This fix is make sure that the `mbedtls_ssl_set_hostname` function will be called always, even the host name is not for SNI extension usage, e.g. IP address or SSLv3. Because the `mbedtls_ssl_set_hostname` function is not called, MbedTLS will not check the server certificate name against the host name and complete the SSL handshake.\n\n*This bug is due to the confusion of documentation about the API. Here is the discussion about it: [link](https://github.com/Mbed-TLS/mbedtls/issues/466).*\n\nThe code fix for CVE-2016-3739:\n\n```diff\n-  if(!Curl_inet_pton(AF_INET, conn->host.name, &addr) &&\n-#ifdef ENABLE_IPV6\n-     !Curl_inet_pton(AF_INET6, conn->host.name, &addr) &&\n-#endif\n-     sni && mbedtls_ssl_set_hostname(&connssl->ssl, conn->host.name)) {\n-    infof(data, \"WARNING: failed to configure \"\n-          \"server name indication (SNI) TLS extension\\n\");\n+  if(mbedtls_ssl_set_hostname(&connssl->ssl, conn->host.name)) {\n+    /* mbedtls_ssl_set_hostname() sets the name to use in CN/SAN checks *and*\n+       the name to set in the SNI extension. So even if curl connects to a\n+       host specified as an IP address, this function must be used. */\n+    failf(data, \"couldn't set hostname in mbedTLS\");\n+    return CURLE_SSL_CONNECT_ERROR;\n```\n\nA comment was even be added to avoid the confusion usage for the `mbedtls_ssl_set_hostname` function.\n\nLater on, this [commit](https://github.com/curl/curl/commit/2218c3a57e86c4ef68c5fa1e2f29e4a9a915d667#diff-fe5c86799b3988e8e1f8680edf2f24a6680b4410e851af5a0e72a1882a5631fcR565-R570) brings back the \"SNI\" usage and only call the `mbedtls_ssl_set_hostname` function when `snihost` is set. Fortunately, if `snihost` is not set, an error will be returned instead of continuing the SSL handshake without the server name check.\n\nApparently, This commit reintroduced the confusion about the `mbedtls_ssl_set_hostname` function usage back again, and just avoid the issue by unrelated error handling of SNI host name conversion.\n\n```diff\n-  if(mbedtls_ssl_set_hostname(&backend->ssl, hostname)) {\n-    /* mbedtls_ssl_set_hostname() sets the name to use in CN/SAN checks *and*\n-       the name to set in the SNI extension. So even if curl connects to a\n-       host specified as an IP address, this function must be used. */\n-    failf(data, \"couldn't set hostname in mbedTLS\");\n-    return CURLE_SSL_CONNECT_ERROR;\n+  {\n+    char *snihost = Curl_ssl_snihost(data, hostname, NULL);\n+    if(!snihost || mbedtls_ssl_set_hostname(&backend->ssl, snihost)) {\n+      /* mbedtls_ssl_set_hostname() sets the name to use in CN/SAN checks and\n+         the name to set in the SNI extension. So even if curl connects to a\n+         host specified as an IP address, this function must be used. */\n+      failf(data, \"Failed to set SNI\");\n+      return CURLE_SSL_CONNECT_ERROR;\n+    }\n```\n\nEventually, this [commit](https://github.com/curl/curl/commit/fa714830e92cba7b16b9d3f2cc92a72ee9d821fa#diff-fe5c86799b3988e8e1f8680edf2f24a6680b4410e851af5a0e72a1882a5631fcR642-R644) \"keep peer name information together\", it separated the `sni` and `hostname` in the `peer` structure, the peer information is created from another place and `sni` become optional. So the `mbedtls_ssl_set_hostname` function now is only called if `sni` is set, if not set it will continue the handshake and bypass host name verification. Therefore, the bug is reintroduced.\n\n```diff\n-  {\n-    char *snihost = Curl_ssl_snihost(data, hostname, NULL);\n-    if(!snihost || mbedtls_ssl_set_hostname(&backend->ssl, snihost)) {\n+\n+  if(connssl->peer.sni) {\n+    if(mbedtls_ssl_set_hostname(&backend->ssl, connssl->peer.sni)) {\n       /* mbedtls_ssl_set_hostname() sets the name to use in CN/SAN checks and\n          the name to set in the SNI extension. So even if curl connects to a\n          host specified as an IP address, this function must be used. */\n```\n\nThe possible solution is to always call the `mbedtls_ssl_set_hostname` function, even if `sni` is not set. If `sni` is `null`, it could use `peer.hostname` to pass to the `mbedtls_ssl_set_hostname` function.\n\nFurthermore, we must have to avoid this kind of \"for SNI only\" confusion in the future again. Apparently, a simple block of comment in the code is not enough to avoid it.\n\n### Curl History CVE related to CWE-297:\n\n*Just for reference, the following CVEs are related to the weakness of CWE-297:*\n\n- <https://curl.se/docs/CVE-2013-4545.html>\n- <https://curl.se/docs/CVE-2013-6422.html>\n- <https://curl.se/docs/CVE-2014-0139.html>\n- <https://curl.se/docs/CVE-2014-1263.html>\n- <https://curl.se/docs/CVE-2014-2522.html>\n- <https://curl.se/docs/CVE-2014-8151.html>\n- <https://curl.se/docs/CVE-2016-3739.html>\n\n## Impact\n\nThe weakness of this issue quote from [SWE-297: Improper Validation of Certificate with Host Mismatch](https://cwe.mitre.org/data/definitions/297.html):\n\n> Even if a certificate is well-formed, signed, and follows the chain of trust, it may simply be a valid certificate for a different site than the site that the product is interacting with. If the certificate's host-specific data is not properly checked - such as the Common Name (CN) in the Subject or the Subject Alternative Name (SAN) extension of an X.509 certificate - it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data, impersonating a trusted host. In order to ensure data integrity, the certificate must be valid and it must pertain to the site that is being accessed.\n>\n\nApparently, even the certificate is valid, without the server name check the attacker could use a \"valid certificate\" for a different site to \"impersonate\" a trusted host.\n\n**Common Consequences:**\n\nReference from [CWE-297: Improper Validation of Certificate with Host Mismatch](https://cwe.mitre.org/data/definitions/297.html):\n\n| Scope | Impact |\n| --- | --- |\n| Access Control | Technical Impact: Gain Privileges or Assume Identity\n|  | The data read from the system vouched for by the certificate may not be from the expected system. |\n| Authentication Other | Technical Impact: Other |\n|  | Trust afforded to the system in question - based on the malicious certificate - may allow for spoofing or redirection attacks. |\n\n**Likelihood Of Exploit:** High",
  "weakness": {
    "id": 555,
    "name": "Improper Validation of Certificate with Host Mismatch"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2024-04-26T07:24:02.212Z",
  "allow_singular_disclosure_after": -44279125.956192896,
  "singular_disclosure_allowed": true,
  "vote_count": 17,
  "voters": [
    "zy9ard3",
    "f_m",
    "cyborg_m",
    "kichukishor",
    "bebekgoreng01_",
    "70x1c473d",
    "yass9ien",
    "francisco08",
    "gk844",
    "manik6588",
    "and 7 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 5.3,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "none",
      "user_interaction": "required",
      "scope": "unchanged",
      "confidentiality": "none",
      "integrity": "high",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
