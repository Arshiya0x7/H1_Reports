{
  "id": 640532,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC82NDA1MzI=",
  "url": "https://hackerone.com/reports/640532",
  "title": "Active Mixed Content over HTTPS",
  "state": "Closed",
  "substate": "not-applicable",
  "severity_rating": "medium",
  "readable_substate": "N/A",
  "created_at": "2019-07-11T16:36:34.770Z",
  "submitted_at": "2019-07-11T16:36:34.770Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "caesardiedd",
    "url": "/caesardiedd",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool doing internet transfers"
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2019-11-01T09:05:22.768Z",
  "bug_reporter_agreed_on_going_public_at": "2019-10-26T01:15:16.440Z",
  "team_member_agreed_on_going_public_at": "2019-11-01T09:05:22.695Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\n[Resources Loaded from Insecure Origin (HTTP)]\n\n## Steps To Reproduce:\n[Vulnerability Details\ndetected that an active content loaded over HTTP within an HTTPS page]\n\nRemedy\nThere are two technologies to defense against the mixed content issues: \nHTTP Strict Transport Security (HSTS) is a mechanism that enforces secure resource retrieval, even in the face of user mistakes (attempting to access your web site on port 80) and implementation errors (your developers place an insecure link into a secure page) \nContent Security Policy (CSP) can be used to block insecure resource retrieval from third-party web sites \nLast but not least, you can use \"protocol relative URLs\" to have the user's browser automatically choose HTTP or HTTPS as appropriate, depending on which protocol the user is connected with. For example: \nA protocol relative URL to load an style would look like <link rel=\"stylesheet\" href=\"//example.com/style.css\"/>.\nSame for scripts <script type=\"text/javascript\" src=\"//example.com/code.js\"></script>\nThe browser will automatically add either \"http:\" or \"https:\" to the start of the URL, whichever is appropriate.\n\nExternal References\n\nhttps://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content\n\nRemedy References\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://en.wikipedia.org/wiki/Content_Security_Policy\n\n## Impact\n\nImpact\nActive Content is a resource which can run in the context of your page and moreover can alter the entire page. If the HTTPS page includes active content like scripts or stylesheets retrieved through regular, cleartext HTTP, then the connection is only partially encrypted. The unencrypted content is accessible to sniffers.\nA man-in-the-middle attacker can intercept the request for the HTTP content and also rewrite the response to include malicious codes. Malicious active content can steal the user's credentials, acquire sensitive data about the user, or attempt to install malware on the user's system (by leveraging vulnerabilities in the browser or its plugins, for example), and therefore the connection is not safeguarded anymore.",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 5,
  "voters": [
    "yukusawa18",
    "sameerphad72",
    "2026",
    "caesardiedd",
    "malmaliti"
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
