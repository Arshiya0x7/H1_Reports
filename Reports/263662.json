{
  "id": 263662,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yNjM2NjI=",
  "url": "https://hackerone.com/reports/263662",
  "title": "Cross-Site Request Forgery on the Federalist API (all endpoints), using Flash file on the attacker's host",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2017-08-26T18:18:35.773Z",
  "submitted_at": "2017-08-26T18:18:35.773Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "sp1d3rs",
    "url": "/sp1d3rs",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/079/690/6853ada3e124bdd8616b1be752223b558de38195_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 50592,
    "url": "https://hackerone.com/gsa_bbp",
    "handle": "gsa_bbp",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/iyPFgzbsX86VXw5wJHyfPg9s/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/iyPFgzbsX86VXw5wJHyfPg9s/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "GSA Bounty",
      "twitter_handle": null,
      "website": "http://gsa.gov",
      "about": ""
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "no-content",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2017-09-27T23:11:52.530Z",
  "bug_reporter_agreed_on_going_public_at": "2017-09-27T23:11:52.454Z",
  "team_member_agreed_on_going_public_at": "2017-09-18T06:43:00.954Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "",
  "weakness": {
    "id": 45,
    "name": "Cross-Site Request Forgery (CSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 33,
  "voters": [
    "jensec",
    "bogdantc",
    "yumi",
    "flashdisk",
    "johndoe1492",
    "mohaned0101",
    "asad0x01_",
    "fa1rlight",
    "apapedulimu",
    "cuso4",
    "and 23 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 81507,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/18f/federalist",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 5341,
      "category": "team",
      "content": "We endorse sp1d3rs's summary! The PR fixing this ticket is here: https://github.com/18F/federalist/pull/1157\n\n",
      "updated_at": "2017-09-18T06:42:52.874Z",
      "can_view?": true,
      "can_create?": false,
      "attachments": [],
      "user": {
        "id": 177495,
        "username": "wslack",
        "name": "Will Slack",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": "https://willslack.com",
        "location": "",
        "created_at": "2017-06-21T14:03:09.713Z",
        "url": "https://hackerone.com/wslack",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/000/177/495/0f325c9db6586788cf1fd586777192815ef1d496_original.jpg/3cb67cc78dc0cba55b102dd9eca2ee89b206d3e960be830f070583d9070b69ef",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/177/495/0f325c9db6586788cf1fd586777192815ef1d496_original.jpg/d9695107bfcd68eeb1c9e0912b109cdae9a6c00c0bda6fd4cbd6d9bdb828840a",
          "xtralarge": "https://hackerone.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsiZGF0YSI6MjYyOTAsInB1ciI6ImJsb2JfaWQifX0=--33c0e9fcf3daf3e2360372f2ee573f48da96bd8f/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJqcGciLCJyZXNpemUiOiIyNjB4MjYwXHUwMDNlIn0sInB1ciI6InZhcmlhdGlvbiJ9fQ==--cf3aeca803d1baf476958c689ca7b472a4cb54f1/twitter_profile.jpg"
        }
      }
    },
    {
      "id": 5339,
      "category": "researcher",
      "content": "*Thanks to the 18F team for the great experience, fast fix, and the bounty!*\n*The report details (i requested the limited disclosure due to lot of sensitive info in the attachments and report itself, and possibility to use a Summary as a kind of structured write-up):*\n\nHello. At the beginning of my work with TTS Bug Bounty program, I noticed, that Federalist API does not have any CSRF protection - but was unable to make proper POC, since data had JSON format, and the Content-Type header was correctly checked.\n\nHowever, I was able to forge valid Content-Type header using flash file now, after reading some articles of other researchers.\n\nI recommend to read this article first to fully understand the issue:\nhttp://www.geekboy.ninja/blog/exploiting-json-cross-site-request-forgery-csrf-using-flash/\nhttp://resources.infosecinstitute.com/bypassing-csrf-protections-fun-profit/#gref\n\nIt means that JSON data without any CSRF protection is not so safe, as supposed to be.\n\n##Why it works\nTo clarify, the SOP/CORS are failing in the case of 307 redirect trick (due to that fact, that during 307 redirect crossdomain.xml on the target host will be called after the POST request for some reason - so POST request will reach the destination), and can only prevent the response reading by the Flash application, but not prevent the CSRF attack itself (it can be the Flash fault, or the way how the browsers are handling 307 redirects of the requests, initialized by Flash applications).\n\nSo it does not actually matter, does Access-Control-Allow-Origin header exist or not on the target host (Flash ignores it), same as crossdomain.xml.\n\nTested HTTP methods on Federalist API:\n\n**GET - CSRF possible**\n**POST - CSRF possible**\nPUT - CSRF not possible\nDELETE - CSRF not possible\n\n##POC\nYou can use live POC *(host was redacted in this Summary due to security reasons 【ツ】)*:\n```\nhttp://[REDACTED]/test.swf?jsonData={\"site\":1,\"branch\":\"master\"}&php_url=http://[REDACTED]/test.php&endpoint=http://localhost:1337/v0/build/\n```\nYou can specify the jsonData (for example, if you need to change siteID param), and endpoint by different Federalist endpoint (in case you are testing not on the localhost)\n\nThis POC will work on the Federalist staging site:\n```\nhttp://[REDACTED]/test.swf?jsonData={\"site\":1,\"branch\":\"master\"}&php_url=http://[REDACTED]/test.php&endpoint=https://federalist.fr.cloud.gov/v0/build\n```\nand this will work on the Federalist production site:\n```\nhttp://[REDACTED]/test.swf?jsonData={\"site\":1,\"branch\":\"master\"}&php_url=http://[REDACTED]/test.php&endpoint=https://federalist.18f.gov/v0/build\n```\nThe only conditions for this:\n1) Flash must be enabled in the browser.\n2) User must be logged in.\n3) User must have access to the site with ID 1.\n\nIn other case, change the payload from\n```\n{\"site\":1,\"branch\":\"master\"}\n```\nto\n```\n{\"site\":[siteID you have access to],\"branch\":\"master\"}\n```\nfor successful testing.\n\n\nThe SWF file will send JSON data to the http://[REDACTED]/test.php, which then will be 307-redirected to the Federalist with correct Content-Type.\n\nThe result will be restarting the build of the site with ID 1 (if exist, and the current user is the owner).\nOn the screen below I did this with site ID 35 on my test instance.\n[SCREENS REMOVED]\n\n\n##Reproduction steps:\nIf you want to reproduce it on your own servers, you need the host, specially crafted SWF file, PHP file with 307 redirect, and crossdomain.xml file (in case PHP and SWF files are not on same-origin). It should also work locally.\nI created GitHub repo to simplify the CSRF testing process:\nhttps://github.com/sp1d3r/swf_json_csrf\n\n\n## Impact\nThe attacker can call any POST API action on behalf of Federalist user, who will visit the specially crafted page with SWF file. The attacker can trigger the build, add the site (if the repository name is known), etc - basically, all possible POST API actions which the user can do. Still, because the attacker does not know private repo names - he can't easily do the worst actions, so this issue has `Medium` impact.\n\n##Suggested fix\nThe fix can actually be the one of (order is determined by safety):\n1) Implementing anti-CSRF tokens protection (header-based). *[This one was chosen as fix]*\n2) Switching the POST method on the API endpoints to the PUT- we can leave GET API endpoints as is, because these endpoints are only informational, and their responses can't be read by the Flash application - so I think we are safe here, and JSON Hijacking is not possible for now (if no bypass will be discovered).\n3) Check the Referer/Origin header - at this moment we can't set arbitrary headers using Flash - so it can be considered as the fix too. \nHowever, due to weird things discovered on regular basis with Flash - all can happen in the future.\n\n##References\n* Special thanks to the [@emgeekboy](https://twitter.com/emgeekboy) and his blogpost: \nhttp://www.geekboy.ninja/blog/exploiting-json-cross-site-request-forgery-csrf-using-flash/\n* https://hackerone.com/reports/44146 by @avlidienbrunn\n* http://www.appsecweekly.com/flash-same-origin-policy-bypass-with-307/\n* http://research.rootme.in/forging-content-type-header-with-flash/\n* http://resources.infosecinstitute.com/bypassing-csrf-protections-fun-profit/#gref\n* https://github.com/sp1d3r/swf_json_csrf - SWF JSON CSRF exploitation tool\n\n",
      "updated_at": "2018-02-25T15:27:24.256Z",
      "can_view?": true,
      "can_create?": false,
      "attachments": [],
      "user": {
        "id": 79690,
        "username": "sp1d3rs",
        "name": "Eugene Yakovchuk",
        "bio": "The world tried to catch me, but it couldn't.",
        "cleared": true,
        "verified": true,
        "website": "https://r1p.xyz",
        "location": "Canada",
        "created_at": "2016-05-23T03:07:23.595Z",
        "url": "https://hackerone.com/sp1d3rs",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/000/079/690/6853ada3e124bdd8616b1be752223b558de38195_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/079/690/6853ada3e124bdd8616b1be752223b558de38195_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c",
          "xtralarge": "https://hackerone.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsiZGF0YSI6MTM0NzcsInB1ciI6ImJsb2JfaWQifX0=--c8bb3853d9462d00bf85e988a9d33579e71c0b82/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJwbmciLCJyZXNpemUiOiIyNjB4MjYwXHUwMDNlIn0sInB1ciI6InZhcmlhdGlvbiJ9fQ==--c155082ce6f9751dcb29cd6ea061a7e4d7329577/z.png"
        }
      }
    }
  ]
}
