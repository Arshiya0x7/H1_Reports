{
  "id": 94087,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC85NDA4Nw==",
  "url": "https://hackerone.com/reports/94087",
  "title": "Arbitrary read on s3://shopify-delivery-app-storage/files",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2015-10-15T20:38:59.534Z",
  "submitted_at": "2015-10-15T20:38:59.534Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "brakhane",
    "url": "/brakhane",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/040/726/4b47d99eec4ee906a402afb934855158d1e6d929_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 1382,
    "url": "https://hackerone.com/shopify",
    "handle": "shopify",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/3cb67cc78dc0cba55b102dd9eca2ee89b206d3e960be830f070583d9070b69ef",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/d9695107bfcd68eeb1c9e0912b109cdae9a6c00c0bda6fd4cbd6d9bdb828840a"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Shopify",
      "twitter_handle": "",
      "website": "https://www.shopify.com",
      "about": "Shopify is a multi-channel commerce platform that helps people sell online, in-store, and everywhere in between."
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2015-10-20T20:27:10.858Z",
  "bug_reporter_agreed_on_going_public_at": "2015-10-20T20:27:10.623Z",
  "team_member_agreed_on_going_public_at": "2015-10-20T20:24:03.816Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Short\n====\nAn attacker is able to read arbitrary files from the delivery app storage if the bucket key is known to him.\n\nVector\n====\n1) The victim uploads a.png to a product his shop located at https://myhackeronestore.myshopify.com.\n1a) The file is stored at s3://shopify-delivery-app-storage/files/myhackeronestore.myshopify.com/5682196162/a.png\n2) The attacker uploads b.png to a product in his shop (location irrelevant) and changes the 'attachment[filepath]' parameter from \"b.png\" to \"b.png/../../../../files/myhackeronestore.myshopify.com/5682196162/a.png\" in the initial call to /attachments.\n3) The attacker will now go ahead an generate a manual download link for his newly created attachment\n3a) When he visits the generated manual download link the site will state \"b.png/../../../../files/myhackeronestore.myshopify.com/5682196162/a.png\" as the file name\n3b) When the attacker proceeds to press the download button he'll get a working link to get a.png from the victim.\n\nWhat's wrong here\n====\nThe attacker is able to craft the bucket key in a way to use path traversals (and possibly other wired things related to AWS S3 key names) to get files he shouldn't have access to. \n\nHow it should be\n====\nIn an ideal world the delivery app should control 100% of the bucket key name to make sure no harm can be done by attacks like this. This could be achieved by having a mapping from uploaded_filename to actual_key_in_s3 (is there a way to tell S3 how the downloaded file should be named?). \n\nConclusion\n====\nIn my book this is fraud and shouldn't be there ;) You might consider the approach to control 100% of the bucket key to rule an entire class of bugs/vulnerabilities here out as filtering of the filename is tricky and will probably fail (now or in the near feature, who knows what S3 offers as a neat new 'feature' in the future).  Also there are just too many variants on how things could get wrong, what comes to mind is: Encoding interpretation failures on the app side, hidden/not well documented features on the AWS side,...",
  "bounty_amount": "1500.0",
  "formatted_bounty": "$1,500",
  "weakness": {
    "id": 27,
    "name": "Improper Authentication - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2015-11-19T20:24:04.025Z",
  "allow_singular_disclosure_after": -310619249.7176629,
  "singular_disclosure_allowed": true,
  "vote_count": 3,
  "voters": [
    "shivammusic",
    "spetr0x",
    "destinedtohack"
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 941,
      "category": "team",
      "content": "The [fog gem](https://github.com/fog/fog-aws/) performs [path normalization](https://github.com/fog/fog-aws/blob/27ec738ffea05beb0562f6097bd3bd6f8e2ff61f/lib/fog/aws/signaturev4.rb#L81-L97) on the user-controlled filename, which would have allowed a malicious user to specify a path containing \"../\". A valid download link (including the required signature) could be retrieved for any file uploaded to the amazon bucket, including other user's file.",
      "updated_at": "2015-10-20T20:40:58.941Z",
      "can_view?": true,
      "can_create?": false,
      "attachments": [],
      "user": {
        "id": 19168,
        "username": "francoischagnon",
        "name": "Francois Chagnon",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": "",
        "location": "",
        "created_at": "2015-03-19T21:06:55.673Z",
        "url": "https://hackerone.com/francoischagnon",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/000/019/168/5d577fe97283a5483331257b629b6287ed4d287b_original.jpg/3cb67cc78dc0cba55b102dd9eca2ee89b206d3e960be830f070583d9070b69ef",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/019/168/5d577fe97283a5483331257b629b6287ed4d287b_original.jpg/d9695107bfcd68eeb1c9e0912b109cdae9a6c00c0bda6fd4cbd6d9bdb828840a",
          "xtralarge": "https://hackerone.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsiZGF0YSI6NDQ3MSwicHVyIjoiYmxvYl9pZCJ9fQ==--5d363de94e2545bc9fc3f333250059f6ae61ed9f/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJqcGciLCJyZXNpemUiOiIyNjB4MjYwXHUwMDNlIn0sInB1ciI6InZhcmlhdGlvbiJ9fQ==--cf3aeca803d1baf476958c689ca7b472a4cb54f1/2014-03-24.jpg"
        }
      }
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
