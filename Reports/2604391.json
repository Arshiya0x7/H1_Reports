{
  "id": 2604391,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yNjA0Mzkx",
  "url": "https://hackerone.com/reports/2604391",
  "title": "CVE-2024-6874: macidn punycode buffer overread",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2024-07-16T02:07:09.459Z",
  "submitted_at": "2024-07-16T02:07:09.650Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "z2_",
    "url": "/z2_",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/5eld4c9eg34za1r92ipvd757pa9d/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool doing internet transfers"
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2024-6874"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2024-07-24T06:47:49.316Z",
  "bug_reporter_agreed_on_going_public_at": "2024-07-24T06:47:49.205Z",
  "team_member_agreed_on_going_public_at": "2024-07-24T06:43:20.292Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "libcurl at commit [58772b0e082eda333e0a5fc8fb0bc7f17a3cd99c](https://github.com/curl/curl/tree/58772b0e082eda333e0a5fc8fb0bc7f17a3cd99c) contains a stack-buffer overread in [lib/idn.c:75](https://github.com/curl/curl/blob/58772b0e082eda333e0a5fc8fb0bc7f17a3cd99c/lib/idn.c#L75) that can be triggered when the host of a URL is converted to punycode.\n\nThe root cause of the bug is in the function `mac_idn_to_ascii()`:\n```c\nstatic CURLcode mac_idn_to_ascii(const char *in, char **out)\n{\n    // --- snip ---\n    \n    UIDNAInfo info = UIDNA_INFO_INITIALIZER;\n    char buffer[256] = {0};\n    (void)uidna_nameToASCII_UTF8(idna, in, -1, buffer,\n        sizeof(buffer), &info, &err);\n    uidna_close(idna);\n    if(U_FAILURE(err)) {\n        return CURLE_URL_MALFORMAT;\n    }\n    else {\n        *out = strdup(buffer);\n        if(*out)\n        return CURLE_OK;\n        else\n        return CURLE_OUT_OF_MEMORY;\n    }\n    \n    // --- snip ---\n}\n```\n\n`buffer` is supposed to hold the punycode-encoded version of `in` as a NUL-terminated string. However\nthe implementation of `uidna_nameToASCII_UTF8()` leaves the output buffer unterminated when the length of the encoded output is equal to\nthe capacity of the output buffer ([source](https://github.com/unicode-org/icu/blob/main/icu4c/source/common/ustring.cpp#L1437)).\nThis leaves `buffer` without a terminating NUL-byte and the subsequent call to `strdup(buffer)` includes bytes beyond `buffer`.\n\n# PoC\nConsider the following dummy application that takes a URL as an argument and prints its punycode-encoded version:\n```c\nint main (int argc, char** argv) {\n    CURLU* url = curl_url();\n    curl_url_set(url, CURLUPART_URL, argv[1], 0);\n    \n    char* encoded_url;\n    curl_url_get(url, CURLUPART_URL, &encoded_url, CURLU_PUNYCODE);\n    \n    printf(\"%s\\n\", encoded_url);\n}\n```\n\nThen\n```\n./dummy \"https://öööööö-ä-üxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxöööööööööööööööööüöäüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüüöööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööööxx\"\n```\nresults in the over-read:\n```\n==77491==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7e649e109750 at pc 0x5852e492c7b5 bp 0x7ffec1daa250 sp 0x7ffec1da9a10\nREAD of size 257 at 0x7e649e109750 thread T0\n    #0 0x5852e492c7b4 in strlen.part.0 asan_interceptors.cpp.o\n    #1 0x5852e4a1bf48 in curl_dbg_strdup curl/lib/memdebug.c:198:9\n    #2 0x5852e4a43e13 in mac_idn_to_ascii curl/lib/idn.c:75:14\n    #3 0x5852e4a4331f in idn_decode curl/lib/idn.c:244:12\n    #4 0x5852e4a43158 in Curl_idn_decode curl/lib/idn.c:274:21\n    #5 0x5852e4a28c6b in curl_url_get curl/lib/urlapi.c:1582:29\n    #6 0x5852e4a196ec in main dummy.c:6:4\n```\n\nNote: In order to trigger the vulnerability on a non-apple device, compile curl with `-DUSE_APPLE_IDN -licuuc`.\n\n# Exploitation Scenario\n\nExploitation of this bug has three strict requirements:\n1. An attacker has control over the URL in `curl_url_set()`\n2. The application manually calls `curl_url_get()` with `CURLU_PUNYCODE` and the attacker-provided URL\n3. The resulting URL is mirrored back to the attacker or used to make a transfer\n\nFor any application that fulfills these three requirements this vulnerability can be used to leak pointers in the stackframe of `mac_idn_to_ascii()`.\nDepending on what is adjacent to `buffer` the following information could be leaked:\n- Base address of the stack when the framepointer follows `buffer`\n- Base address of the application/libcurl when the return address follows `buffer` (`-fomit-frame-pointer`)\n- Base address of the heap if the variable `UIDNA* idna` follows the buffer\n\nAny of these information leaks bring down exploit mitigations like [ASLR](https://en.wikipedia.org/wiki/Address_space_layout_randomization) or [PIE](https://en.wikipedia.org/wiki/Position-independent_code) and contribute largely to successful exploitation of other memory corruption vulnerabilities.\n\n# Patch\nI suggest the following patch, inspired by [PHP's handling](https://github.com/php/php-src/blob/master/ext/intl/idn/idn.c#L69) of `uidna_nameToASCII_UTF8()`:\n\n```diff\ndiff --git a/lib/idn.c b/lib/idn.c\nindex 8d6bfe7ce..b66e04a64 100644\n--- a/lib/idn.c\n+++ b/lib/idn.c\n@@ -65,13 +65,14 @@ static CURLcode mac_idn_to_ascii(const char *in, char **out)\n   else {\n     UIDNAInfo info = UIDNA_INFO_INITIALIZER;\n     char buffer[256] = {0};\n-    (void)uidna_nameToASCII_UTF8(idna, in, -1, buffer,\n+    int n = uidna_nameToASCII_UTF8(idna, in, -1, buffer,\n       sizeof(buffer), &info, &err);\n     uidna_close(idna);\n-    if(U_FAILURE(err)) {\n+    if(U_FAILURE(err) || n < 0 || n >= sizeof(buffer)) {\n       return CURLE_URL_MALFORMAT;\n     }\n     else {\n+      buffer[n] = 0;\n       *out = strdup(buffer);\n       if(*out)\n         return CURLE_OK;\n```\n\n## Impact\n\nThe vulnerability\n- does not affect the majority of curl installations\n- has strict requirements to work \n- even then only leads to an information leak and nothing worse\n\nHowever, leaking memory content is still security-relevant so I suggest severity \"Low\".",
  "weakness": {
    "id": 9,
    "name": "Buffer Over-read"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2024-08-23T06:43:20.497Z",
  "allow_singular_disclosure_after": -33997568.68779265,
  "singular_disclosure_allowed": true,
  "vote_count": 25,
  "voters": [
    "z2_",
    "zy9ard3",
    "thalaivar304",
    "v7l3nt1m",
    "iwasday",
    "hillybot_",
    "bridgex",
    "metadour",
    "rundom",
    "pr4v1n",
    "and 15 more..."
  ],
  "severity": {
    "rating": "low",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
