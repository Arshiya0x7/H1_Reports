{
  "id": 955016,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC85NTUwMTY=",
  "url": "https://hackerone.com/reports/955016",
  "title": "GitLab-Runner on Windows `DOCKER_AUTH_CONFIG` container host Command Injection",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2020-08-10T15:08:41.978Z",
  "submitted_at": "2020-08-10T15:08:42.114Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ajxchapman",
    "url": "/ajxchapman",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/ey3f0qnxrppswp9im09fgv2kaecf/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 264,
    "url": "https://hackerone.com/gitlab",
    "handle": "gitlab",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "GitLab",
      "twitter_handle": "gitlab",
      "website": "https://about.gitlab.com",
      "about": "A single application for the entire software development lifecycle."
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2020-11-04T08:35:20.727Z",
  "bug_reporter_agreed_on_going_public_at": "2020-11-04T08:35:20.631Z",
  "team_member_agreed_on_going_public_at": "2020-11-03T22:20:39.528Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary\n\nGitLab-Runner, when running on Windows with a `docker` executor, is vulnerable to Command Injection via the `DOCKER_AUTH_CONFIG` build variable. Injected commands are executed on the container host, not within a Docker container, as such could compromise all future builds which are executed by the runner.\n\n## Details\n\nWhen using a `docker` executor, the `DOCKER_AUTH_CONFIG` build variable is processed as a JSON docker config file. One of the possible config values, `credHelpers`, specifies a hash of repository keys to docker Credential Helper application values. \n\n```json\n{\n  \"credHelpers\" : {\n    \"repo.example.com\" : \"application\"\n  }\n}\n```\n\nWhen `gitlab-runner` attempts to create an image, each key value pair in the `credHelpers` hash is processed, and the corresponding Credential Helper application is executed by `gitlab-runner` in order to obtain credentials for the repository. This execution occurs on the docker container host, `gitlab-runner` directly `exec`s the Credential Helper to receive it's output.\n\nDocker Credential Helpers, as processed by the `github.com/docker/cli/cli/config/credentials/native_store.go:NewNativeStore` function are prepended with the string `docker-credential-` before execution:\n\n```go\n// github.com/docker/cli/cli/config/credentials/native_store.go\nconst (\n\tremoteCredentialsPrefix = \"docker-credential-\"\n\ttokenUsername           = \"<token>\"\n)\n\n...\n\nfunc NewNativeStore(file store, helperSuffix string) Store {\n\tname := remoteCredentialsPrefix + helperSuffix\n\treturn &nativeStore{\n\t\tprogramFunc: client.NewShellProgramFunc(name),\n\t\tfileStore:   NewFileStore(file),\n\t}\n}\n```\n\nThis is sufficient to prevent command injection on *nix based systems, however Windows based systems can exploit path traversal to execute arbitrary programs as Credential Helpers. E.G. a `credHelper` of `{\"helper\" : :/../../../../../../../../Windows/System32/calc.exe\"}` would result in the application `docker-credential-/../../../../../../../../Windows/System32/calc.exe` being executed, which on a Windows system would resolve to `C:/Windows/System32/calc.exe`. This only affects Windows based systems, as Windows does not verify path directories exist during path normalization. In this case, Windows does not check the directory `docker-credential-` exists as it is normalized out due to the path traversal characters following it.\n\nThe Credential Helper execution is ultimately called in the `gitlab-runner` code by `gitlab.com/gitlab-org/gitlab-runner/helpers/docker/auth/auth.go:readConfigsFromCredentialsHelper` calling the `github.com/docker/cli/cli/config/credentials/native_store.go:Get` `docker` API method:\n\n```go\n// gitlab.com/gitlab-org/gitlab-runner/helpers/docker/auth/auth.go\nfunc readConfigsFromCredentialsHelper(config *configfile.ConfigFile) (map[string]types.AuthConfig, error) {\n\thelpersAuths := make(map[string]types.AuthConfig)\n\n\tfor registry, helper := range config.CredentialHelpers {\n\t\tstore := credentials.NewNativeStore(config, helper)\n\n\t\tnewAuths, err := store.Get(registry)\n```\n\nThe issue exists as the `gitlab-runner` code does not check for path traversals in Credential Helper values before passing them to the `docker` API.\n\nIn it's simplest form, this issue can be exploited to execute any program that exists on the system running `gitlab-runner` with uncontrolled arguments. However, arbitrary programs can be executed by setting up a `service` which downloads an executable payload to the `C:\\Builds` volume mounted directory, and setting the full path to the volume mounted directory as the `credHelper` value, e.g.:\n```json\n{\n  \"helper\" : \"/../../../../../../../../ProgramData/docker/volumes/runner-aapjznsw-project-20444930-concurrent-0-cache-cde2929a41401004cf47d36bdb2eb380/_data/testfile.exe\"\n}\n```\n\nThis works as the following three conditions are met:\n1. The source of the volume mounted `build` directory is predictable per build\n1. The `DOCKER_AUTH_CONFIG` is processed once for each created container\n1. The build container is created after all `service` containers have been started.\n\n## Steps to reproduce\n\n* Register and run a runner on a Windows system with a docker executor and a tag of `windows-docker-runner`.\n* Create a Build with the following `.gitlab-ci.yml`:\n\n```yml\nservices:\n  - alpasdfasdfasdfasdfasdfidne:3.5\nvariables:\n  DOCKER_AUTH_CONFIG: \"{\\\"credHelpers\\\" : {\\\"repo.example.com\\\" : \\\"/../../../../../../../../Windows/System32/calc.exe\\\"}}\"\n\nbuild1:\n  tags:\n    - windows-docker-runner\n  stage: build\n  script:\n    - whoami\n```\n\nWhen `gitlab-runner` picks up the build it will process the `DOCKER_AUTH_CONFIG` json and launch the CredentialHelper specified, in this case `calc.exe`.\n\nConfirmed vulnerable version configurations are:\n* gitlab-runner 13.2.2 on Windows 10 with Docker Toolbox (`docker` runner)\n* gitlab-runner 13.2.2 on Windows 2019 with Docker Enterprise (`docker-windows` runner)\n\n## Impact\n\nExploitation of this issue could compromise the underlying system on which `gitlab-runner` runs, exposing source code, build artifacts and other sensitive data to a malicious user.\n\n## What is the current *bug* behavior?\n\ngitlab-runner passes unsanitized JSON values from the `DOCKER_AUTH_CONFIG` build variable to the `github.com/docker/cli/cli/config/credentials/native_store.go:NewNativeStore` `docker` API function, which may result in command injection on Windows systems.\n\n## What is the expected *correct* behavior?\n\nJSON supplied via the `DOCKER_AUTH_CONFIG` build variable should be processed to ensure it does not contain malicious content.\n\n## Relevant logs and/or screenshots\n\n{F943021}\n\n## Output of checks\n\n`gitlab-runner --version`\n```\nVersion:      13.2.2\nGit revision: a998cacd\nGit branch:   refs/pipelines/172580057\nGO version:   go1.13.8\nBuilt:        2020-07-30T14:52:23+0000\nOS/Arch:      windows/amd64\n```\n\n`config.toml`\n```toml\nconcurrent = 1\ncheck_interval = 0\n\n[session_server]\n  session_timeout = 1800\n\n[[runners]]\n  name = \"windows\"\n  url = \"https://gitlab.com\"\n  token = \"█████\"\n  executor = \"docker-windows\"\n  [runners.custom_build_dir]\n  [runners.cache]\n    [runners.cache.s3]\n    [runners.cache.gcs]\n  [runners.docker]\n    tls_verify = false\n    image = \"mcr.microsoft.com/windows/servercore:1809\"\n    privileged = false\n    disable_entrypoint_overwrite = false\n    oom_kill_disable = false\n    disable_cache = false\n    volumes = [\"c:\\\\cache\"]\n    shm_size = 0\n```\n\n## Impact\n\nExploitation of this issue could compromise the underlying system on which `gitlab-runner` runs, exposing source code, build artifacts and other sensitive data to a malicious user.",
  "weakness": {
    "id": 59,
    "name": "OS Command Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 943021,
      "file_name": "gitlab-runner-windows.mp4",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/WwTP9bAu5UPfzCRXdpps5Tm9?response-content-disposition=attachment%3B%20filename%3D%22gitlab-runner-windows.mp4%22%3B%20filename%2A%3DUTF-8%27%27gitlab-runner-windows.mp4&response-content-type=video%2Fmp4&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQJXG47D5%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T083338Z&X-Amz-Expires=3410&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIP%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIDMsoJr3wbvf%2FA%2BTQ9RH35dqcd8m%2F%2FjPh%2BMPcNok73nDAiA%2F3sRgOo1r7iI9MIMdcHSFRsrgTPR43y%2BhorDK9vWBPyq7BQj8%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDAxMzYxOTI3NDg0OSIMuG%2FN2X3UAd2Z3YScKo8F%2B1rjJkOhuQmi87M%2Fe1hyCFCZwdhO%2BQ2qRQDdPo1p9BrkydJIcm67Cl35lO07A01ngJGFRUOLwnQDkTmkakI7SvLP8BY36vNmFb2OIHEStTOhFdpSQnO12cvMcwrPa%2FeJRZAfMVWEiUy0fgYWv1MVgJu5AS%2FRD5jRx%2BUoyOBq7j9hWdxbBe6g7C3P8RQF68cbAuFaLWxUhTWEAKcbki52VN7oCt7dQv3v0%2BFC1LRPmsAzgKTuuuFCHzsSJycLLrKloO1yBk8mLja5uTm6mBF3lFwUhMp1DeJ4pbhBgHScYmG2rUnYnz7ClpgWp59calRjI2JFBH9VN45yQcKXxseC9PbinIFl0cz8ycH9Hqk1a63DGMdO3DHcGxS6vgdp0E3N8G0sStO3eO%2BllsH9mcoNjTKkvFTg9%2BIeEZhQ4yZwhXr5hYB%2FylgmzKCXFHKJz41a1rxN%2FUADE9t1w%2BupK7jbf8dYIK2%2FkJw1Lb5RRvPbWnRmdsycGSt7iCiDWNPUN2J%2BAx8WhoVl1jz3ZLDD%2B3%2Fy5muKs2xvnh6uHe6vHfknYjiP0oEVa%2BH%2Ff9cBCcuqjeRTgZU8g1s%2FZMhOQszbK0B7Y0bHk8HSsz1s9JEmxm9T2rhJ%2Fq%2F%2FsRxOxJ1KiAq0Gv1NzEn43A3tfV2ul3NwRZSbSJZ%2F%2FjpE2LnYi2I76qWShf117NcINEXw7HdAl%2FlGsPPyjTD3%2BtiDDn1aj6fqsIfmfWorLo8PuHRsk6Yo9d%2FKaq61ZQkBF6fiDu1C%2BSlIK1DohcbszcsCTpPBhsfvxdRnpFNj6e3O33WK0TQql5%2BZbsRo%2FR38MIsZjvIQyBkcRQoknI%2BQeOZ6dW%2BwGFqpL4IDN%2F3LDgRAKWSlScG%2Bv4DAkTC42b3GBjqyAXSTt%2FV2fq6nO8J73wl6DYhNXmJ6%2BK5BMV55yT%2BLQlUL4BNPBFrpcKk8IyJHfw%2Ff8eRF6KPEARRjOmDIxzhOIvC3dG2%2BBS%2BFCtJfZda%2FHjZsDRbqV0keGW%2Bf0cTmdOO7BZOqo4wKmvoeKvq9fbWTN4Akv3g2XxHQv4UwsGUxa4r5W%2FlgDYhg%2FwnVQpgEWpCAhR5FGbvEdyGZDypzdO%2Buqn0YEs00PTTArqMWDd0xRUrlz74%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=2990541a60eeb4b430bb212069e16247e902e5b4e2c74526e28f5488900ef885",
      "file_size": 3134616,
      "type": "video/mp4",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": null,
  "vote_count": 75,
  "voters": [
    "sky003",
    "n1m0",
    "ajxchapman",
    "mzfr",
    "cdl",
    "mainteemoforfun",
    "shreyaschavhan",
    "bull",
    "ali",
    "bibekshah",
    "and 65 more..."
  ],
  "severity": {
    "rating": "high",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 39022,
    "asset_type": "OTHER",
    "asset_identifier": "Your Own GitLab Instance",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
