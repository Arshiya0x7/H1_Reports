{
  "id": 28640,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yODY0MA==",
  "url": "https://hackerone.com/reports/28640",
  "title": "Ericsson Erlang OTP Core Allocation Subsystem Integer Overflow (All Versions)",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2014-09-19T20:01:50.377Z",
  "submitted_at": "2014-09-19T20:01:50.377Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "donb",
    "url": "/donb",
    "profile_picture_urls": {
      "small": "https://hackerone.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsiZGF0YSI6Mjk5NCwicHVyIjoiYmxvYl9pZCJ9fQ==--0be4173aa500067968bbe9cb6ebb6a6ea6b9a31d/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJwbmciLCJncmF2aXR5IjoiQ2VudGVyIiwicmVzaXplIjoiNjJ4NjJeIiwiY3JvcCI6IjYyeDYyKzArMCJ9LCJwdXIiOiJ2YXJpYXRpb24ifX0=--a4d91faed3dff6024dfc1a7b7f8ccc6b45e38396/Don_Bailey.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 54349,
    "url": "https://hackerone.com/ibb",
    "handle": "ibb",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUSK2VYH5%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T132618Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCFrCxdL93Lf%2FbL6om0DM%2FlYKpTQ6gDQMQJ9hYvgP5dwwIgL7xHbYmrcsl%2B%2BtVo0MkjCCA27EolsI%2BxKy1dEasrBVAqsQUIFBADGgwwMTM2MTkyNzQ4NDkiDINyrMtutciL3NTb1CqOBRDCxppe%2FDST7HhBxQjSAwq9e7IPEJEL%2BWZsP7BIgIM1LFviOBmkbEJAjaK5BrMHVFu9dAv%2FZQk%2FlXwSrjTHx8VD65pbvThXFpsPw4%2BEwkoo9NqqUM8Oa1lPyXsoIGvN7VfgmtHLdxMDMWMunRKuBRSnTepD4cyTWFl0ZvAJuZNH%2BPwT9Qp13QOQOrMIG7UuBr3hEp%2F9zTuofo%2Bq3CFusDR5VNL%2FYbJd7jJhg8ccq1knQbd7IcTjUZ%2BIhKoHdTGyktB24FRz9BfNSTScMrzJKbygYbozfiRbsMFcoflOuVBRK4XREt4beT0cYSu3qPN9Ct%2FUeVtKpz5AmeWpMoxE5JwMA5URJtq2aAP5WX3%2Bj0hiZqpdeHNL6nyIqZyKTK3fRff8OEGul98c%2BboCfp%2BRuSs3kCusetniuOYh6ChAk5ZSHeSo0oQKPQsvTlz5C9OykYUz%2F1XAVx%2BDgLM3JkzIRTUQMA4BbAZ2kgTgGxm6ECyspsowo%2FDgzqdMIvmgk1Ktn%2BSCJkSH91Ydxnme6nIuuSAXXLPvb2U9%2FSYPiyPCiyxId5HKZiluTS%2Bo20UYlpj2lddgr0j8MUE73OByEECHoT15c8N9CMAZBxuRx8QZPGjrtMr3vW6ouy%2F9NaXu3gfkkCKw8gvxBt4shrjLShY2RhST416y1CgaNJF0woFVP%2B7hku%2FGvi%2FBuO%2FOHhnuaOUHcLivD%2FPX8ujT418e6L5Nf0BgV6yjEN7HFi6fVWNrbi%2F477IHk7ITY3lOKWfGsqZV%2FSCPCO0LlOPu287JobA8bu8VB%2F9w2Q026YCP%2Bsm3EB7yDu%2BWstwIZCGSQCBqY0ah7itdAtMm8Ys5rp%2BHjvqHzK3bbl59ukN9%2FYcfpQFZMTDKo7%2FGBjqxAXmkCu%2BxVPamGt0hqmxBHyIUXfmfoUo0Bum8aI0%2FkrJnohpLZjrjnqnovenmc7VfnKUq8xtJdeoYsGtY78yWXkI2VSrky7x%2B%2B6oxDo2HsmRiXO2lyP5Y8lE%2FXjZbG6SXNECA8JNV32HhhpbgtRMz746fStdfEOze0FOc5iH4gPqTIsO%2Fow5GzJFbq8KC%2BL8Y%2BAYwZ0zc3YUkyIuYRdYLbqjptEwIme41FOYIbEUK1VFj7Q%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=c5a15cf28afd86c6ef51d60a4dd1e2e9f267ad04558b205b280641c533f82bd6",
      "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUSK2VYH5%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T132618Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCFrCxdL93Lf%2FbL6om0DM%2FlYKpTQ6gDQMQJ9hYvgP5dwwIgL7xHbYmrcsl%2B%2BtVo0MkjCCA27EolsI%2BxKy1dEasrBVAqsQUIFBADGgwwMTM2MTkyNzQ4NDkiDINyrMtutciL3NTb1CqOBRDCxppe%2FDST7HhBxQjSAwq9e7IPEJEL%2BWZsP7BIgIM1LFviOBmkbEJAjaK5BrMHVFu9dAv%2FZQk%2FlXwSrjTHx8VD65pbvThXFpsPw4%2BEwkoo9NqqUM8Oa1lPyXsoIGvN7VfgmtHLdxMDMWMunRKuBRSnTepD4cyTWFl0ZvAJuZNH%2BPwT9Qp13QOQOrMIG7UuBr3hEp%2F9zTuofo%2Bq3CFusDR5VNL%2FYbJd7jJhg8ccq1knQbd7IcTjUZ%2BIhKoHdTGyktB24FRz9BfNSTScMrzJKbygYbozfiRbsMFcoflOuVBRK4XREt4beT0cYSu3qPN9Ct%2FUeVtKpz5AmeWpMoxE5JwMA5URJtq2aAP5WX3%2Bj0hiZqpdeHNL6nyIqZyKTK3fRff8OEGul98c%2BboCfp%2BRuSs3kCusetniuOYh6ChAk5ZSHeSo0oQKPQsvTlz5C9OykYUz%2F1XAVx%2BDgLM3JkzIRTUQMA4BbAZ2kgTgGxm6ECyspsowo%2FDgzqdMIvmgk1Ktn%2BSCJkSH91Ydxnme6nIuuSAXXLPvb2U9%2FSYPiyPCiyxId5HKZiluTS%2Bo20UYlpj2lddgr0j8MUE73OByEECHoT15c8N9CMAZBxuRx8QZPGjrtMr3vW6ouy%2F9NaXu3gfkkCKw8gvxBt4shrjLShY2RhST416y1CgaNJF0woFVP%2B7hku%2FGvi%2FBuO%2FOHhnuaOUHcLivD%2FPX8ujT418e6L5Nf0BgV6yjEN7HFi6fVWNrbi%2F477IHk7ITY3lOKWfGsqZV%2FSCPCO0LlOPu287JobA8bu8VB%2F9w2Q026YCP%2Bsm3EB7yDu%2BWstwIZCGSQCBqY0ah7itdAtMm8Ys5rp%2BHjvqHzK3bbl59ukN9%2FYcfpQFZMTDKo7%2FGBjqxAXmkCu%2BxVPamGt0hqmxBHyIUXfmfoUo0Bum8aI0%2FkrJnohpLZjrjnqnovenmc7VfnKUq8xtJdeoYsGtY78yWXkI2VSrky7x%2B%2B6oxDo2HsmRiXO2lyP5Y8lE%2FXjZbG6SXNECA8JNV32HhhpbgtRMz746fStdfEOze0FOc5iH4gPqTIsO%2Fow5GzJFbq8KC%2BL8Y%2BAYwZ0zc3YUkyIuYRdYLbqjptEwIme41FOYIbEUK1VFj7Q%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=83530cb3e8df10bbcfa76e74fce6ae128455891b7632cfa3e28a945cbc9c591b"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Internet Bug Bounty",
      "twitter_handle": "",
      "website": "https://www.hackerone.com/internet-bug-bounty",
      "about": "The Internet Bug Bounty rewards security research into vulnerabilities impacting Open Source Software Projects."
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2019-11-12T23:47:42.687Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2019-10-13T23:47:37.755Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "#############################################################################\r\n#\r\n# Lab Mouse Security Report \r\n# LMS-2014-06-23-7\r\n#\r\n\r\nReport ID: LMS-2014-06-23-7\r\nReport Code Name: EARLGREY.1\r\n\r\nResearcher Name: Don A. Bailey\r\nResearcher Organization: Lab Mouse Security\r\nResearcher Email: donb@securitymouse.com\r\nResearcher Website: www.securitymouse.com\r\n\r\nVulnerability Status: Patched\r\nVulnerability Embargo: Successful\r\n\r\nVulnerability Class: Integer Overflow\r\nVulnerability Effect: Memory Corruption\r\nVulnerability Impact: DoS, OOW, RCE\r\nVulnerability DoS Practicality: Practical\r\nVulnerability OOW Practicality: Practical\r\nVulnerability RCE Practicality: Impractical\r\nVulnerability Criticality: Moderate\r\n\r\nVulnerability Scope:\r\n---------------------\r\nAll versions of Erlang OTP are vulnerable. \r\n\r\nCriticality Reasoning\r\n---------------------\r\nWhile Erlang OTP is vulnerable to an integer overflow condition in several\r\nobject allocation functions, triggering the vulnerability remotely is \r\ndifficult. A software engineer would need to build an application that\r\nexposes certain aspects of the Erlang OTP through an API, or a protocol that\r\ntriggers these issues. \r\n\r\nBecause triggering these issues remotely will largely result in Denial of\r\nService, it is unlikely that RCE can occur without significant effort on\r\nbehalf of an attacker. \r\n\r\nTherefore, while RCE is possible, and probable on certain architectures,\r\nit is impractical from the context of the average attacker. This vulnerability \r\nmust be exploited by highly skilled individuals with extensive memory \r\nmanagement and software architecture backgrounds. \r\n\r\nHowever, older versions of Erlang will be more subject to exploitation due\r\nto the widespread use of Erlang in telecommunications environments on\r\nwidespread 32bit embedded systems. Where these systems are concerned,\r\nremote attacks will not be subject to ASLR, NX, or other security enhancements\r\nthat would normally make exploitation improbable. Therefore, systems that fit \r\nthis classification must be evaluated for their potential security impact. \r\n\r\nThis decreases the priority of this vulnerability from High to Moderate. \r\n\r\nIt is also notable that this subtle vulnerability would need to be exploited\r\nin very specialized scenarios, primarily in circumstances where\r\n - a driver/NIF poorly uses the allocation API (see the Erlang LZ4 NIF)\r\n - a 32bit architecture is used\r\n - memory pressure results in small adjacent heap chunks \r\n\r\nVulnerability Description\r\n-------------------------\r\nAn integer overflow occurs in all alloc and realloc functions in the file\r\nerts/emulator/beam/erl_binary.h\r\n\t- erts_bin_drv_alloc_fnf\r\n\t- erts_bin_drv_alloc\r\n\t- erts_bin_nrml_alloc\r\n\t- erts_bin_realloc_fnf\r\n\t- erts_bin_realloc\r\n\r\nThe vulnerability occurs whenever the CHICKEN_PAD is used:\r\nerts_bin_drv_alloc_fnf(Uint size)\r\n{\r\n    Uint bsize = ERTS_SIZEOF_Binary(size) + CHICKEN_PAD;\r\n\r\nThe macro ERTS_SIZEOF_Binary adds 'size' to the size of the internal structure\r\n'Binary'. Then, CHICKEN_PAD is added to this value. Integer overflow can occur\r\nin either the macro or the addition of the CHICKEN_PAD if 'size' is a large\r\ninteger. \r\n\r\nWhen erts_alloc() is called in subsequent code, the memory chunk requested will\r\nbe too small to store an entire ErtsBinary structure. \r\n\r\nIn certain cases it is possible to corrupt memory in interesting ways. For\r\nexample, with crypto:rand_bytes() the user can specify a mask to be set in\r\nthe first and last byte of the generated array. \r\n\r\nOn 32bit systems, we can pass a sufficiently large size to rand_bytes_3. If we\r\nmake the value large enough to trigger the integer overflow, the mask \r\nfunctionality can be used to overwrite the 'flags' field in the 'Binary' \r\nstructure. If this field is set to BIN_FLAG_MAGIC, the Binary will be \r\ninterpreted as an ErtsMagicBinary. \r\n\r\nWhen this object is freed by the garbage collector, the ErtsMagicBinary's\r\n'destructor' function will be called. Since an ErtsBinary is a C union of\r\nthe 'Binary' structure and the 'ErtsMagicBinary' structure, the first four\r\nbytes (or eight, on 64bit platforms) of the random data will be interpreted\r\nas the destructor. \r\n\r\nThe garbage collector will unwittingly call the destructor when freeing up\r\nmemory. This results in code execution on platforms where memory can be\r\nallocated at very low addresses. It is notable that on modern systems, this\r\nattack can rarely succeed.\r\n\r\nIn the example below, an integer overflow is used to force a '1' to be \r\nwritten to the 'flags' variable of the Binary structure. The value '27' is\r\nwritten to the random data array, but is later interpreted as a function\r\naddress, causing Erlang to crash.\r\n\r\ndonb@debian:~$ erl\r\nErlang R15B01 (erts-5.9.1) [source] [async-threads:0] [kernel-poll:false]\r\n\r\nEshell V5.9.1  (abort with ^G)\r\n1> crypto:rand_bytes(16#FFFFFFF1, 1, 27).\r\nSegmentation fault (core dumped)\r\ndonb@debian:~$ gdb -q /usr/lib/erlang/erts-5.9.1/bin/beam core\r\nReading symbols from /usr/lib/erlang/erts-5.9.1/bin/beam...(no debugging \r\nsymbols found)...done.\r\n[New LWP 22034]\r\n\r\nwarning: Can't read pathname for load map: Input/output error.\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \r\n\"/lib/i386-linux-gnu/i686/cmov/libthread_db.so.1\".\r\nCore was generated by `/usr/lib/erlang/erts-5.9.1/bin/beam -- -root \r\n/usr/lib/erlang -progname erl -- -'.\r\nProgram terminated with signal 11, Segmentation fault.\r\n#0  0x0000001b in ?? ()\r\n(gdb) i r eip\r\neip            0x1b     0x1b\r\n(gdb) \r\n\r\n\r\nVulnerability Resolution\r\n------------------------\r\nTo resolve this issue, simply check for integer overflow in the \r\nERTS_SIZEOF_Binary macro and after adding the CHICKEN_PAD macro. This will\r\ndisable attackers from abusing this functions throughout the distribution.\r\n\r\nUpdate - September 18th, 2014\r\n----------------------------------------------\r\nEricsson has released an updated version of Erlang OTP (17.3) that addresses this issue. Please update to the latest OTP as soon as possible. ",
  "weakness": {
    "id": 2,
    "name": "Memory Corruption - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2019-11-12T23:47:37.821Z",
  "allow_singular_disclosure_after": -184858721.0817248,
  "singular_disclosure_allowed": true,
  "vote_count": 2,
  "voters": [
    "base_64",
    "shivammusic"
  ],
  "structured_scope": {
    "databaseId": 84121,
    "asset_type": "OTHER",
    "asset_identifier": "IBB (Legacy)",
    "max_severity": "none"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
