{
  "id": 2958097,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yOTU4MDk3",
  "url": "https://hackerone.com/reports/2958097",
  "title": "Null Pointer Dereference by Crafted Response from AI Model",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2025-01-25T14:41:24.312Z",
  "submitted_at": "2025-01-25T14:41:24.748Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "canalun",
    "url": "/canalun",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 15688,
    "url": "https://hackerone.com/brave",
    "handle": "brave",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/015/688/2aad5641af643ee4f4402896e4747293f6e9c5ca_original.png/36bca6668139d77be42208d896968344ae7a76c55ee0f8b0f28281ccd492ff02",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/015/688/2aad5641af643ee4f4402896e4747293f6e9c5ca_original.png/19c85a12ac35f466af1ea2b0ae853bfe5e8f057fb1d6fb62db131707bb67b30d"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Brave Software",
      "twitter_handle": "brave",
      "website": "https://brave.com",
      "about": ""
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2025-03-26T02:02:48.851Z",
  "bug_reporter_agreed_on_going_public_at": "2025-03-26T02:02:48.585Z",
  "team_member_agreed_on_going_public_at": "2025-03-25T18:10:14.286Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "> NOTE! Thanks for submitting a report! Please fill all sections below with the pertinent details. Remember, the more detail you provide, the easier it is for us to verify and then potentially issue a bounty.\n\n## Summary:\n\n- This is regarding Leo AI's \"Bring your own model\" feature.\n- An attacker has to make user set a malicious endpoint as AI's \"Server endpoint\".\n- The code handling a server response assumes a specific structure without validating it. As a result, null pointer dereference causes by a crafted response.\n\n## Products affected: \n\nBrave browser: Version 1.74.50 Chromium: 132.0.6834.111 (Official Build) (arm64)\n(fyi: OS: macOS sequoia 15.2)\n\n## Steps To Reproduce:\n\n- Open `brave://settings/leo-assistant`.\n- In \"Bring your own model\", add a model with the below params.\n  - Label: `test`\n  - Model request name: `test`\n  - Server endpoint: `https://canalun.company/57e23a24db994321970941049b05d1bb`\n  - Context size: `4000` (default)\n  - API Key: `AAAAAAAAAAAAAAAAAAAAAA` (anything is ok)\n  - System Prompt: `` (empty. default)\n- On any web page, open Leo AI sidebar, choose this model, and push the `Suggest quetions...` button.\n- Even if you open several tabs, the entire browser crash.\n\n## Supporting Material/References:\n\nLog when reproducing it on local build.\n```\nReceived signal 11 SEGV_ACCERR 000000000017\n0   libbase.dylib                       0x0000000105a14de4 base::debug::CollectStackTrace(base::span<void const*, 18446744073709551615ul, void const**>) + 28\n1   libbase.dylib                       0x00000001059fbb84 base::debug::StackTrace::StackTrace(unsigned long) + 108\n2   libbase.dylib                       0x0000000105a14cc0 base::debug::(anonymous namespace)::StackDumpSignalHandler(int, __siginfo*, void*) + 940\n3   libsystem_platform.dylib            0x0000000190346e04 _sigtramp + 56\n4   libchrome_dll.dylib                 0x00000001138251ec ai_chat::OAIAPIClient::OnQueryCompleted(base::OnceCallback<void (base::expected<std::__Cr::basic_string<char, std::__Cr::char_traits<char>, std::__Cr::allocator<char>>, ai_chat::mojom::APIError>)>, api_request_helper::APIRequestResult) + 188\n5   libchrome_dll.dylib                 0x000000011200e4e0 void base::internal::DecayedFunctorTraits<void (brave_vpn::BraveVpnAPIRequest::*)(base::OnceCallback<void (std::__Cr::basic_string<char, std::__Cr::char_traits<char>, std::__Cr::allocator<char>> const&, bool)>, api_request_helper::APIRequestResult), base::WeakPtr<brave_vpn::BraveVpnAPIRequest>&&, base::OnceCallback<void (std::__Cr::basic_string<char, std::__Cr::char_traits<char>, std::__Cr::allocator<char>> const&, bool)>&&>::Invoke<void (brave_vpn::BraveVpnAPIRequest::*)(base::OnceCallback<void (std::__Cr::basic_string<char, std::__Cr::char_traits<char>, std::__Cr::allocator<char>> const&, bool)>, api_request_helper::APIRequestResult), base::WeakPtr<brave_vpn::BraveVpnAPIRequest> const&, base::OnceCallback<void (std::__Cr::basic_string<char, std::__Cr::char_traits<char>, std::__Cr::allocator<char>> const&, bool)>, api_request_helper::APIRequestResult>(void (brave_vpn::BraveVpnAPIRequest::*)(base::OnceCallback<void (std::__Cr::basic_string<char, std::__Cr::char_traits<char>, std::__Cr::allocator<char>> const&, bool)>, api_request_helper::APIRequestResult), base::WeakPtr<brave_vpn::BraveVpnAPIRequest> const&, base::OnceCallback<void (std::__Cr::basic_string<char, std::__Cr::char_traits<char>, std::__Cr::allocator<char>> const&, bool)>&&, api_request_helper::APIRequestResult&&) + 116\n6   libchrome_dll.dylib                 0x0000000110e0d99c base::OnceCallback<void (web_app::(anonymous namespace)::LoadedConfigs)>::Run(web_app::(anonymous namespace)::LoadedConfigs) && + 76\n7   libchrome_dll.dylib                 0x000000011388c4c4 api_request_helper::APIRequestHelper::DeleteAndSendResult(std::__Cr::__list_iterator<std::__Cr::unique_ptr<api_request_helper::APIRequestHelper::URLLoaderHandler, std::__Cr::default_delete<api_request_helper::APIRequestHelper::URLLoaderHandler>>, void*>, base::OnceCallback<void (api_request_helper::APIRequestResult)>, api_request_helper::APIRequestResult) + 196\n8   libchrome_dll.dylib                 0x000000011388e35c void base::internal::DecayedFunctorTraits<void (api_request_helper::APIRequestHelper::*)(std::__Cr::__list_iterator<std::__Cr::unique_ptr<api_request_helper::APIRequestHelper::URLLoaderHandler, std::__Cr::default_delete<api_request_helper::APIRequestHelper::URLLoaderHandler>>, void*>, base::OnceCallback<void (api_request_helper::APIRequestResult)>, api_request_helper::APIRequestResult), base::WeakPtr<api_request_helper::APIRequestHelper>&&, std::__Cr::__list_iterator<std::__Cr::unique_ptr<api_request_helper::APIRequestHelper::URLLoaderHandler, std::__Cr::default_delete<api_request_helper::APIRequestHelper::URLLoaderHandler>>, void*>&&, base::OnceCallback<void (api_request_helper::APIRequestResult)>&&>::Invoke<void (api_request_helper::APIRequestHelper::*)(std::__Cr::__list_iterator<std::__Cr::unique_ptr<api_request_helper::APIRequestHelper::URLLoaderHandler, std::__Cr::default_delete<api_request_helper::APIRequestHelper::URLLoaderHandler>>, void*>, base::OnceCallback<void (api_request_helper::APIRequestResult)>, api_request_helper::APIRequestResult), base::WeakPtr<api_request_helper::APIRequestHelper> const&, std::__Cr::__list_iterator<std::__Cr::unique_ptr<api_request_helper::APIRequestHelper::URLLoaderHandler, std::__Cr::default_delete<api_request_helper::APIRequestHelper::URLLoaderHandler>>, void*>, base::OnceCallback<void (api_request_helper::APIRequestResult)>, api_request_helper::APIRequestResult>(void (api_request_helper::APIRequestHelper::*)(std::__Cr::__list_iterator<std::__Cr::unique_ptr<api_request_helper::APIRequestHelper::URLLoaderHandler, std::__Cr::default_delete<api_request_helper::APIRequestHelper::URLLoaderHandler>>, void*>, base::OnceCallback<void (api_request_helper::APIRequestResult)>, api_request_helper::APIRequestResult), base::WeakPtr<api_request_helper::APIRequestHelper> const&, std::__Cr::__list_iterator<std::__Cr::unique_ptr<api_request_helper::APIRequestHelper::URLLoaderHandler, std::__Cr::default_delete<api_request_helper::APIRequestHelper::URLLoaderHandler>>, void*>&&, base::OnceCallback<void (api_request_helper::APIRequestResult)>&&, api_request_helper::APIRequestResult&&) + 196\n9   libchrome_dll.dylib                 0x0000000110e0d99c base::OnceCallback<void (web_app::(anonymous namespace)::LoadedConfigs)>::Run(web_app::(anonymous namespace)::LoadedConfigs) && + 76\n10  libchrome_dll.dylib                 0x000000011388e0a0 api_request_helper::APIRequestHelper::URLLoaderHandler::OnParseJsonResponse(api_request_helper::APIRequestResult, base::expected<base::Value, std::__Cr::basic_string<char, std::__Cr::char_traits<char>, std::__Cr::allocator<char>>>) + 1016\n11  libchrome_dll.dylib                 0x000000011388ea2c void base::internal::DecayedFunctorTraits<void (api_request_helper::APIRequestHelper::URLLoaderHandler::*)(api_request_helper::APIRequestResult, base::expected<base::Value, std::__Cr::basic_string<char, std::__Cr::char_traits<char>, std::__Cr::allocator<char>>>), base::WeakPtr<api_request_helper::APIRequestHelper::URLLoaderHandler>&&, api_request_helper::APIRequestResult&&>::Invoke<void (api_request_helper::APIRequestHelper::URLLoaderHandler::*)(api_request_helper::APIRequestResult, base::expected<base::Value, std::__Cr::basic_string<char, std::__Cr::char_traits<char>, std::__Cr::allocator<char>>>), base::WeakPtr<api_request_helper::APIRequestHelper::URLLoaderHandler> const&, api_request_helper::APIRequestResult, base::expected<base::Value, std::__Cr::basic_string<char, std::__Cr::char_traits<char>, std::__Cr::allocator<char>>>>(void (api_request_helper::APIRequestHelper::URLLoaderHandler::*)(api_request_helper::APIRequestResult, base::expected<base::Value, std::__Cr::basic_string<char, std::__Cr::char_traits<char>, std::__Cr::allocator<char>>>), base::WeakPtr<api_request_helper::APIRequestHelper::URLLoaderHandler> const&, api_request_helper::APIRequestResult&&, base::expected<base::Value, std::__Cr::basic_string<char, std::__Cr::char_traits<char>, std::__Cr::allocator<char>>>&&) + 184\n12  libchrome_dll.dylib                 0x0000000110e0d99c base::OnceCallback<void (web_app::(anonymous namespace)::LoadedConfigs)>::Run(web_app::(anonymous namespace)::LoadedConfigs) && + 76\n13  libchrome_dll.dylib                 0x000000011388e818 _ZN4base8internal7InvokerINS0_13FunctorTraitsIOZN18api_request_helper12_GLOBAL__N_127ParseJsonInWorkerTaskRunnerENSt4__Cr12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEPNS_19SequencedTaskRunnerENS_12OnceCallbackIFvNS_8expectedINS_5ValueESB_EEEEEE3$_1JOSJ_EEENS0_9BindStateILb0ELb0ELb0ESK_JSJ_EEEFvNSF_ISG_NS_10JSONReader5ErrorEEEEE7RunOnceEPNS0_13BindStateBaseEOSS_ + 92\n14  libchrome_dll.dylib                 0x0000000110e0d99c base::OnceCallback<void (web_app::(anonymous namespace)::LoadedConfigs)>::Run(web_app::(anonymous namespace)::LoadedConfigs) && + 76\n15  libchrome_dll.dylib                 0x0000000110ffb9ac void base::internal::ReplyAdapter<base::expected<base::Value, base::JSONReader::Error>, base::expected<base::Value, base::JSONReader::Error>>(base::OnceCallback<void (base::expected<base::Value, base::JSONReader::Error>)>, std::__Cr::unique_ptr<base::expected<base::Value, base::JSONReader::Error>, std::__Cr::default_delete<base::expected<base::Value, base::JSONReader::Error>>>*) + 56\n16  libchrome_dll.dylib                 0x0000000110e9a904 base::internal::Invoker<base::internal::FunctorTraits<void (*&&)(base::OnceCallback<web_app::(anonymous namespace)::LoadedConfigs ()>, std::__Cr::unique_ptr<web_app::(anonymous namespace)::LoadedConfigs, std::__Cr::default_delete<web_app::(anonymous namespace)::LoadedConfigs>>*), base::OnceCallback<web_app::(anonymous namespace)::LoadedConfigs ()>&&, std::__Cr::unique_ptr<web_app::(anonymous namespace)::LoadedConfigs, std::__Cr::default_delete<web_app::(anonymous namespace)::LoadedConfigs>>*&&>, base::internal::BindState<false, true, false, void (*)(base::OnceCallback<web_app::(anonymous namespace)::LoadedConfigs ()>, std::__Cr::unique_ptr<web_app::(anonymous namespace)::LoadedConfigs, std::__Cr::default_delete<web_app::(anonymous namespace)::LoadedConfigs>>*), base::OnceCallback<web_app::(anonymous namespace)::LoadedConfigs ()>, base::internal::UnretainedWrapper<std::__Cr::unique_ptr<web_app::(anonymous namespace)::LoadedConfigs, std::__Cr::default_delete<web_app::(anonymous namespace)::LoadedConfigs>>, base::unretained_traits::MayNotDangle, (partition_alloc::internal::RawPtrTraits)0>>, void ()>::RunOnce(base::internal::BindStateBase*) + 36\n17  libbase.dylib                       0x00000001058e2194 base::OnceCallback<void ()>::Run() && + 68\n18  libbase.dylib                       0x00000001059b5624 base::internal::PostTaskAndReplyRelay::RunReply(base::internal::PostTaskAndReplyRelay) + 44\n19  libbase.dylib                       0x00000001059b5500 base::internal::Invoker<base::internal::FunctorTraits<void (*&&)(base::internal::PostTaskAndReplyRelay), base::internal::PostTaskAndReplyRelay&&>, base::internal::BindState<false, true, false, void (*)(base::internal::PostTaskAndReplyRelay), base::internal::PostTaskAndReplyRelay>, void ()>::RunOnce(base::internal::BindStateBase*) + 44\n20  libbase.dylib                       0x00000001058e2194 base::OnceCallback<void ()>::Run() && + 68\n21  libbase.dylib                       0x000000010597c91c base::TaskAnnotator::RunTaskImpl(base::PendingTask&) + 280\n22  libbase.dylib                       0x00000001059aa8b8 base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoWorkImpl(base::LazyNow*) + 1020\n23  libbase.dylib                       0x00000001059aa158 base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoWork() + 100\n24  libbase.dylib                       0x0000000105a278d0 base::MessagePumpCFRunLoopBase::RunWork() + 156\n25  libbase.dylib                       0x0000000105a1e6e8 base::apple::CallWithEHFrame(void () block_pointer) + 16\n26  libbase.dylib                       0x0000000105a26e28 base::MessagePumpCFRunLoopBase::RunWorkSource(void*) + 68\n27  CoreFoundation                      0x00000001903f8894 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 28\n28  CoreFoundation                      0x00000001903f8828 __CFRunLoopDoSource0 + 176\n29  CoreFoundation                      0x00000001903f858c __CFRunLoopDoSources0 + 244\n30  CoreFoundation                      0x00000001903f7128 __CFRunLoopRun + 840\n31  CoreFoundation                      0x00000001903f6724 CFRunLoopRunSpecific + 588\n32  HIToolbox                           0x000000019b94e530 RunCurrentEventLoopInMode + 292\n33  HIToolbox                           0x000000019b954348 ReceiveNextEventCommon + 676\n34  HIToolbox                           0x000000019b954508 _BlockUntilNextEventMatchingListInModeWithFilter + 76\n35  AppKit                              0x0000000193f61034 _DPSNextEvent + 660\n36  AppKit                              0x00000001948c52d4 -[NSApplication(NSEventRouting) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 688\n37  libchrome_dll.dylib                 0x0000000112609ac8 __71-[BrowserCrApplication nextEventMatchingMask:untilDate:inMode:dequeue:]_block_invoke + 64\n38  libbase.dylib                       0x0000000105a1e6e8 base::apple::CallWithEHFrame(void () block_pointer) + 16\n39  libchrome_dll.dylib                 0x0000000112609a10 -[BrowserCrApplication nextEventMatchingMask:untilDate:inMode:dequeue:] + 188\n40  AppKit                              0x0000000193f54060 -[NSApplication run] + 480\n41  libbase.dylib                       0x0000000105a28588 base::MessagePumpNSApplication::DoRun(base::MessagePump::Delegate*) + 396\n42  libbase.dylib                       0x0000000105a26794 base::MessagePumpCFRunLoopBase::Run(base::MessagePump::Delegate*) + 140\n43  libbase.dylib                       0x00000001059ab4e8 base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::Run(bool, base::TimeDelta) + 528\n44  libbase.dylib                       0x00000001059504c0 base::RunLoop::Run(base::Location const&) + 360\n45  libcontent.dylib                    0x000000012090237c content::BrowserMainLoop::RunMainMessageLoop() + 180\n46  libcontent.dylib                    0x0000000120903fb8 content::BrowserMainRunnerImpl::Run() + 48\n47  libcontent.dylib                    0x00000001208ff968 content::BrowserMain(content::MainFunctionParams) + 152\n48  libcontent.dylib                    0x00000001216089dc content::RunBrowserProcessMain(content::MainFunctionParams, content::ContentMainDelegate*) + 176\n49  libcontent.dylib                    0x000000012160a028 content::ContentMainRunnerImpl::RunBrowser(content::MainFunctionParams, bool) + 1020\n50  libcontent.dylib                    0x0000000121609b14 content::ContentMainRunnerImpl::Run() + 548\n51  libcontent.dylib                    0x0000000121608048 content::RunContentProcess(content::ContentMainParams, content::ContentMainRunner*) + 1244\n52  libcontent.dylib                    0x0000000121608284 content::ContentMain(content::ContentMainParams) + 112\n53  libchrome_dll.dylib                 0x0000000110e06dac ChromeMain + 684\n54  Brave Browser Development           0x0000000104f007e0 main + 288\n55  dyld                                0x000000018ff90274 start + 2840\n[end of stack trace]\n[0125/231828.615759:ERROR:bootstrap.cc(65)] bootstrap_look_up com.apple.ReportCrash: Unknown service name (1102)\n[1]    67722 segmentation fault   --enable-logging --v=0 --disable-brave-update --use-mock-keychain\n```\n\nThis is caused by here.\n```\nvoid OAIAPIClient::OnQueryCompleted(GenerationCompletedCallback callback,\n                                    APIRequestResult result) {\n  const bool success = result.Is2XXResponseCode();\n  // Handle successful request\n  if (success) {\n    std::string completion = \"\";\n    // We're checking for a value body in case for non-streaming API results.\n    if (result.value_body().is_dict()) {\n      const base::Value::List* choices =\n          result.value_body().GetDict().FindList(\"choices\");\n      if (!choices) {\n        DVLOG(2) << \"No choices list found in response.\";\n        return;\n      }\n      if (choices->front().is_dict()) {\n        const base::Value::Dict* message =\n            choices->front().GetDict().FindDict(\"message\");\n        if (!message) {\n          DVLOG(2) << \"No message dict found in response.\";\n          return;\n        }\n        completion = *message->FindString(\"content\"); // ***HERE*** The code assumes the `message` field always has at least one `content` field.\n      }\n    }\n\n    std::move(callback).Run(base::ok(std::move(completion)));\n    return;\n  }\n\n  // omit //\n}\n```\n\nI think nullptr check should be added.\n\n## Impact\n\n- It always causes a crash of the entire browser.\n- In general, null pointer dereferences leads to RCE in some cases.\n  - I've not been occurred by any idea to exploit this for RCE.\n  - I know just a crash is not rewarded, but reported the issue just in case, because it could be used as a step stone to RCE and especially it's in the privileged browser process.",
  "bounty_amount": "100.0",
  "formatted_bounty": "$100",
  "weakness": {
    "id": 51,
    "name": "NULL Pointer Dereference"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 115,
  "voters": [
    "bugbountyfull",
    "aboalezz",
    "zy9ard3",
    "xgoon",
    "2026",
    "uoqki",
    "shubham_srt",
    "mohaned0101",
    "neilx",
    "mr-alienx-kurd",
    "and 105 more..."
  ],
  "severity": {
    "rating": "low",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 7934,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/brave/brave-core",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
