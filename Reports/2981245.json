{
  "id": 2981245,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yOTgxMjQ1",
  "url": "https://hackerone.com/reports/2981245",
  "title": "(\"possible\") UAF",
  "state": "Closed",
  "substate": "not-applicable",
  "severity_rating": "none",
  "readable_substate": "N/A",
  "created_at": "2025-02-07T20:54:16.947Z",
  "submitted_at": "2025-02-07T20:54:17.316Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "7mkrooal",
    "url": "/7mkrooal",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool doing internet transfers"
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2025-02-08T09:57:29.816Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2025-02-08T09:57:20.165Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Title: Potential Use-After-Free Vulnerability in cf_h2_proxy_ctx_free Function of libcurl\n\nVulnerability Overview: A potential Use-After-Free (UAF) vulnerability has been identified in the cf_h2_proxy_ctx_free function of the libcurl library. This issue occurs when the cf_h2_proxy_ctx object is freed and then accessed shortly afterward, leading to undefined behavior, including potential crashes, memory corruption, or security vulnerabilities if exploited.\n\nImpact:\n\nCrashes\nMemory corruption\nPossible remote code execution or data leakage if exploited in a malicious environment.\nSteps to Reproduce:\n\nObtain libcurl:\nCompile and Run the Example Code: Use the simplified code below to reproduce the vulnerability. The code demonstrates freeing a context object (cf_h2_proxy_ctx) and then accessing it, leading to undefined behavior.\n\nExample Code:\n\n\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct cf_h2_proxy_ctx {\n    int stream_id;\n    void *inbufq;\n    void *outbufq;\n};\n\nvoid cf_h2_proxy_ctx_free(struct cf_h2_proxy_ctx *ctx) {\n    if (ctx) {\n        printf(\"Freeing ctx (stream_id: %d)\\n\", ctx->stream_id);\n        free(ctx);\n    }\n}\n\nvoid trigger_bug(struct cf_h2_proxy_ctx *ctx) {\n    printf(\"Triggering bug...\\n\");\n    if (ctx) {\n        printf(\"Using ctx with stream_id: %d\\n\", ctx->stream_id);\n    } else {\n        printf(\"Error: ctx is already freed!\\n\");\n    }\n}\n\nint main() {\n    // Simulate creating a proxy context\n    struct cf_h2_proxy_ctx *ctx = malloc(sizeof(struct cf_h2_proxy_ctx));\n    if (!ctx) {\n        perror(\"Failed to allocate memory for ctx\");\n        return 1;\n    }\n    ctx->stream_id = 12345;\n\n    cf_h2_proxy_ctx_free(ctx);\n    trigger_bug(ctx);\n\n    return 0;\n}\n\nRun the Code and Observe the Output: Upon execution, the following output indicates the cf_h2_proxy_ctx object is being accessed after it has been freed:\n\n\nFreeing ctx (stream_id: 12345)\nUsing ctx with stream_id:  54321\nVerify with Valgrind: To confirm the issue, run the program with Valgrind to detect any memory errors:\n\n\nvalgrind ./your_program\nValgrind Output \n\n\nMemcheck, a memory error detector\n(\"Invalid read of size 4\")\nat 0xxxxxx:\nby 0xxxxxx:\nAddress 0xxx is 0 bytes inside a block of size 24 freed\nat 0xxxxxxx: free\nby 0xxxxxx: cf_h2_proxy_ctx_free\nby 0xxxxx: main\n\n## Impact\n\nA potential Use-After-Free (UAF) vulnerability has been identified in the cf_h2_proxy_ctx_free function of the libcurl library. The issue occurs when the cf_h2_proxy_ctx object is freed and then accessed shortly after, leading to undefined behavior, including possible crashes, memory corruption, or security vulnerabilities if exploited.\n\n\"Note: I’m a beginner in this area, so please let me know if I’ve missed or misinterpreted any details, or if I’ve misunderstood the issue entirely. This report has been assisted by AI.\"",
  "weakness": {
    "id": 2,
    "name": "Memory Corruption - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 29,
  "voters": [
    "aboalezz",
    "zonduu",
    "idynavu",
    "2026",
    "thalaivar304",
    "eye_",
    "br4ck3ts",
    "spectre-1",
    "miwnexp",
    "virajm",
    "and 19 more..."
  ],
  "severity": {
    "rating": "none",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
