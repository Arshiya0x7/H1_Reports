{
  "id": 117480,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMTc0ODA=",
  "url": "https://hackerone.com/reports/117480",
  "title": "Stored XSS via Angular Expression injection on developer.zendesk.com",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2016-02-19T18:25:48.676Z",
  "submitted_at": "2016-02-19T18:25:48.676Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "albinowax",
    "url": "/albinowax",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/056/414/9d843d496965d8c0e710de3867a41720c1577dc4_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 205,
    "url": "https://hackerone.com/zendesk",
    "handle": "zendesk",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/vqazo0hs6n64m1y7wrfnhrao63p9/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/vqazo0hs6n64m1y7wrfnhrao63p9/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Zendesk",
      "twitter_handle": "",
      "website": "https://www.zendesk.com",
      "about": "At Zendesk weâ€™re on a mission to simplify the complexity of business and make it easy for companies and customers to create connections. "
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2016-06-01T21:15:09.461Z",
  "bug_reporter_agreed_on_going_public_at": "2016-05-28T12:32:06.476Z",
  "team_member_agreed_on_going_public_at": "2016-06-01T21:15:09.350Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "developer.zendesk.com is vulnerable to stored XSS via Angular template injection.\n\nTo replicate:\nBrowse to https://developer.zendesk.com\nSign up with an arbitrary email address and the following name: \"{{'a'.constructor.prototype.charAt=[].join;$eval('x=alert(1)');}}\"\nObserve the popup. \n\nThis is a stored vulnerability - every time that user views https://developer.zendesk.com/account it will hit them.\n\nThis is not self-xss - it's possible to exploit other users by using the intentional XSS on freetrial.zendesk.com to inject a cookie into other users' browsers, forcibly logging them into my account. \n\n\nClient-side template injection vulnerabilities arise when applications using a client-side template framework dynamically embed user input in web pages. When a web page is rendered, the framework will scan the page for template expressions, and execute any that it encounters. An attacker can exploit this by supplying a malicious template expression that launches a cross-site scripting (XSS) attack.\n\nIf possible, avoid using server-side code to dynamically embed user input into client-side templates. You can prevent angular from executing expressions in blocks of HTML by using the ng-non-bindable directive: https://docs.angularjs.org/api/ng/directive/ngNonBindable If this is not practical, consider filtering out { and } from user input. Upgrading to Angular 1.5 will prevent this particular sandbox escape from working, but is not a robust fix as Angular maintain that the sandbox isn't a security feature and can't be trusted - see https://sites.google.com/site/bughunteruniversity/nonvuln/angularjs-expression-sandbox-bypass\n\nPlease refer to http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html for further information on this technique.",
  "weakness": {
    "id": 60,
    "name": "Cross-site Scripting (XSS) - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 74379,
      "file_name": "zendesk_storedxss.PNG",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/074/379/d78b87a3f12340178e9a65d68f62ac8ad966aa94/zendesk_storedxss.PNG?response-content-disposition=attachment%3B%20filename%3D%22zendesk_storedxss.PNG%22%3B%20filename%2A%3DUTF-8%27%27zendesk_storedxss.PNG&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYR7W3FZ4%2F20250922%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250922T131606Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIHZI7Sn87xpkFKQ6tochGRpFv0cTQwA9789Px6YknW5cAiAIpGUr6vs9hwOKc%2B%2BukMY8vfkGM0MHh5YD1enkLwjezCqxBQgtEAMaDDAxMzYxOTI3NDg0OSIMmImhuS2OvOF%2Fuk2MKo4FXrwccs4SuocNqTTCPk2NhHsi9H%2FyfQz9cGi63rw1nYKOCugrOsReeAMMV%2FAKCLBG3VuJMh1VUnPMWOFgpYM%2Bn8g9y8pEDmcNuaWu9CEa0ZkJOdht6QZdrDFjfseFem9cK%2FtHxM%2FWCnADfvK416poaQ8Zu2aov9hAcyrvFmXnwFUy3WhtY5aCsyLdo6AnIqAGW4z7LUm9TGQv6PJoWKriOAPODKtIo4FXY9ZoFhyWgozmsf%2BEYorpr6fia%2FBQN9RBLuyOIaBvjoVcMh8P1q5kGY%2FT3UWgBO2cSMHioWA5T12BxghHEBdBSH95tgJZ3%2BrkEmMnKdFebulTsR%2BeNnYxc7WfFUFdRSr8EsL5XVgkm3mwj7MlhwqOfidxdGFnvTnOd%2BSqfINTEW%2BXk%2FCsS4tNnpdUfS8SsYFg2ohcDGr9d0l9qi%2FPCEr431yW13FAFwI5ezyDRg3OCC%2F2LUC2ZUurX8%2BU0nP4KUIPfRoRi4IgNQ3UEE26pI6OtyGdv3K6Dk5VDC9NRubOHsPgAAvyimDeuGu1MtVF2Wm%2F5TaXc5S6v2MykDJXXbAlbB7boCZoyk2EVJyA%2FsOv26wN6ibzPQD982lqKBn91WnI%2B%2BQhkE%2Bu10LpENsPfA9ODlxqCPtMOyy4mavOjynND1z3XuDFbuKyQ4t58tXiPWNqiPmV0y%2F0dzzQ7g%2FzJzKvHPEWef2blW8NOzoZwlADsypq%2FvgO3yaBHf3vkmu6ykccAzAcs70oSbbR0YN9jWYprUytMy17v2wQo8kcUTScDxwNTY1NtWKT7X5CeZPCG6BInT3VUhTGkgVgrqVzfhrW9jjNV5Ii6ZxnOslaXFYvuX%2BVwkjOIIXhAVKdUpn%2BVcjeV35nmpYwMPz8xMYGOrIB8rS2qgA4H2V17o9e5gf%2FFBcjX6mJXCvPg0Wl0gBg5ZGFZKbHUClcN47zMy5pmB7aunMHQyHKW8nVQ4zbdJlPELCtfcYBWYzUHIwDEl4qf6ICXb0JHf2KftBSH3l1eqmJQ8kNayrBzn9%2FuXcELZrR14dZJGS8ZRLtLN8rksOOEEJPgodhP2Ekes4o3tstL5umybGI7FUyMpjbLP7ESvBz3uz0ZVOx0Qaj5%2BIH%2BJ7eKjlSjQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=2d941a700755d722a6f5875b09e487efe8e96294e6db4d1505f8ccaf09108f12",
      "file_size": 173338,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": null,
  "vote_count": 9,
  "voters": [
    "albinowax",
    "spam404",
    "2026",
    "snoopy101",
    "greensec",
    "0xm1racle",
    "spetr0x",
    "911",
    "dyabla"
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
