{
  "id": 1375393,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMzc1Mzkz",
  "url": "https://hackerone.com/reports/1375393",
  "title": "\"External status checks\" can be accepted by users below developer access if the user is either author or assignee of the target merge request",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2021-10-20T07:03:56.355Z",
  "submitted_at": "2021-10-20T07:03:56.531Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "joaxcar",
    "url": "/joaxcar",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/9865qc9er7t2lratx5rgszbf3257/c8a1698ff707a5e3e8a91a3484838363845daac68cb82c86d55c9e2d44d67b67?response-content-disposition=inline%3B%20filename%3D%224FB38693-148C-4D50-BBCD-D726D3AE2B4F.jpeg%22%3B%20filename%2A%3DUTF-8%27%274FB38693-148C-4D50-BBCD-D726D3AE2B4F.jpeg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQVV6OTGUW%2F20250920%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250920T233044Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEH0aCXVzLXdlc3QtMiJGMEQCIHsU66A61q%2FlujKx%2F7DiN0ngi%2B2MokXzllqmyQF%2BmMOnAiAl7mwCDfNkLpWtv204DlKZDZIA%2B4f0p5slV%2BPxbK3ediq7BQj2%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDAxMzYxOTI3NDg0OSIMg%2FheMSFTyewVlFN4Ko8FFvmXVeKHNwpyioHpa46JoNm1Qi6Q%2F4l8T1nIxBWDihFpNi8h4xdUP9yZQU69usZVfuWbxbxGx%2FVG%2FwMlDgRN0Cct7qcUjjUSW6XtvjNfV%2F1NGPuB3X5cL9Z9kX2OCn2dgkpejawPQOIDfaGOfvYxS7e6Fqb2ecWyBNamEo0WUc%2FcrJC%2BNMUnYqJ7742%2FgSvjZsb7kLF25vXDVza5uMgM61FCh5EYpY3SLayywz%2BXwt7tM0QyLg%2ByAGhRmicMgvkF6sCtdWGPQfh7yeMAy0W5f8CEhEnwlTCJd6Z6Xt1A467SPd7bv%2BHfGYXWVStRndPUpM7yLo%2FIE%2BR4XINeWXkDAn%2B9EEbydCUgjbCNfzGY9lbbq0sdjDstXD0c3rnyvn67kDdqs6Rxv3oxD4vnFTNOZ3a2e10joWiP5ZjnKGNlPrAjJihoSGdZCnWK%2F3vQ6TFxnR2JH53XAY6wMZZifj8SsrM%2F%2FZIQPVNYxDt3QCMJXPfdQljUxY3z%2BUdJmPDHW4oWyOeKVFYj%2F0gaiIlRJR%2Fnx3J23RwoCCDZSUl%2BFIgr68%2BIDT7VHvrKKkp0vtrCXFOeM2LWT%2F2d5XUrjjKakk6tkY32%2FFzf7n%2BintuS3pB1QNTHnFXtrsx%2BHj6sL%2FSWLjMgKAHGNloOioIMkvoT0yGt9s4ShX6bg8tgcfVbEDvyMovK4CbT1NkRRCdGAEtYEcPwkBy0mRuCTQUkBiBw3umL%2FbDt0REGi3Yt%2BNPgvbI5aPxRNXMiJiKOklGT%2FJNYejYt2ySpAQA5fF8svbAg1O3%2BsedyPgyijTLwf2YGm7U9DP4EFMS1V%2FFLkEuF8IIgaRqdIhg3KOjLkc1NzvBsq5tJ8mONNKnOM5EElN7ESIkNfzDErbzGBjqyAWWwRFq4G0%2Bkb9AUUeHtqBLDbzZUXWVuVHzaimtKnjbZ5TEUzHQpporq%2F06suF3leronSzbI9DRpsg05k2vwuXpkhTob7JYkxsh1bYw4yQNd4GRUJfFVviVjcWM6lHb9hWmPYINjGTA8JaI%2BTzGY6bwa8exRiv1HNnzv9GKGd6GS6z1FCvu%2Fu3A6iesh37pcUXkZXGjD4ASdXWyGt%2BLEKNIPbdHhJ7ubuiJgc4GutEgvQIw%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=c3cd096c35333239e2cc076834f232cd871f0bb0c1cb22377574fdbfd953aa97"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 264,
    "url": "https://hackerone.com/gitlab",
    "handle": "gitlab",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "GitLab",
      "twitter_handle": "gitlab",
      "website": "https://about.gitlab.com",
      "about": "A single application for the entire software development lifecycle."
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2022-06-08T14:04:26.012Z",
  "bug_reporter_agreed_on_going_public_at": "2022-05-25T11:46:41.219Z",
  "team_member_agreed_on_going_public_at": "2022-06-08T14:04:25.776Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "### Summary\n\nAny user who is either author or assignee of a merge request can approve that merge request's `external status checks`. This includes users with `Guest` access that creates MR's either through email or through a fork of the project. It also includes users with `Guest` or `Reporter` access getting assigned to an MR, which is not uncommon in public projects.\n\nThere exists a tiny overlap with my report [1375376](https://hackerone.com/reports/1375376) which is yet not triaged. I describe this overlap in the end of this summary. The reports look similar, but the vulnerabilities are not related. A fix in 1375376 would not fix this report, only the overlap.\n\nThe `external status check` documentation does not offer too much information about how the feature is supposed to function. But the developer discussions and the unit tests suggests that approving an `external status check` should be restricted for users with at least `Developer` access in the project. Here is the issue tracking the development https://gitlab.com/gitlab-org/gitlab/-/issues/267519\n\nIn this [thread](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/59137#note_567776066) the possibility of users abusing the fact that a status check is not tied to any special token. Rather they use regular PAT's, these discussion mentions\n\n> find_merge_request_with_access will at least mean that only those with developer+ access to the project in question would be able to exploit the feature in this way.\n\nThe [unit tests](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/spec/requests/api/status_checks_spec.rb#L29) for this feature checks this assumption with these lines\n\n```\ndescribe 'permissions' do\n    before do\n      stub_licensed_features(external_status_checks: true)\n    end\n\n    it { expect { subject }.to be_allowed_for(:maintainer).of(project) }\n    it { expect { subject }.to be_allowed_for(:developer).of(project) }\n    it { expect { subject }.to be_denied_for(:reporter).of(project) }\n  end\n```\n\nValidating if the user making the request is developer+.\n\nSo to enforce this they have put an authentication block checking if the user have permission to respond to `external status checks` using the function called `find_merge_request_with_access` in this way\n```\nmerge_request = find_merge_request_with_access(params[:merge_request_iid], :approve_merge_request)\n```\nChecking the permission `:approve_merge_request` which is enabled for developers. But as it turns out, this permission is also enabled for users with the permission `:update_merge_request`. In https://gitlab.com/gitlab-org/gitlab/-/blob/master/app/policies/merge_request_policy.rb there is this rule\n\n```\n rule { can?(:update_merge_request) }.policy do\n    enable :approve_merge_request\n  end\n```\nThat enables the permission for anyone that are allowed to update the MR. And in https://gitlab.com/gitlab-org/gitlab/-/blob/master/app/policies/issuable_policy.rb there exists this rule\n\n```\nrule { can?(:guest_access) & assignee_or_author }.policy do\n    enable :read_issue\n    enable :update_issue\n    enable :reopen_issue\n    enable :read_merge_request\n    enable :update_merge_request\n    enable :reopen_merge_request\n  end\n```\nenabling `:update_merge_request` for anyone that have `:guest_access` and is either assignee or author.\n\nThis is probably the root of the problem. And as far as I could make out this is not the intended behavior. A user with `Guest` access can create an MR by forking and directly send approval for all `external status checks` to lure the developers that the MR have been checked. It leads to at least two problems:\n\n* A user with no membership can create a MR in a public project and then \"approve\" the `external status check's without any membership\n* A user who is demoted to `Reporter` in a private project can still \"approve\" `external status check's in MR's where the user is either author or assignee\n\nand at the moment thanks to the vulnerability that I have reported in [1375376](https://hackerone.com/reports/1375376) at present it is also possible to:\n* A user who is demoted to `Guest` in a private project can still \"approve\" `external status check's in MR's where the user is either author or assignee while not being able to actually view the MR\n\n### Steps to reproduce\n\nExternal status checks is an `Ultimate` feature, so make sure the project is created in such an environment\n\n1. Create two users `owner01` and `guest01`\n2. Log in as `owner01` and create a public project `project01` by visiting https://gitlab.com/projects/new#blank_project and take a note of the project ID\n3. Go to the project settings page and expand the tab `merge requests` and scroll down to `external status checks`, settings page https://gitlab.com/owner01/project01/edit\n4. Create a status check with any name and endpoint, and leave the \n5. Log out and log in as `guest01`\n6. Go to the project page https://gitlab.com/owner01/project01 and create a fork with the `fork` button, call it `fork01`.\n7. When the fork is created, create a new branch in the fork https://gitlab.com/guest01/fork01/-/branches/new called `new_branch`\n8. When the fork is created directly click on the option \"create a merge request\", in the \"New merge request\" page click `Change branches` and select the target branch as any branch on the original `project01`\n9. Click \"Create\" and a new MR should be created in `project01` (this is a guest contribution and a normal open-source flow, but note that the `guest01` user is NOT a member of `project01`)\n10. Go to https://gitlab.com/-/profile/personal_access_tokens and create an access token for the API for `guest01`\n11. Open a terminal and make this request to get the ID of the status check (user `project01` ID and MR IID which is probably 1 and `guest01` token), take a note of the returned ID of the status check\n```\ncurl \"https://gitlab.███/api/v4/projects/<PROJECT_ID>/merge_requests/<MR_IID>/status_checks\" -H \"Authorization: Bearer <TOKEN>\"\n```\n12. Send this request to check for the SHA, the request will fail with a message telling you which SHA to use, in this request we use a dummy SHA=a (make sure to also replace CHECK_ID to the found ID from step 12)\n```\ncurl --request POST \\\n  --url 'https://gitlab.com/api/v4/projects/<PROJECT_ID>/merge_requests/<MR_IID>/status_check_responses?sha=a&external_status_check_id=<CHECK_ID>' \\\n  --header 'Authorization: Bearer <TOKEN>'\n```\n13. Now use the returned SHA in this request to finally \"approve\" the status check for the MR\n```\ncurl --request POST \\\n  --url 'https://gitlab.domain.com/api/v4/projects/<PROJECT_ID>/merge_requests/<MR_IID>/status_check_responses?sha=<SHA>&external_status_check_id=<CHECK_ID>' \\\n  --header 'Authorization: Bearer <TOKEN>'\n```\n14. Go to the MR page and verify that the status check is now green and checked, https://gitlab.com/owner01/project01/-/merge_requests/1\n\n### Impact\n\nA `Guest` user can send acknowledge messages to \"approve\" `external status checks` on MR's where the user is either author or assignee. This makes it possible for a malicious user to \"spoof\" acceptance of MR's in projects where the user should not be able to do this. In public projects this mean that any guest contribution from non-members can have its `external status checks` checked by the author itself even if not a member of the project.\n\n### What is the current *bug* behavior?\n\nUsers with access level below `Developer` can accept `external status checks` if they are either author or assignee of the MR\n\n### What is the expected *correct* behavior?\n\nOnly `Developer`+ users that are members of the project should be able to user their PAT to \"approve\" the `external status check`\n\n### Output of checks\n\nThis bug happens on GitLab.com\n\n## Impact\n\nA `Guest` (or `Reporter`) user can send acknowledge messages to \"approve\" `external status checks` on MR's where the user is either author or assignee. This makes it possible for a malicious user to \"spoof\" acceptance of MR's in projects where the user should not be able to do this. In public projects this mean that any guest contribution from non-members can have its `external status checks` checked by the author itself even if not a member of the project.",
  "bounty_amount": "610.0",
  "formatted_bounty": "$610",
  "weakness": {
    "id": 26,
    "name": "Improper Access Control - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 13,
  "voters": [
    "thruster",
    "yukusawa18",
    "zy9ard3",
    "rzx007x",
    "yassinek3ch",
    "bl4de",
    "mohaned0101",
    "shivammusic",
    "destinedtohack",
    "meispi",
    "and 3 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 4.3,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "none",
      "integrity": "low",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 18138,
    "asset_type": "URL",
    "asset_identifier": "gitlab.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
