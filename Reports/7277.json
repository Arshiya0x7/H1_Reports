{
  "id": 7277,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83Mjc3",
  "url": "https://hackerone.com/reports/7277",
  "title": "TLS Triple Handshake Attack",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2014-03-03T15:20:55.000Z",
  "submitted_at": "2014-03-03T15:20:55.000Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "prosecco-inria",
    "url": "/prosecco-inria",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/001/622/679da80a2cf472ca928f6b28f1a6e20f83612325_original.jpg/3cb67cc78dc0cba55b102dd9eca2ee89b206d3e960be830f070583d9070b69ef"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 54349,
    "url": "https://hackerone.com/ibb",
    "handle": "ibb",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2E4OHZCJ%2F20250922%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250922T212158Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD%2BjD37qS9Nc4clk%2FeLqIhgFOch2W4w0b%2Bp%2FZ6GSCzEfAIhALCv%2FCD27mOERV0KmRfpl8%2FAdwashITxtg89ak%2FVSWgUKrIFCDQQAxoMMDEzNjE5Mjc0ODQ5IgxA6bGn8M7FU60VbWkqjwXF9I0j4mza0XhjC3%2FDF42L2bZo0k7U%2Bm79F96rkS2u0IAF5W59uaNiczHDdbP3xpuglCQWzwlMhSktxRCszIwTGk1mChcNxfMB8wtywEoGSMtvIOrFAf89URVZikPxL%2BMVy07EEGm0fA6uvKdbVYdiYdcY9MayCuVOhFsvJiP8qfGKm%2BZ1LaY7Ue74x8IeyzySpnH9EXIWe6Sj8uRdbTZO%2FTkOM7wk0uP9TXuwIF%2Fp%2BxBNvMBg%2B6Bdpk093cpS%2BNrW%2FRun6LHjsB%2BPXQS8StPhj9R19BoSvXHhMkOsgIqh3u3xmrEvChdmQwd%2BQ%2BWxQQ72QxZPVH9YLgczFYXZCAxtaLE4%2F2tPzLOHCbHtvqQnN%2B6YgYN1NlD74fnFyakAinrx0V93Hl73E8b1wWGlrhGmX%2F79EyeLL3CzhN9EGssbWm%2FLutZIDZZtZR3damd0n6LfZLZoLZymnO0jw4TcsUlfk3yHUrHhZdOJkut5Z8rpq7Wg1Gy5dO2QTXdi5Qb8KxCTeDCJ9wj88Yhdc4HGy4dU7SilnoCTsCM941djmRem%2BoDLAeN28ivJcdEBxFk6MbFD%2BsArcmhW4Iv4y0P04POOj7m61q458g01SydKQ834z9OuKgZO%2BVqmRXVd0wn3DVE%2FdlKg2AODlUHh15Z121SV9RGAsUtAS10SsxN0%2BKv5cPtOgFI%2BUs0WjHaYCgkMeAS19cBl7%2FhDKdqXi0FOIwA5l28apltcoA2b3zSffFSzN5jaccfFQf70%2FJTAg8vx%2FNx0Kzf7CuTz846turJ3H8YW8lwCY5EWfUAANDQx7R0epLbAY77mRjH2gl5%2FjzFNoLna%2FnlJp4XPQ5Y6D6MM4bAIXGfMXPvtOBWduzQmO2dZMMi5xsYGOrABucvDy7AmVKeQZAZZ267aqHvFQLGEp3ZUtiANPxAsZrI8oukoXaUdeY2AxhaC0Da9JpyKegKHA6EUZlqX%2BiLygYhy%2B0ALf3FC5h%2Bd6aCAMVgBYQSaD%2F4V%2F0rHsMJare0QL4j%2BGG7O2akbgJYLjmZDVYPtv%2FVNYMQP5s5bS1G%2B9i89J0D8Sm4AliaJGaRns6wO9a1n0tkZGIhJppHOONmyEE4ARUXVY5kjF%2FKo9l89FfM%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=93bab1cd6f482950e7fef99e769d722de9b8d3e4a93e57cb89caf45357c67fa9",
      "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2E4OHZCJ%2F20250922%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250922T212158Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD%2BjD37qS9Nc4clk%2FeLqIhgFOch2W4w0b%2Bp%2FZ6GSCzEfAIhALCv%2FCD27mOERV0KmRfpl8%2FAdwashITxtg89ak%2FVSWgUKrIFCDQQAxoMMDEzNjE5Mjc0ODQ5IgxA6bGn8M7FU60VbWkqjwXF9I0j4mza0XhjC3%2FDF42L2bZo0k7U%2Bm79F96rkS2u0IAF5W59uaNiczHDdbP3xpuglCQWzwlMhSktxRCszIwTGk1mChcNxfMB8wtywEoGSMtvIOrFAf89URVZikPxL%2BMVy07EEGm0fA6uvKdbVYdiYdcY9MayCuVOhFsvJiP8qfGKm%2BZ1LaY7Ue74x8IeyzySpnH9EXIWe6Sj8uRdbTZO%2FTkOM7wk0uP9TXuwIF%2Fp%2BxBNvMBg%2B6Bdpk093cpS%2BNrW%2FRun6LHjsB%2BPXQS8StPhj9R19BoSvXHhMkOsgIqh3u3xmrEvChdmQwd%2BQ%2BWxQQ72QxZPVH9YLgczFYXZCAxtaLE4%2F2tPzLOHCbHtvqQnN%2B6YgYN1NlD74fnFyakAinrx0V93Hl73E8b1wWGlrhGmX%2F79EyeLL3CzhN9EGssbWm%2FLutZIDZZtZR3damd0n6LfZLZoLZymnO0jw4TcsUlfk3yHUrHhZdOJkut5Z8rpq7Wg1Gy5dO2QTXdi5Qb8KxCTeDCJ9wj88Yhdc4HGy4dU7SilnoCTsCM941djmRem%2BoDLAeN28ivJcdEBxFk6MbFD%2BsArcmhW4Iv4y0P04POOj7m61q458g01SydKQ834z9OuKgZO%2BVqmRXVd0wn3DVE%2FdlKg2AODlUHh15Z121SV9RGAsUtAS10SsxN0%2BKv5cPtOgFI%2BUs0WjHaYCgkMeAS19cBl7%2FhDKdqXi0FOIwA5l28apltcoA2b3zSffFSzN5jaccfFQf70%2FJTAg8vx%2FNx0Kzf7CuTz846turJ3H8YW8lwCY5EWfUAANDQx7R0epLbAY77mRjH2gl5%2FjzFNoLna%2FnlJp4XPQ5Y6D6MM4bAIXGfMXPvtOBWduzQmO2dZMMi5xsYGOrABucvDy7AmVKeQZAZZ267aqHvFQLGEp3ZUtiANPxAsZrI8oukoXaUdeY2AxhaC0Da9JpyKegKHA6EUZlqX%2BiLygYhy%2B0ALf3FC5h%2Bd6aCAMVgBYQSaD%2F4V%2F0rHsMJare0QL4j%2BGG7O2akbgJYLjmZDVYPtv%2FVNYMQP5s5bS1G%2B9i89J0D8Sm4AliaJGaRns6wO9a1n0tkZGIhJppHOONmyEE4ARUXVY5kjF%2FKo9l89FfM%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=bc85076d8be9f99b0fd34962e47712c9b73d1f0dc4c6febb8b3f97735f4b64e1"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Internet Bug Bounty",
      "twitter_handle": "",
      "website": "https://www.hackerone.com/internet-bug-bounty",
      "about": "The Internet Bug Bounty rewards security research into vulnerabilities impacting Open Source Software Projects."
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2014-03-03T15:20:55.000Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2014-03-03T15:20:55.000Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "More details are at https://secure-resumption.com [2]\n\nScenario\n======\nConsider a client C that normally authenticates to a server S using a client certificate.  If C uses the same certificate to authenticate to a malicious server M, then we show that M can use C's certificate to authenticate its own connection to S.\n\nThe attack relies on the combination of an initial RSA or DHE handshake, followed by session resumption on a new connection, followed by a client-authenticated renegotiation. During the first two handshakes, C has a connection to M and M has a connection to S. During the third handshake, M is able to authenticate as C to S and as S to C.\n\nThis server-based man-in-the-middle attack should normally have been prevented by the Renegotiation Indication (RI) extension [3] but by injecting session resumption between the two full handshakes, we are able to bypass the renegotiation countermeasure.\n\nTriple Handshake Attack\n================\nI'll briefly summarise the attack below for an initial RSA key exchange.  The webpage [2] has diagrams that will be easier to follow, describes more attack variants, and provides some disclosure status.\n\nThe attack proceeds in three steps:\n\nStep 1. (Initial Handshakes C-M, M-S)\n\n- C connects to M and M connects to S, both handshakes use RSA.\n- M forwards C's and S's client hellos to each other.\n- M receives an encrypted PMS from C and reencrypts it towards S.\n- Both handshakes complete with new sessions and record keys.\n- Both sessions have the same master secret, random nonces, and session id.  (M knows the master secret and record keys since it participated in both handshakes)\n\nStep 2. (Session Resumption C-M, M-S)\n\n- C resumes its session with M on a new connection.\t     \n- M resumes its session with S on a new connection.\n- M forwards all the abbreviated handshake messages unchanged between C and S.\n- Note that the RI extensions on both handshakes are empty, since it is the first handshake on the connection\n- Both handshakes complete with new record keys (and reuse old sessions)\n- Both connections have the same record keys and handshake logs (verify data)\n  (M still knows the record keys and can send messages in either direction.)\n\nStep 3. (Renegotiation C-M-S)\n\n- S requests M for renegotiation with client certificate. \n- M requests C for renegotiation with client certificate.\n- M forwards all renegotiation messages unchanged between C and S \n- Note that since the handshake logs in the preceding handshake were the same, the RI extensions on both handshakes will be the same.\n- Both handshakes complete with new mutually-authenticated sessions and record keys. C now thinks it is connected to S and S thinks it is connected to C.\n- (M does not know the new record keys but its previous messages to S on the same connection \n  may be treated as authenticated by C.)\n\nAt the end of Step 3, S has an incoming connection on which it initially received data from an anonymous client (M) and later received data from an authenticated client (C). This breaks the intended guarantees of the RI extension.\n\nCountermeasures \n===========\nDuring Step 3, C has a connection on which it first received M's certificate and later S's certificate. If C refuses to accept this change of server identity, then it can prevent Step 3 of the attack. Indeed, we recommend mainstream web browsers and HTTPS libraries should systematically forbid the change of server identities during renegotiation.\n\nHowever, already at the end of Step 2, a number of connection and session parameters, such as the tls-unique channel binding for the two connections are the same. So any application-level mechanism that relies on the TLS master secret [4] or channel bindings [5] or exports TLS keying material [6] is vulnerable to a similar man-in-the-middle attack.\n\nWe argue that the core vulnerability here is that the TLS master secret is not bound to enough elements of the TLS session. We propose a new TLS extension that binds the master secret to the hash of the all relevant handshake messages in the initial handshake.\n\nThe proposed draft is available at: http://secure-resumption.com/draft-bhargavan-tls-session-hash-00.txt\n\nThe key idea is that each full handshake is associated with a session hash, computed as\n\t\n```\n\tsession_hash = Hash(handshake_messages) \n```\n\t\nwhere handshake_messages consist of all messages up to and including the ClientKeyExchange.  The extended master secret computation enabled by the extension is then computed as\n\t\n```\n\tmaster_secret = PRF(pre_master_secret, \n                                        \"extended master secret\", \n                                         session_hash) [0..47]; \n```\n\t\nWe've implemented this extension in OpenSSL without much difficulty.  Changing the master secret derivation may seem radical, but we believe it is the main way to counter future attacks that may rely on the session synchronization (step 1) that we exploit here.\n\nAn alternative countermeasure would be an extension (along the lines of [3]) that includes the session hash as defined above in the ClientHello and ServerHello messages of the abbreviated handshake. This would provide an explicit link between the resumption handshake and its original full handshake, and hence prevent the renegotiation attack described above.\n\nWe welcome comments and suggestions.\n-Karthik Bhargavan, Antoine Delignat-Lavaud, and Alfredo Pironti\n\n[1] http://mitls.org\n[2] https://secure-resumption.com\n[3] RFC5746: Transport Layer Security Renegotiation Indication Extension\n[4] The Compound Authentication Binding Problem (draft-puthenkulam-eap-binding-04)\n[5] RFC5929: Channel Bindings for TLS\n[6] RFC5705: Keying Material Exporters for Transport Layer Security\n",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 14,
  "voters": [
    "samet",
    "madrobot",
    "neilx",
    "shivammusic",
    "akshay_raj",
    "4mit44",
    "aminesh",
    "in_vi_sible",
    "find0xt",
    "garry-sharma",
    "and 4 more..."
  ],
  "structured_scope": {
    "databaseId": 84121,
    "asset_type": "OTHER",
    "asset_identifier": "IBB (Legacy)",
    "max_severity": "none"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
