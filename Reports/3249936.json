{
  "id": 3249936,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMjQ5OTM2",
  "url": "https://hackerone.com/reports/3249936",
  "title": "HTTP Request Smuggling Vulnerability Analysis - cURL Security Report",
  "state": "Closed",
  "substate": "not-applicable",
  "severity_rating": "medium",
  "readable_substate": "N/A",
  "created_at": "2025-07-13T13:42:11.154Z",
  "submitted_at": "2025-07-13T13:42:11.368Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "youssef111",
    "url": "/youssef111",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool doing internet transfers"
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2019-16276",
    "CVE-2020-11946"
  ],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2025-07-13T14:39:50.666Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2025-07-13T14:28:25.026Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "# HTTP Request Smuggling Vulnerability Report - cURL\n\n## Summary:\ncURL does not explicitly reject HTTP requests that contain both Transfer-Encoding and Content-Length headers, which can lead to HTTP request smuggling vulnerabilities (CWE-444) when the request passes through intermediary systems (proxies, load balancers, firewalls) that interpret these conflicting headers differently than the destination server. This inconsistent interpretation allows attackers to potentially smuggle malicious requests past security controls or cause cache poisoning attacks.\n\nThe vulnerability stems from the `http_req_set_reader()` function in `http.c` which processes Transfer-Encoding headers without validating for the presence of conflicting Content-Length headers. While cURL internally prioritizes Transfer-Encoding over Content-Length when both are present, it does not remove or reject the conflicting Content-Length header, allowing both headers to be sent in the same request.\n\n**Note:** This vulnerability analysis was conducted through manual code review of the cURL source code. AI assistance was used to help structure and format this vulnerability report.\n\n## Affected version\nThis vulnerability affects cURL versions that include the current HTTP request handling implementation. Testing was performed on:\n- **cURL Version:** 8.4.0 (curl-master branch)\n- **Platform:** Windows 10, Linux Ubuntu 20.04\n- **libcurl Version:** 8.4.0\n- **Protocols:** HTTP/1.1, HTTP/2\n- **Features:** SSL, chunked transfer encoding\n\nTo check your version, run:\n```bash\ncurl -V\n```\n\n## Steps To Reproduce:\n1. **Create a test HTTP request with conflicting headers:**\n   ```bash\n   curl -v -X POST \\\n     -H \"Transfer-Encoding: chunked\" \\\n     -H \"Content-Length: 100\" \\\n     -d \"0\\r\\n\\r\\nSMUGGLED_PAYLOAD\" \\\n     http://example.com/test\n   ```\n\n2. **Observe that cURL sends both headers without rejection:**\n   - Monitor the actual HTTP request using `-v` flag\n   - Confirm both `Transfer-Encoding: chunked` and `Content-Length: 100` headers are present\n   - Note that cURL processes the request using chunked encoding while keeping the Content-Length header\n\n3. **Test with a proxy setup to demonstrate smuggling potential:**\n   ```bash\n   # Setup a test proxy that interprets Content-Length first\n   # Then send the conflicting headers through the proxy\n   curl -v --proxy http://test-proxy:8080 \\\n     -H \"Transfer-Encoding: chunked\" \\\n     -H \"Content-Length: 50\" \\\n     -X POST \\\n     -d \"0\\r\\n\\r\\nPOST /admin HTTP/1.1\\r\\nHost: target.com\\r\\n\\r\\n\" \\\n     http://target.com/public\n   ```\n\n4. **Reproduce using Python script for automated testing:**\n   ```python\n   import subprocess\n   \n   def test_smuggling():\n       cmd = [\n           \"curl\", \"-v\", \"--include\",\n           \"-H\", \"Transfer-Encoding: chunked\",\n           \"-H\", \"Content-Length: 200\",\n           \"-X\", \"POST\",\n           \"-d\", \"0\\r\\n\\r\\nGET /smuggled HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n\",\n           \"http://example.com/endpoint\"\n       ]\n       \n       result = subprocess.run(cmd, capture_output=True, text=True)\n       print(\"STDOUT:\", result.stdout)\n       print(\"STDERR:\", result.stderr)\n   \n   test_smuggling()\n   ```\n\n5. **Verify the vulnerability by checking HTTP traffic:**\n   - Use Wireshark or similar tool to capture the actual HTTP request\n   - Confirm that both conflicting headers are present in the wire protocol\n   - Test the same request against different servers/proxies to observe varying interpretations\n\n## Supporting Material/References:\n* **Source Code Analysis:** Review of `http.c` - `http_req_set_reader()` function and `http_req_complete()` function\n* **CWE Classification:** CWE-444 - Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')\n* **CVSS Score:** 6.5 (Medium) - CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:L\n* **Proof of Concept Script:** Python script demonstrating the vulnerability (included in steps above)\n* **Network Traffic Capture:** Wireshark/tcpdump capture showing both headers in the same request\n* **RFC References:** \n  - RFC 7230 Section 3.3.3 (Message Body Length)\n  - RFC 7230 Section 3.3.1 (Transfer-Encoding)\n* **Similar CVEs:** \n  - CVE-2019-16276 (Node.js HTTP request smuggling)\n  - CVE-2020-11946 (HTTP request smuggling in various web servers)\n* **Security Research:** James Kettle's \"HTTP Desync Attacks: Request Smuggling Reborn\" whitepaper\n* **Test Environment:** Docker containers with different proxy configurations for testing header interpretation differences\n\n## Impact\n\nAn attacker can achieve several significant security impacts by exploiting this HTTP request smuggling vulnerability:\n\n**1. Authentication Bypass**\n- Smuggle requests to protected endpoints by bypassing authentication mechanisms\n- Access administrative interfaces or sensitive APIs without proper credentials\n- Escalate privileges by routing requests through different authentication contexts\n\n**2. Cache Poisoning**\n- Poison web caches and CDNs by associating malicious content with legitimate URLs\n- Serve malicious content to subsequent users requesting cached resources\n- Manipulate cached responses to inject malicious scripts or redirect users\n\n**3. Request Hijacking**\n- Intercept and modify other users' requests in shared proxy environments\n- Steal sensitive data from requests of other users sharing the same connection\n- Manipulate session tokens and authentication credentials\n\n**4. Firewall and Security Control Bypass**\n- Circumvent Web Application Firewalls (WAFs) by hiding malicious payloads in smuggled requests\n- Bypass rate limiting and access controls implemented by intermediary devices\n- Evade security monitoring and logging systems\n\n**5. Session Hijacking**\n- Manipulate session management by smuggling requests that appear to come from legitimate users\n- Hijack user sessions by intercepting authentication tokens\n- Perform unauthorized actions on behalf of legitimate users\n\n**6. Data Exfiltration**\n- Access sensitive data by smuggling requests to internal APIs or databases\n- Bypass data loss prevention (DLP) systems\n- Extract confidential information through carefully crafted smuggled requests\n\n**7. Cross-Site Scripting (XSS) and Injection Attacks**\n- Inject malicious scripts into responses through cache poisoning\n- Perform SQL injection attacks by smuggling database queries\n- Execute stored XSS attacks by poisoning cached content\n\n**Impact Severity:** Medium to High depending on the network architecture and security controls in place. The vulnerability is particularly dangerous in environments with multiple proxy layers, CDNs, or shared hosting infrastructures.",
  "weakness": {
    "id": 86,
    "name": "HTTP Request Smuggling"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 4561275,
      "file_name": "HTTP_Request_Smuggling_Vulnerability_Analysis_-_cURL_Security_Report.pdf",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/8dolgwi7c48j4hp4n8x140s5vjvo?response-content-disposition=attachment%3B%20filename%3D%22HTTP_Request_Smuggling_Vulnerability_Analysis_-_cURL_Security_Report.pdf%22%3B%20filename%2A%3DUTF-8%27%27HTTP_Request_Smuggling_Vulnerability_Analysis_-_cURL_Security_Report.pdf&response-content-type=application%2Fpdf&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6DBKT2S3%2F20250920%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250920T164810Z&X-Amz-Expires=2967&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJHMEUCIQCrrD3J%2F3e9DfnMuWlRmvYVATiMHYTPrX2xJg7O6fOXmQIgQtB0etPKdCtpFs6L9y%2Bq5Vacxve66cj7K7PYTkireD4quwUI7f%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDCL0QRzliLmm51qFoSqPBSocvqgcnSUAIkvO%2FJHR8nvJYhVSeCjbWIB2AA8rT7sRl2XJWokKryhSIQdHZBLMBGhrxKxMbmD7inGAS2GVS9FobhFs6ZJbW9bvdnn8%2BqJZSbNm5iGBVb9az9cPxQOjXclnpvaw4DezuvWCw%2FhYCVhNctoxYfC6AQFNhVLVyuAmrR2eXZdpK8tuCic9pUXD%2FLhl%2Fkdm7z%2FVBCZCpKtQUxBU6HW2IRfKHiCKbIutebw21NmSKRVLBHY4m8xky%2BDrZJZ%2Btcvh2Axg3eABf6qHVR2pfZpshkhmJ4nzWvLMv3TzFqMDscCUOCKeXIYhafQ%2FpltQff2X1CdxSeiyeeBQOimjq7JDX6krutLB%2BTEEHEQCi%2BGdni12H9fySRBuDiodC9jDnlrnusqGjQVaY%2FWN%2Fe%2F%2FDD%2FOiUkFu8b259Z%2FSXj4CzTbkZZLDjnKiycBFyi5m5lnopWnfilW0jAegPYcRLG4Pl%2BvlV%2FAzsa6qVRkPNSHNHTybq1u0HZPbhJKNgGjX99bSHeZLM399D%2BCBMSn7b6f4TWSUNrl9hkq1Qid9arnTJOdAFOriFQOLBrG4dmF70iPeJuZ%2FkV5ucq6EQgN9rgo9onmyPvnPV3mkfkwhsXTBexJjkUW1sDbmUkvVW22QTYOArxITwPWuVojSJGEBAd%2FEsp5sRJRuN0fAmNjfxMA4MNGecLtkX3PLlEeNB%2BGuSQQoMa6hVpiRmTSxz13xJ%2Bbzo6STHDSwMX8w%2FCpzt3IVkhfcnizQmfhIrLVXCsCeOft3Tbwcnw5WMWlMq6fKqvBct8at1GLYmvU3F07aGGrjGo%2FZd%2BxrEgkD4sUC4h5HT7fSwkC6haPRsZ3D5J2RsQ08P8OlbDAkC%2F1in0iOLUwtJ%2B6xgY6sQGeD4K5IslP8CA5bncBDGhFUboSFoQTdoXn%2FY1p4USSNbXI7bd%2FU5oe2Bn%2Fl9uAdEBp4aNPni5w34nK1Gf6QqpesahewyOpzws%2BokfscTzm%2FVeDmihAfNlWWN77Eezg3fT1ikphk3JnSf0oKQWvgjejpy4x8Jhzv1%2BV8tm%2Fi9nQyJNGTgSSR3sI%2FmISuEGg1ELt7leewCGrrWG%2B62V7%2FNHLxdP6Q9l6nJaz2AUQx8zEgq4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=69fdeb8933a890f613b0be3df5e81b1f30995b41333f5f180475dd0c9cb2d793",
      "file_size": 177310,
      "type": "application/pdf",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": null,
  "vote_count": 20,
  "voters": [
    "almuntadhar",
    "2026",
    "thalaivar304",
    "lazyar",
    "zephyr31337",
    "vishnuyadav",
    "bughunterpro9999",
    "capital_m0ney",
    "shieldofmana",
    "nexreign",
    "and 10 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
