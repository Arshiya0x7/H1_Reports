{
  "id": 3037326,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMDM3MzI2",
  "url": "https://hackerone.com/reports/3037326",
  "title": "Free of uninitialized pointer in doh_decode_rdata_name()",
  "state": "Closed",
  "substate": "informative",
  "readable_substate": "Informative",
  "created_at": "2025-03-13T21:59:27.670Z",
  "submitted_at": "2025-03-13T21:59:27.851Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "tdp3kel9g",
    "url": "/tdp3kel9g",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/36bca6668139d77be42208d896968344ae7a76c55ee0f8b0f28281ccd492ff02",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/19c85a12ac35f466af1ea2b0ae853bfe5e8f057fb1d6fb62db131707bb67b30d"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool doing internet transfers"
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2025-06-28T21:10:50.481Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2025-06-28T12:27:12.455Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "`doh_decode_rdata_name()` (`lib/doh.c`) frees an uninitialized pointer under certain conditions.\n\nIf the remaining buffer length `*remaining` is <= 0, line 1033 is executed, `free()`-ing the uninitialized pointer `thename.bufr` (source below, from v.8.12.1; the bug is still present in master branch as of 3/11/2025):\n\n```\n1020:static CURLcode doh_decode_rdata_name(unsigned char **buf, size_t *remaining,\n1021:                                      char **dnsname)\n1022:{\n...\n1026:  struct dynbuf thename;\n1027:\n1028:  DEBUGASSERT(buf && remaining && dnsname);\n1029:  if(!buf || !remaining || !dnsname)\n1030:    return CURLE_OUT_OF_MEMORY;\n1031:  rem = (int)*remaining;\n1032:  if(rem <= 0) {\n1033:    Curl_dyn_free(&thename);\n1034:    return CURLE_OUT_OF_MEMORY;\n1035:  }\n1036:  Curl_dyn_init(&thename, CURL_MAXLEN_host_name);\n```\n\n`Curl_dyn_free()` does\n\n```\n    Curl_safefree(s->bufr);\n```\n\nbut `s->bufr` isn't initialized when line 1033 calls it. The bug is that line 1036 should be at the beginning of the function.\n\nTo illustrate the issue using Visual Studio 2022:\n\n1. Build cURL with debugging information;\n2. Set the command arguments for the `curl`project to\n\n    -v --ssl-no-revoke --doh-url https://cloudflare-dns.com/dns-query https://www.google.com\n\nand set that project as the startup project.\n\n3. Set a BP on line 1032.\n4. Run curl.\n5. When the BP fires, use the debugger to doctor `rem` to `0`.\n6. Step into line 1033 and examine `s-bufr`. Notice that it's uninitialized (it probably contains `0xcccccccccccccccc` , which Visual Studio uses in debug builds to poison uninitialized memory, so that using it is likely to produce an exception).\n7. Step the call to `Curl_safefree()` and watch it throw an access violation.\n\nIt appears that `rem` can be == `0` if the DOH server returns no RRDATA . This seems legal under https://www.rfc-editor.org/rfc/rfc1034 s.3.6 (\" A domain name identifies a node.  Each node has a set of resource information, which may be empty\").\n\nI do not have a test brace to verify this hypothesis.\n\n## Impact\n\nPossibly any impact that is rooted in a use-after-free bug.",
  "weakness": {
    "id": 50,
    "name": "Use After Free"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 7,
  "voters": [
    "almuntadhar",
    "zy9ard3",
    "2026",
    "thalaivar304",
    "isecuresites",
    "iossefy",
    "druier"
  ],
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
