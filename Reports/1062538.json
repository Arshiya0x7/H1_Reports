{
  "id": 1062538,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDYyNTM4",
  "url": "https://hackerone.com/reports/1062538",
  "title": "Pinning leaks message content",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2020-12-19T15:38:36.830Z",
  "submitted_at": "2020-12-19T15:38:36.886Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "gronke",
    "url": "/gronke",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 19858,
    "url": "https://hackerone.com/rocket_chat",
    "handle": "rocket_chat",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/019/858/ada6c92a338715afad123af214dd6e22fd8dc6ff_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/019/858/ada6c92a338715afad123af214dd6e22fd8dc6ff_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Rocket.Chat",
      "twitter_handle": "RocketChat",
      "website": "https://rocket.chat",
      "about": "Rocket.Chat is a company built on open source values and a love for efficiency. The company is driven by our amazing community of contributors."
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": true,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2024-08-10T21:53:50.125Z",
  "bug_reporter_agreed_on_going_public_at": "2024-07-11T21:53:31.618Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:** Improper input validation allows pinning of arbitrary messages (in private channels), leaking the message content back to the sender.\n\n**Description:**\n\nMessage pinning was found to lack input data validation, so that arbitrary messages can be pinned and leaked back to an unauthorized client.\n\n```javascript\nMeteor.methods({\n\tpinMessage(message) {\n\t\tif (!Meteor.userId()) {\n\t\t\ttoastr.error(TAPi18n.__('error-not-authorized'));\n\t\t\treturn false;\n\t\t}\n\t\tif (!settings.get('Message_AllowPinning')) {\n\t\t\ttoastr.error(TAPi18n.__('pinning-not-allowed'));\n\t\t\treturn false;\n\t\t}\n\t\tif (Subscriptions.findOne({ rid: message.rid }) == null) {\n\t\t\ttoastr.error(TAPi18n.__('error-pinning-message'));\n\t\t\treturn false;\n\t\t}\n\t\ttoastr.success(TAPi18n.__('Message_has_been_pinned'));\n\t\treturn ChatMessage.update({\n\t\t\t_id: message._id,\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tpinned: true,\n\t\t\t},\n\t\t});\n\t},\n\t// ...\n});\n```\n\nThe Meteor.method `pinMessage` accepts a message object as input with `_id` and `rid` keys.\n\nWith a known Message ID and any Room ID that is accessible by the attacker, the check room subscriptions can be circumvented, because the target chat message is not validated to be in the same room as validated with `Subscriptions.findOne({ rid: message.rid }`.\n\nIn addition to that the `pinMessage` function accepts JavaScript objects that are then directly forwarded to the MongoDB model, allowing attackers to use regular expressions to improve guessing of message IDs.\n\n```javascript\nMeteor.call(\"pinMessage\", {\n  _id: { $regex: /.*/ },\n  rid: \"<ACCESSIBLE_ROOM_ID>\" \n}, (...args) => console.log(...args));\n```\n\nThe Meteor.call return data contains the message content, so that an arbitrary user with access to any channel can leak individual messages outside of their accessible channels.\n\n## Releases Affected:\n\n  * 3.9.10 / develop\n\n## Steps To Reproduce (from initial installation to vulnerability):\n\n(Add details for how we can reproduce the issue)\n\n  1. Open Rocket.Chat\n  2. Find any accessible Room ID (for instance from channel avatar URL)\n  3. Open Web Inspector\n  4. Execute pinMessage Meteor.call and receive message content in return callback\n\n## Suggested mitigation\n\n  * Check message object data types\n  * Query the target `rid` along with the updated message `_id`.\n\n```diff\ndiff --git a/app/message-pin/client/pinMessage.js b/app/message-pin/client/pinMessage.js\nindex 9fbc2f778..c360c5d9c 100644\n--- a/app/message-pin/client/pinMessage.js\n+++ b/app/message-pin/client/pinMessage.js\n@@ -1,4 +1,5 @@\n import { Meteor } from 'meteor/meteor';\n+import { check } from 'meteor/check';\n import toastr from 'toastr';\n import { TAPi18n } from 'meteor/rocketchat:tap-i18n';\n \n@@ -7,6 +8,8 @@ import { ChatMessage, Subscriptions } from '../../models';\n \n Meteor.methods({\n        pinMessage(message) {\n+               check(message._id, String);\n+               check(message.rid, String);\n                if (!Meteor.userId()) {\n                        toastr.error(TAPi18n.__('error-not-authorized'));\n                        return false;\n@@ -22,6 +25,7 @@ Meteor.methods({\n                toastr.success(TAPi18n.__('Message_has_been_pinned'));\n                return ChatMessage.update({\n                        _id: message._id,\n+                       rid: message.rid\n                }, {\n                        $set: {\n                                pinned: true,\n@@ -29,6 +33,8 @@ Meteor.methods({\n                });\n        },\n        unpinMessage(message) {\n+               check(message._id, String);\n+               check(message.rid, String);\n                if (!Meteor.userId()) {\n                        toastr.error(TAPi18n.__('error-not-authorized'));\n                        return false;\n@@ -44,6 +50,7 @@ Meteor.methods({\n                toastr.success(TAPi18n.__('Message_has_been_unpinned'));\n                return ChatMessage.update({\n                        _id: message._id,\n+                       rid: message.rid\n                }, {\n                        $set: {\n                                pinned: false,\n```\n\n## Impact\n\nContent of arbitrary (private) messages can be leaked by any client with access to at least one room.",
  "weakness": {
    "id": 18,
    "name": "Information Disclosure"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2024-08-10T21:53:31.750Z",
  "allow_singular_disclosure_after": -35065886.57914381,
  "singular_disclosure_allowed": true,
  "vote_count": 8,
  "voters": [
    "zy9ard3",
    "spaghettisec",
    "gitsjsons",
    "tronster",
    "ludas",
    "amr4l44",
    "pr4v1n",
    "pal_sec"
  ],
  "severity": {
    "rating": "high",
    "score": 8.5,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "low",
      "availability": "none"
    }
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
