{
  "id": 2853410,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yODUzNDEw",
  "url": "https://hackerone.com/reports/2853410",
  "title": "XSS found in https://www.████████.mil",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2024-11-20T08:01:52.582Z",
  "submitted_at": "2024-11-20T08:01:52.709Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "thpless",
    "url": "/thpless",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/7a340dy8tao8fyfeo4pmmxggzoe6/8774a5031fc14b74dc4404da039040c69df8ed41021007c0c2beb9de489fcf66"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 16064,
    "url": "https://hackerone.com/deptofdefense",
    "handle": "deptofdefense",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "U.S. Dept Of Defense",
      "twitter_handle": "DC3VDP",
      "website": "https://bit.ly/3ntULtN",
      "about": ""
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2025-01-24T14:44:48.592Z",
  "bug_reporter_agreed_on_going_public_at": "2024-12-19T07:16:30.751Z",
  "team_member_agreed_on_going_public_at": "2025-01-24T14:44:48.451Z",
  "comments_closed?": true,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi Dear DoD Team\n\nI found another reflected cross site script in one of your web apps. \n\nAs a proof of concept you can use the following link.\nhttps://www.███.mil/?code=%27;prompt(%27XSS%27);//\n\nBest\n@thpless\n\n## Impact\n\nReflected XSS allows attackers to inject malicious scripts into a web application, which execute in the user's browser when triggered (e.g., via a malicious link). This can lead to theft of sensitive data like cookies, session tokens, or credentials, and may enable phishing or session hijacking. Additionally, attackers can manipulate the webpage to execute malicious actions, such as keylogging or redirecting users to harmful sites.\n\n## System Host(s)\nwww.██████.mil\n\n## Affected Product(s) and Version(s)\nwebserver\n\n## CVE Numbers\n\n\n## Steps to Reproduce\n### PoC\n\nhttps://www.████████.mil/?code=%27;prompt(%27XSS%27);//\n\n## Suggested Mitigation/Remediation Actions\n*** To prevent the execution of JavaScript code, you would need to sanitize the output (replace the character ' with \\'). ***\n\nIn this case there are three injection points on the site\n\n```html\n<script type=\"text/javascript\">\n\nfunction getUnitOfAssignment() {\n\tvar uoa = '';\n/*\t\n\tif(document.cookie) {\n\t\tvar cookiearray = document.cookie.split(';');\n\t\n\t\t// Now take key value pair out of this array\n\t\tfor(var i=0; i<cookiearray.length; i++) {\n\t\t   name = cookiearray[i].split('=')[0];\n\t\t   value = cookiearray[i].split('=')[1];\n\t\t   if(name == 'uoa') {\n\t\t\t   uoa = value;\n\t\t   }\n\t\t}\n\t}\n*/\t\n\treturn uoa;\n}\n\nfunction processUserLogon(action) {\n\tif(action == 'logon') {\n\t\tvar e = document.getElementById(\"environment\");\n\t\tenv = e.options[e.selectedIndex].value;\n\t\tvar logonIdParam = \"\";\n\t\tvar userTypeParam = \"\";\n\t\tif(document.getElementById(\"logonId\") != null) {\n\t\t\tlogonIdParam = \"&logonId=\" + document.getElementById(\"logonId\").value;\n\t\t}\n\t\tif(document.getElementById(\"userType\") != null) {\n\t\t\tvar userType = document.getElementById(\"userType\");\n\t\t\tuserTypeParam = \"&userType=\" + userType.options[userType.selectedIndex].value;\n\t\t}\n\t\t\n\t\tvar uoa = getUnitOfAssignment();\n\t\t\n\t\twindow.location.href = 'https://' + env + '/webapp/wcs/stores/servlet/ProcessUserSSO?catalogId=10051&langId=-1&storeId=' + 10801\n\t\t\t+ '&sso=true&ssoAction=' + action + '&code=INJECTION_POINT' + logonIdParam + userTypeParam + '&uoa=' + uoa \n\t\t\t+ '&dodaac=' + document.getElementById('dodaac').value + '&json=' + document.getElementById('json').value;\n\t} else {\n\t\twindow.location.href = 'ProcessUserSSO?catalogId=10051&langId=-1&sso=true&ssoAction=' + action + '&code=INJECTION_POINT';\n\t}\n}\n\nfunction getCode() {\n\tvar clientId = \"fedmall\";\n\t\n\n\twindow.location.href = 'https://█████████/portal/oauth2/authorize?response_type=code&client_id=' + clientId + '&redirect_uri=https://www.████████.mil/webapp/wcs/stores/servlet/en/fedmall?sso=true';\t\n}\n</script>\n<br/>\n\n<div class=\"rowContainer\" id=\"container_SSO_UserInfo\">\n\t<div class=\"row margin-true\">\n\t\t<div class=\"col8 acol12 ccol9\">\n\t\t\t<div id=\"UserInfoPageHeading\" tabindex=\"0\">\n\t\t\t\t<h2 class=\"userInfo_header\" style=\"margin-bottom: 10px !important;\">Processing User Sign In...</h2>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<script type=\"text/javascript\">\ndojo.addOnLoad(function() {\n\tra2 = \"false\";\n\tif ((document.referrer.indexOf('-ra2.') !== -1)) {\n\t\tra2 = \"true\";\t\n\t}\n\t\n\tvar clientId = \"fedmall\";\n\t\n\t\n\twindow.location.href = 'ProcessUserSSO?catalogId=10051&langId=-1&app='+clientId+'&ra2='+ra2+'&ssoAction=logon&code=INJECTION_POINT&uoa=' + getUnitOfAssignment();\n});\n</script>\n```\n\n",
  "weakness": {
    "id": 61,
    "name": "Cross-site Scripting (XSS) - Reflected"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 39,
  "voters": [
    "kaenne",
    "loaymorad",
    "almuntadhar",
    "thpless",
    "mikelly",
    "2026",
    "mohaned0101",
    "ahmed_xyz",
    "blackhacker8796",
    "jackhavoltrey",
    "and 29 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
