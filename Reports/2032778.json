{
  "id": 2032778,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMDMyNzc4",
  "url": "https://hackerone.com/reports/2032778",
  "title": "Internal machine learning API endpoint for CWE classification is vulnerable to path traversal",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2023-06-20T22:02:06.142Z",
  "submitted_at": "2023-06-20T22:02:06.309Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "jobert",
    "url": "/jobert",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 13,
    "url": "https://hackerone.com/security",
    "handle": "security",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "HackerOne",
      "twitter_handle": "Hacker0x01",
      "website": "https://hackerone.com",
      "about": "Vulnerability disclosure should be safe, transparent, and rewarding."
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": true,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2023-07-05T15:05:25.578Z",
  "bug_reporter_agreed_on_going_public_at": "2023-07-05T14:58:58.497Z",
  "team_member_agreed_on_going_public_at": "2023-07-05T15:05:25.368Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "HackerOne has an internal machine learning API that exposes inference endpoints for numerous machine learning / artificial intelligence solutions. In one of the endpoints, `/predict/report_weakness_id`, which is used to classify report input, a path traversal vulnerability exists that could lead to remote code execution.\n\n# Proof of concept\nThe `request.version` and `request.trained_at` parameters are both vulnerable to path traversal. To reproduce, run any of the following curl commands inside the local Docker container:\n\n**trained_at**\n```\ncurl -X POST http://localhost:8082/predict/report_weakness_id -H 'content-type: application/json' -d'{\"version\":\"v1\", \"trained_at\": \"2023-01-01T00:00:00Z/../../..\", \"input\": [{\"title\": \"test xss\", \"num_of_top_predictions\": 3}]}'\n```\n\n**version**\n```\ncurl -X POST http://localhost:8082/predict/report_weakness_id -H 'content-type: application/json' -d'{\"version\":\"v1/../../../..\", \"trained_at\": \"2023-01-01T00:00:00Z\", \"input\": [{\"title\": \"test xss\", \"num_of_top_predictions\": 3}]}'\n```\n\nThe vulnerable code is shown below. The `version` and `trained_at` inputs are interpolated directly into the path, as can be seen on line 29. The `AutoTokenizer.from_pretrained` function is then called to load the tokenizer into memory.\n\n```python\n@app.post(\n    \"/predict/report_weakness_id\",\n    summary=\"An endpoint to suggest report's weakness id.\",\n)\nasync def report_weakness_id(request: ReportWeaknessIdModelRequest):\n    \"\"\"\n    To try the endpoint in the Swagger UI, click on **Try it out** and copy-paste the below example in the request body box\n    ```\n    {\n        \"version\":\"v1\",\n        \"trained_at\": \"2023-01-01T00_00_00Z\",\n        \"input\": [\n            {\n                \"title\": \"test xss\",\n                \"num_of_top_predictions\": 3\n            }\n        ]\n    }\n    ```\n    \"\"\"\n    input = request.input[0]\n    title = preprocess_text(input.title)\n\n    top_n = int(\n        input.num_of_top_predictions or 3\n    )  # as a start, it's by default set as 3\n\n    model_dirpath = pathlib.Path(\n        f\"{os.path.dirname(__file__)}/../models/report_weakness_id/{request.version}/{request.trained_at}/\"\n    )\n\n    tokenizer = AutoTokenizer.from_pretrained(model_dirpath, use_fast=True)\n```\n\n## Impact\n\nAn attacker would be able to execute arbitrary python code if they were able to get a joblib file onto the ML API (i.e. as a temporary file).",
  "weakness": {
    "id": 19,
    "name": "Path Traversal"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2023-08-04T14:58:58.724Z",
  "allow_singular_disclosure_after": -67239647.96055055,
  "singular_disclosure_allowed": true,
  "vote_count": 31,
  "voters": [
    "maskopatol",
    "holyfield",
    "zy9ard3",
    "shreyaschavhan",
    "shubham_srt",
    "2026",
    "mohaned0101",
    "dilawer",
    "ug0x01",
    "abdosalah",
    "and 21 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 6.4,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "high",
      "user_interaction": "required",
      "scope": "unchanged",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 3,
    "asset_type": "URL",
    "asset_identifier": "hackerone.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
