{
  "id": 1048322,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDQ4MzIy",
  "url": "https://hackerone.com/reports/1048322",
  "title": "SMAP bypass",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2020-12-01T16:19:11.016Z",
  "submitted_at": "2020-12-01T16:19:11.059Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "m00nbsd",
    "url": "/m00nbsd",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 44879,
    "url": "https://hackerone.com/playstation",
    "handle": "playstation",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/8uyqZE6d69UGEYq8qwzS4Z3Q/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/8uyqZE6d69UGEYq8qwzS4Z3Q/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "PlayStation",
      "twitter_handle": "PlayStation",
      "website": "https://www.playstation.com",
      "about": "Recognized as a global leader in interactive and digital entertainment, Sony Interactive Entertainment (SIE) is responsible for the PlayStation brand."
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "no-content",
  "cve_ids": [
    "CVE-2021-29628"
  ],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2021-05-27T03:35:15.329Z",
  "bug_reporter_agreed_on_going_public_at": "2021-04-11T15:56:06.634Z",
  "team_member_agreed_on_going_public_at": "2021-05-27T03:35:15.208Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 110,
  "voters": [
    "osman1337",
    "n1m0",
    "drsniper",
    "nightm4re",
    "hsalo",
    "h4x0r_dz",
    "f_m",
    "xsstestov",
    "paastha",
    "0nlymohammed",
    "and 100 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 5.9,
    "author_type": "User",
    "metrics": {
      "attack_vector": "local",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "low",
      "integrity": "low",
      "availability": "low"
    }
  },
  "structured_scope": {
    "databaseId": 57105,
    "asset_type": "HARDWARE",
    "asset_identifier": "PlayStation 5",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 56282,
      "category": "team",
      "content": "SMAP is a security feature on x86 CPUs, that forbids ring0 from reading/writing to ring3 pages, making it harder to exploit entire classes of vulnerabilities.\n\nThere is a vulnerability in FreeBSD 12 that allows SMAP to be bypassed by userland. There is a very high probability that it affects the PS5 but I was unable to access a PS5 firmware to confirm it.\n\nThis vuln downgrades the security properties of the OS, and is a building block for exploitation chains.\n\n## Details\n\nWith SMAP enabled, when `%RFLAGS.AC` is cleared the kernel will page-fault if it tries to access a page marked as \"user page\". When `%RFLAGS.AC` is set the kernel can access the user pages as if SMAP was not enabled.\n\nIn the FreeBSD kernel, a few functions exist that temporarily set `%RFLAGS.AC` in order to access user pages: the `copyin()` and `copyout()` functions.\n\nThese functions are used in all syscalls and are the only ways the kernel can copy data from/to userland.\n\nThese functions handle faults gracefully, that is, if userland passes an unmapped address and the kernel tries to copy data from it, the functions will simply return an error without kernel panic.\n\nThere is a bug in the fault handling of these functions. Typically `copyin()` is implemented as follows:\n\n```asm\n.macro\tCOPYIN smap erms\n\t/* ... */\n\tmovq\t$copy_fault,PCB_ONFAULT(%r11)\n\t/* ... */\n\tstac // set %RFLAGS.AC, to allow access to user pages\n\tdo_the_copyin\n\tclac // clear %RFLAGS.AC, to forbid access to user pages\n\t/* ... */\n\ncopy_fault:\n\tmovq\t$0,PCB_ONFAULT(%r11)\n\tmovl\t$EFAULT,%eax\n\tPOP_FRAME_POINTER\n\tret\n```\n\n```c\nvoid\ntrap(struct trapframe *frame)\n{\n\t/* ... */\n\t\t\tif (curpcb->pcb_onfault != NULL) {\n\t\t\t\tframe->tf_rip = (long)curpcb->pcb_onfault;\n\t\t\t\treturn;\n\t\t\t}\n\t/* ... */\n}\n```\n\nThe fault handler `copy_fault` is registered in `pcb_onfault` at the beginning, then `%RFLAGS.AC` is set, the copy is made, and `%RFLAGS.AC` is cleared back.\n\nIf the copy faults for whatever reason, an exception is raised, the `trap()` handler sees that `pcb_onfault` has a pointer registered, and simply `IRET`s back to the pointer that was registered.\n\nThe problem is, the fault handler `copy_fault` does not clear `%RFLAGS.AC`, meaning that it remains set after `copyin()`/`copyout()` returns. The rest of the syscall will therefore execute with SMAP effectively disabled, until the kernel returns to userland where the SMAP state gets reset back to normal.\n\nThis SMAP disablement survives context switches, so a user that disables SMAP during one of his syscalls can also disable SMAP in other user/kernel threads if a rescheduling happens after/during the syscall (taking a mutex for example).\n\n## Fix\n\nAdd a `clac` instruction in `copy_fault` to clear `%RFLAGS.AC`:\n\n```diff\n copy_fault:\n+\tclac\n \tmovq\t$0,PCB_ONFAULT(%r11)\n \tmovl\t$EFAULT,%eax\n \tPOP_FRAME_POINTER\n \tret\n```\n\n## Impact\n\nUserland can open lage windows where the kernel executes with SMAP disabled.\n\nLack of SMAP makes exploitation of common vulnerabilities easy/trivial.\n",
      "updated_at": "2021-05-27T03:35:01.988Z",
      "can_view?": true,
      "can_create?": false,
      "attachments": [],
      "user": {
        "id": 319901,
        "username": "serv",
        "name": "s",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2018-07-30T18:21:23.048Z",
        "url": "https://hackerone.com/serv",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/obdkgpjb63bss7ni534fyptzklcx/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/obdkgpjb63bss7ni534fyptzklcx/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c",
          "xtralarge": "https://hackerone.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsiZGF0YSI6MjAwMjM4NCwicHVyIjoiYmxvYl9pZCJ9fQ==--d2b8dc30ceb7e60f5c7cc2b843535b60cc1bef3e/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJwbmciLCJyZXNpemUiOiIyNjB4MjYwXHUwMDNlIn0sInB1ciI6InZhcmlhdGlvbiJ9fQ==--c155082ce6f9751dcb29cd6ea061a7e4d7329577/Screen%20Shot%202022-06-02%20at%2010.19.28%20PM.png"
        }
      }
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
