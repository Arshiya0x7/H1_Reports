{
  "id": 1372216,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMzcyMjE2",
  "url": "https://hackerone.com/reports/1372216",
  "title": "IDOR in \"external status check\" API leaks data about any status check on the instance",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2021-10-16T20:22:06.101Z",
  "submitted_at": "2021-10-16T20:22:06.303Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "joaxcar",
    "url": "/joaxcar",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/9865qc9er7t2lratx5rgszbf3257/c8a1698ff707a5e3e8a91a3484838363845daac68cb82c86d55c9e2d44d67b67?response-content-disposition=inline%3B%20filename%3D%224FB38693-148C-4D50-BBCD-D726D3AE2B4F.jpeg%22%3B%20filename%2A%3DUTF-8%27%274FB38693-148C-4D50-BBCD-D726D3AE2B4F.jpeg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYTQGV5GZ%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T002202Z&X-Amz-Expires=783&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHoaCXVzLXdlc3QtMiJHMEUCIQCwhbkIxveZhOodpF28kRDeSDSp7T4u0QK6qKiMsYgYEAIgFr2Er4x9BdPmePuEEnJ5%2F1Z%2FsNeE7caNJn3gt%2B5oeC8qugUI8%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDGfZU4nXJ%2FjIkTUqtCqOBR5SpTy2Ed5z%2FTTcmsioC%2FY2rr2eMAFnoXEzJb9ViTG12PeoN8nhQmWCENUB9o3pxoAOhinaXjzfLkz0h%2ByuYNJdSIgBuerrJqMpE5xI9C2yiynVCclpd67yafef2uTvlodj3twP%2F1dVqwBVhr57yreQltd0DHD5QeGeRcV5CuCcuW12fCeUeH%2Fl3lqnE83WhNqo94nX1OoIFLjVgOQOlR8KG5cwmzU0D0q5KaKASXmE4VwMe52ssI6VsiODNg1%2F6yRro5xr1MczuqXGoOKe36N%2BvXhortdrmw1KmtRfS%2FvlGTXwgCtSvwv7GsC8c2PDNcXtm%2F%2Flbl4ag9tsNP2%2BAH9UN6aMx%2BTIk2whw%2FQekzmnV1U5rZe8Tlb76mBBypa1rHmWVCtXFXbtpgIUiZ5v3OYS4J6XcUnf4iNabXkPzx2jncKK6W%2FSTaMaBntHWYdIg44dAxtQ59xfgAzul46%2BdMFzB%2BsP5LNeAdQgIA15obtVS6XDnQY1Dm3ndhwt7PuGWVnHEtaV45R%2F4slMTgXSjNYYg0iEiVWN1F1P5yVHezV3KGequURouwOVGv9CYvSFaoM1r3mHVmnXE9PWuACoeXGHg5Mds7D8oLWZeNyxY%2BT49sNV6WORFKs8stnTgIlseRXnWcBSHNMfq7bY1lyB70sk7Ke6gc3W65y11VW1grDXvRmv5PlIJ3%2Fo6eItpE1%2BnMvq6oiqEWU6rvk3jYQN9F62AfHhQKzIqSJMmTRjei%2FmnxMQh3TJE4HI4U%2FCmXwHDFEYS8DEFM%2BSEJjN3F1ty8N3VD1zngeApKjGKd6znomPiATuMYxZBNbeEPGMkLU2eu4sR%2FgPwoXZgjZi%2BR5jH5AV0dq3WnLjNmL66YzQ%2FjDi2bvGBjqxAU%2Bn5zezATvkSNlA%2FRUoYoBKV%2FI2pruQggAivYHJg01BCZOBn4zWyxtaQD4CEt9vazegPTcK9H%2BN2HcnmQz%2FnDvaYxB1YCrcYM%2BvCic6rxNJulpkGsdMi46do3pTNKFZyRc3%2Be5JT3iFm5GQ7EBxtnY4FTF2%2FkulJwodURjvqhFv4YwjGcG3q87cTyf2SvQyKirv3lBNoITYdFdV%2BSaKOQDHH8DgLZ6%2B%2Fiao1jZFKa%2Fpiw%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=dcff16574de33ec6a6fb51189f98520165eda57088883b83ec0db5aff882c01c"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 264,
    "url": "https://hackerone.com/gitlab",
    "handle": "gitlab",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "GitLab",
      "twitter_handle": "gitlab",
      "website": "https://about.gitlab.com",
      "about": "A single application for the entire software development lifecycle."
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2022-02-22T19:48:17.868Z",
  "bug_reporter_agreed_on_going_public_at": "2022-01-27T08:10:04.313Z",
  "team_member_agreed_on_going_public_at": "2022-02-22T19:48:17.629Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "### Summary\n\nThe API endpoint for returning approval from an `external status check` contains an IDOR that lets a user list information about all `external status checks` on the GitLab instance. The feature is an `Ultimate` feature, but can be accessed by starting an `Ultimate` trial on GitLab.com. So the attack is possible with a regular account.\n\nWhen an `external status check` is configured, the project will send out information about MRs to a specified endpoint. This endpoint can then be configured to answer to the request to \"pass\" the status check. Description of the feature [here](https://docs.gitlab.com/ee/user/project/merge_requests/status_checks.html). The API endpoint for this answer is ([info](https://docs.gitlab.com/ee/api/status_checks.html#set-status-of-an-external-status-check))\n```\nPOST /projects/:id/merge_requests/:merge_request_iid/status_check_responses\n```\nwith the passed in parameters `sha` and `external_status_check_id`. It is the later one that contains the IDOR. This parameter tells GitLab which `external status check` the request is targeting. And the answer back from GitLab is JSON containing info about the MR but also info about the status check configuration. By altering the ID sent, a user can obtain info about any status check on the instance (even from Private projects).\n\nLeaked information about a status check could look like the example below and could contain:\n\n* Private project name and ID\n* Name of status check\n* Private address to external status check tool\n* Name and ID of protected branch connected to the status check\n* Access rules to protected branch, if configured also name of user that is allowed to access\n\n```\n\"external_status_check\": {\n    \"id\": 10,\n    \"name\": \"Name of status check\",\n    \"project_id\": 33,\n    \"external_url\": \"https://victim.service.com\",\n    \"protected_branches\": [\n      {\n        \"id\": 24,\n        \"name\": \"Name of protected branch\",\n        \"push_access_levels\": [\n          {\n            \"access_level\": 40,\n            \"access_level_description\": \"Name of user with access to protected branch\",\n            \"user_id\": 2,\n            \"group_id\": null\n          },\n          {\n            \"access_level\": 30,\n            \"access_level_description\": \"Developers + Maintainers\",\n            \"user_id\": null,\n            \"group_id\": null\n          }\n        ],\n        \"merge_access_levels\": [\n          {\n            \"access_level\": 30,\n            \"access_level_description\": \"Developers + Maintainers\",\n            \"user_id\": null,\n            \"group_id\": null\n          },\n          {\n            \"access_level\": 40,\n            \"access_level_description\": \"Name of user with access\",\n            \"user_id\": 2,\n            \"group_id\": null\n          }\n        ],\n        \"allow_force_push\": true,\n        \"unprotect_access_levels\": [],\n        \"code_owner_approval_required\": true\n      }\n```\n\n### Steps to reproduce\n\n1. Create two users `victim01` and `attacker01`\n2. Log in as `victim01` and create a new PRIVATE project called `victim_project` at https://gitlab.domain.com/projects/new#blank_project\n3. Go to go to project settings https://gitlab.domain.com/victim01/victim_project/edit and expand \"Merge request\" under \"General\". Scroll down to \"Status checks\" and click create new.\n4. Name the status check \"Victim status check\" and enter a API endpoint \"https://victim.hidden.com\"\n5. Click save\n6. Log out and log back in as `attacker01`\n7. Go through step 2 to 5 again but name the project `attacker_project` and the status check anything. Take a note of the ID of the project. We will call it `attackID`\n8. Now create a new branch in `attacker_project` at https://gitlab.domain.com/attacker01/attacker_project/-/branches/new\n9. Click \"Create new merge request\" when the branch is created. Name the MR anything and click create\n10. Go to https://gitlab.domain.com/-/profile/personal_access_tokens and create an access token for `attacker01`, we will call it `TOKEN`\n11. Open a terminal and make this request (the SHA is just \"a\" here, we will get the correct one as a response)\n```\ncurl --request POST \\\n  --url 'https://gitlab.domain.com/api/v4/projects/<ATTACKID>/merge_requests/1/status_check_responses?sha=a&external_status_check_id=2' \\\n  --header 'Authorization: Bearer <TOKEN>'\n```\n12. This iniitial request will return an error saying `the correct sha is <SHA>`\n13. Now send with correct SHA\n```\ncurl --request POST \\\n  --url 'https://gitlab.domain.com/api/v4/projects/<ATTACKID>/merge_requests/1/status_check_responses?sha=<SHA>&external_status_check_id=2' \\\n  --header 'Authorization: Bearer <TOKEN>'\n```\n14. We will get a response with info about the MR and in the end info about the `status check`\n15. Now send the same request again but change status check id to 1\n```\ncurl --request POST \\\n  --url 'https://gitlab.domain.com/api/v4/projects/<ATTACKID>/merge_requests/1/status_check_responses?sha=<SHA>&external_status_check_id=1' \\\n  --header 'Authorization: Bearer <TOKEN>'\n```\n16. The same MR info is returned, but in the end there will be info about the private status check from `victim_project`\n\n\n### Impact\n\nAn attacker can leak information about any `external status check` on the instance. This data contains sensitive private information.\n\n### What is the current *bug* behavior?\n\nThe parameter `external_status_check_id` is not restricted to the status checks configured in the project.\n\n### What is the expected *correct* behavior?\n\nThe parameter should only allow IDs that corresponds to status checks in the target project.\n\n### Output of checks\n\nThis bug happens on GitLab.com\n\n## Impact\n\nLeaked information about a status check could look like the example below and could contain:\n\n* Private project name and ID\n* Name of status check\n* Private address to external status check tool\n* Name and ID of protected branch connected to the status check\n* Access rules to protected branch, if configured also name of user that is allowed to access",
  "bounty_amount": "610.0",
  "formatted_bounty": "$610",
  "weakness": {
    "id": 55,
    "name": "Insecure Direct Object Reference (IDOR)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 30,
  "voters": [
    "g3ksec",
    "alp",
    "ali_shehab",
    "shreyaschavhan",
    "yassinek3ch",
    "run_win",
    "at0mq1",
    "akashhamal0x01",
    "mohaned0101",
    "f_m",
    "and 20 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 4.3,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "low",
      "integrity": "none",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 18138,
    "asset_type": "URL",
    "asset_identifier": "gitlab.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
