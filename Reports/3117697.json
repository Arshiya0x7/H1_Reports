{
  "id": 3117697,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMTE3Njk3",
  "url": "https://hackerone.com/reports/3117697",
  "title": "Double Free Vulnerability in `libcurl` Cookie Management (`cookie.c`)",
  "state": "Closed",
  "substate": "not-applicable",
  "readable_substate": "N/A",
  "created_at": "2025-04-29T10:50:02.405Z",
  "submitted_at": "2025-04-29T10:50:02.737Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": true,
    "username": "tannicarcher",
    "url": "/tannicarcher",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/36bca6668139d77be42208d896968344ae7a76c55ee0f8b0f28281ccd492ff02",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/19c85a12ac35f466af1ea2b0ae853bfe5e8f057fb1d6fb62db131707bb67b30d"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool doing internet transfers"
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2025-04-29T21:16:18.948Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2025-04-29T21:15:43.317Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Description:\nTwo **Double Free** vulnerabilities have been identified in the `cookie.c` file of the `libcurl` library. These issues occur due to improper memory management, where the same memory area is freed multiple times under certain conditions. Below are clear steps to reproduce each vulnerability.\n\n---\n\n### Summary:\nThe vulnerabilities occur in the following scenarios:\n1. **`replace_existing` Function**: A cookie object is freed without ensuring it has not already been removed from the list, leading to double-free.\n2. **`Curl_cookie_add` Function**: On errors, memory allocated for a cookie object is freed again, even if it was previously released.\n\n## Steps To Reproduce:\n\n### Case 1: Vulnerability in `replace_existing` Function\n1. Create multiple cookies with identical names, domains, and paths.\n2. Trigger a scenario where an existing cookie needs to be replaced (e.g., by adding a new cookie with the same attributes).\n3. Observe the program crash or unexpected behavior due to double-free in the following code:\n   ```c\n   if (replace_n) {\n       struct Cookie *repl = Curl_node_elem(replace_n);\n       Curl_node_remove(replace_n); // Remove from the list\n       freecookie(repl);            // Free memory (double-free if already removed)\n   }\n   ```\n\n### Case 2: Vulnerability in `Curl_cookie_add` Function\n1. Add a malformed or invalid cookie header line to the cookie input file.\n2. Ensure the program encounters an error during cookie parsing.\n3. Observe the program crash or unexpected behavior due to double-free in the following code:\n   ```c\n   fail:\n       freecookie(co); // Memory freed again even if already released\n       return NULL;\n   ```\n\n---\n\n## Impact\n\n### Summary\nThe **Double Free** vulnerabilities in `libcurl` can have severe security implications:\n1. **Program Crash**: A double-free leads to undefined behavior, often resulting in segmentation faults.\n2. **Arbitrary Code Execution**: Attackers could exploit this issue to execute arbitrary code in the context of the vulnerable program.\n3. **Data Integrity**: Memory corruption caused by this vulnerability can lead to data leakage or integrity issues, compromising the application's reliability.\n4. **Denial of Service (DoS)**: Exploiting this vulnerability could result in a denial-of-service condition.\n\nThese vulnerabilities can be exploited by attackers to compromise the security and stability of any applications or systems using `libcurl`.\n\n---",
  "weakness": {
    "id": 49,
    "name": "Double Free"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 27,
  "voters": [
    "iismailu",
    "2026",
    "spaghettisec",
    "mohaned0101",
    "mr-alienx-kurd",
    "kdfjd",
    "innosencezero",
    "jjjjunge",
    "labupump",
    "bkinfosec",
    "and 17 more..."
  ],
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
