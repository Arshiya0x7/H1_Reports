{
  "id": 2559558,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yNTU5NTU4",
  "url": "https://hackerone.com/reports/2559558",
  "title": "NULL dereference when encoding DN of x509 certificate",
  "state": "Closed",
  "substate": "informative",
  "severity_rating": "low",
  "readable_substate": "Informative",
  "created_at": "2024-06-19T00:38:03.385Z",
  "submitted_at": "2024-06-19T00:38:04.026Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "z2_",
    "url": "/z2_",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/5eld4c9eg34za1r92ipvd757pa9d/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool doing internet transfers"
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2024-06-19T12:03:07.768Z",
  "bug_reporter_agreed_on_going_public_at": "2024-06-19T11:49:49.476Z",
  "team_member_agreed_on_going_public_at": "2024-06-19T12:03:07.495Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "libcurl at commit [04739054cdac5a0614fb94e3655e313c03399f35](https://github.com/curl/curl/tree/04739054cdac5a0614fb94e3655e313c03399f35) contains a NULL-dereference in function `encodeDN()` when parsing the certificate of a server during the TLS connect-phase.\n\nThe vulnerable code is in [lib/vtls/x509asn1.c:701](https://github.com/curl/curl/blob/04739054cdac5a0614fb94e3655e313c03399f35/lib/vtls/x509asn1.c#L701):\n```c\nstatic CURLcode encodeDN(struct dynbuf *store, struct Curl_asn1Element *dn)\n{\n    struct dynbuf temp;\n    Curl_dyn_init(&temp, MAX_X509_STR);\n    \n    for(p1 = dn->beg; p1 < dn->end;) {\n        for(p2 = rdn.beg; p2 < rdn.end;) {\n            // --- snip ---\n            \n            Curl_dyn_reset(&temp);\n            result = ASN1tostr(&temp, &oid, 0);\n            if(result)\n                goto error;\n\n            str = Curl_dyn_ptr(&temp);\n\n            /* Encode delimiter.\n                If attribute has a short uppercase name, delimiter is \", \". */\n            for(p3 = str; ISUPPER(*p3); p3++)\n                ;\n        }\n    }\n}\n```\n\nWhen the `oid` that `ASN1tostr` tries to convert to a string is an element that is constructed such that `oid.constructed` is 1\n`ASN1tostr` returns without touching the dynbuf `temp`. The following `Curl_dyn_ptr()` returns NULL and `ISUPPER(*p3)` causes\nthe application to crash.\n\n# Exploit scenario\nThe following exploit scenario demonstrates how to terminate an application using libcurl with the NULL dereference from above:\n\n1. Setup a malicious server with a TLS certificate that triggers the crash\n2. When a client connects over TLS, send the invalid certificate. This causes the client to terminate and no longer serve its purpose\n\n## Impact\n\nThe null dereference causes a DOS on applications using libcurl to do TLS-encrypted connections.\nIt requires no special setup to trigger the crash, since it is triggered during the connect-phase of the\nconnection. Thus I chose severity \"Low\".",
  "weakness": {
    "id": 51,
    "name": "NULL Pointer Dereference"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 26,
  "voters": [
    "ertzeus",
    "z2_",
    "zy9ard3",
    "cyberritzzz",
    "kabeza",
    "crynomor3",
    "johnbrixton",
    "file_null0",
    "pr4v1n",
    "hpahblackcat6",
    "and 16 more..."
  ],
  "severity": {
    "rating": "low",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
