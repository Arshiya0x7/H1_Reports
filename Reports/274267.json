{
  "id": 274267,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yNzQyNjc=",
  "url": "https://hackerone.com/reports/274267",
  "title": "Request Hijacking Vulnerability in RubyGems 2.6.13 and earlier",
  "state": "Closed",
  "substate": "informative",
  "severity_rating": "low",
  "readable_substate": "Informative",
  "created_at": "2017-10-04T04:06:15.449Z",
  "submitted_at": "2017-10-04T04:06:15.449Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "claudijd",
    "url": "/claudijd",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/003/131/3c373767fbd4f34648ab754b0f692fb718bfb8e5_original.jpeg/c8a1698ff707a5e3e8a91a3484838363845daac68cb82c86d55c9e2d44d67b67"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 8212,
    "url": "https://hackerone.com/rubygems",
    "handle": "rubygems",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/008/212/e65eca09896d23bc029c08d3147a79a48ec1ee2f_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/008/212/e65eca09896d23bc029c08d3147a79a48ec1ee2f_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "RubyGems",
      "twitter_handle": "rubygems_status",
      "website": "https://rubygems.org",
      "about": "RubyGems.org is the Ruby communityâ€™s gem hosting service."
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": true,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2017-0902"
  ],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2018-12-08T20:06:30.799Z",
  "bug_reporter_agreed_on_going_public_at": "2018-03-16T03:15:38.782Z",
  "team_member_agreed_on_going_public_at": "2018-12-08T20:06:30.738Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "We received this report via security@ from david@bamsoftware.com, I'm filing here for tracking and visibility purposes...\n\n\"I was looking at commit 8d91516fb7037ecfb27622f605dc40245e0f8d32, which\nwas the fix for the DNS hijacking issue CVE-2017-0902. The function\nstill handles the DNS response in a potentially unsafe way. I did not\nfind any actual vulnerabilities in the current code; the code that uses\nthe result of api_endpoint (perhaps coincidentally) discards the\npotentially malicious components of the URI that api_endpoint returns.\nBut future code may be vulnerable. I'm sending this to the security list\nbecause my checks for vulnerability may be incomplete.\n\nThe problem is that api_endpoint allows the DNS SRV response to contain\nURI-like syntax (which was the cause of CVE-2017-0902). The fix was to\nparse the syntax as if it were a URI, extract the host component, and\nonly do a comparison using the host component, rather than the entire\nstring. However, the entire string is still pasted into the return\nvalue, assuming the comparison succeeds. It can contain URI syntax\ncharacters like '?' and '#' that change the interpretation of what\nfollows them.\n\nI'm attaching a patch that adds a new test and changes api_endpoint to\ndiscard everything but the host after parsing the DNS SRV response as a\nURI. It would probably be even better simply to disallow any syntax\nother than hostname literals.\n\nThe lines that I initially thought was vulnerable, but appear not to be,\nare in lib/rubygems/source.rb:\n   bundler_api_uri = api_uri + './api/v1/dependencies'\n   uri = api_uri + \"#{Gem::MARSHAL_SPEC_DIR}#{spec_file_name}\"\n   spec_path  = api_uri + \"#{file_name}.gz\"\nThe reason they are not vulnerable is that api_url is a URI object\nrather than a string, so the + operator is actually the merge method\nrather than string concatenation. The merge operator replaces any\nexisting path, query, and fragment components, it seems. (It would not\nhelp if the attacker-provided string changed the URI's host, pass, or\nport components, but I could not think of a realistic path to\nexploitation using only those components.) However if api_uri had been\ncoerced into a string, then the code would be vulnerable. An attacker\ncould cause the client to download some other path, which could possibly\nlead to a downgrade attack or replacing one gem with another.\n<0001-Have-api_endpoint-replace-only-host-not-port-user-pa.patch>\"",
  "weakness": {
    "id": 58,
    "name": "Command Injection - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 226270,
      "file_name": "0001-Have-api_endpoint-replace-only-host-not-port-user-pa.patch",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/226/270/1eda5d0b371c77a0c61d045b4c49fda826243456/0001-Have-api_endpoint-replace-only-host-not-port-user-pa.patch?response-content-disposition=attachment%3B%20filename%3D%220001-Have-api_endpoint-replace-only-host-not-port-user-pa.patch%22%3B%20filename%2A%3DUTF-8%27%270001-Have-api_endpoint-replace-only-host-not-port-user-pa.patch&response-content-type=text%2Fx-diff&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ4LUFMMG6%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T163220Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEI%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD5S7RdQ0JaAG6TOVw7ixTcdoYaKj46g6E%2FQFvWKZQBpwIhAJNFgukwqCDwa%2FANOYUECblOYXM7fa3JP%2F1YAXo4vYRnKrIFCBcQAxoMMDEzNjE5Mjc0ODQ5IgyjFyfkOUs4GxQJBCcqjwWw9fteC%2BcadeZ2fIPJpzNDacjGaaBXzTHe1317TAjkhJDXndFpREdsxY26rjoW3pfiXteVDwqk6DXfGH5gMskeUFNyHqe4VJ4KyIAbD1JKKn9qo0bjE2kjgi69P4USNlLYWKlFDVlX3eEtLsbunxGGc80q5senFEMr0pkPX9mRsdnmCm%2BqJJ4mAymGgG3xrK2ybieUMs24dsD77E6aMVfG8fCWmcnAszMJZcg5Py%2FTobIB6umAFE1NTdVpcFJT3cvswzTX3nacaxVkTnivBn0APCRq35ZdxtGo5yukTsJ3ShVoWsmopBCgABZvKbgjry5l571FzTbyFMk90RqPNcUkIwfPW6qCh3p5kSG1p%2BgyBGbwUjXbBVEAxDxkZbY4VnOQhan1eran0IahWmHxefbF5OJWCaeHEZNLSnthXK%2Bz1A5oVaA4Rnbp3PLflo9O6%2BQN%2FjiTxtFJOZ9Lk051%2FrAQywihLA9ehSE%2Blu%2FD7Cmz0Tp%2FF%2BseNde935IGddHjKgPNzHZxiUfiKVoNpm4iq8paiXdqxFthlBpPtv0mSbBvvT7iwzlB38dQ5zgjx8HL9%2FNiOa7TOrCIe9widiZly4ZZPVc8oCH6Z2Xib%2FySoPhKYSGdMDlUDNMI2DhZ%2Bb4JwySC%2Boc3TsQd4UzoVY0ypIH1jJE9wPPPZrw%2FF%2BLbrz3sBCYRKhAkwjKC0eUSYFcXZUDD2yPBk9FDnc7l%2FMIHmFfdreE63XDzPm0LW6Y%2FDMUfDBVl6ZOolCWRcrKDX1hhoYc%2FCOPgZtBtJtIqCAHU4rAzulOPKhCHoYpAy5vapWC9Imv7imlpRG95hkZCevNsXqQNWxPBWzgfjVqoU8xWZyxkWiBZpC39bhHO0v4YD0ODMNySwMYGOrABocCM2Zc9e6PPv5SfEo2QNwT1FlXuwVUNsNVSrvgP2jV60AACGtf4Z4%2B699QA8N7Zu%2FJ8Z41ih%2FpfiuvX7iHcjOuvuHgneQhdf%2BiTx7WHKgaBqtU9JNLlC6CKFIYJ9vPUR%2Fq8QxMjnTdKBDj0tA0qb8iZ8Bk9miswxVUKUu9ynYi7SYeIptMluAYvUkcU0mOaDmuiC7NsMbpMjA6rutjZhj5xoYCdKAgcwbsyGYRfMZg%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=da529f55272c935f2ec4704eb3a6466801cabbf514f224b7568c10b01a1dac11",
      "file_size": 4067,
      "type": "text/x-diff",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": null,
  "vote_count": 5,
  "voters": [
    "ali",
    "sameerphad72",
    "dhakal_ananda",
    "sonalkr132",
    "s3rgio1993"
  ],
  "severity": {
    "rating": "low",
    "author_type": "User"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
