{
  "id": 733017,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83MzMwMTc=",
  "url": "https://hackerone.com/reports/733017",
  "title": "CORS Misconfiguration Leads to Exposing User Data",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2019-11-09T08:40:47.807Z",
  "submitted_at": "2019-11-09T08:40:47.807Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "waymobetta",
    "url": "/waymobetta",
    "profile_picture_urls": {
      "small": "https://hackerone.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsiZGF0YSI6Mjc2NzYwNiwicHVyIjoiYmxvYl9pZCJ9fQ==--ab5b42d6d4ba293dbebcd6117fda197c26dabc2c/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJKUEciLCJncmF2aXR5IjoiQ2VudGVyIiwicmVzaXplIjoiNjJ4NjJeIiwiY3JvcCI6IjYyeDYyKzArMCJ9LCJwdXIiOiJ2YXJpYXRpb24ifX0=--ad1ba64cb7edbf25c0a7cdc70ade7841b15d46cd/IMG_6505%20extra%20smol.JPG"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 16064,
    "url": "https://hackerone.com/deptofdefense",
    "handle": "deptofdefense",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "U.S. Dept Of Defense",
      "twitter_handle": "DC3VDP",
      "website": "https://bit.ly/3ntULtN",
      "about": ""
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2020-05-14T17:15:14.213Z",
  "bug_reporter_agreed_on_going_public_at": "2020-02-03T17:36:46.634Z",
  "team_member_agreed_on_going_public_at": "2020-05-14T17:15:14.091Z",
  "comments_closed?": true,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Vulnerable Asset:** https://██████/█████████/\n\n**Discovery:**\n- Upon accessing the site we discover two specific response headers which indicates that a cross-domain request for sensitive information might be possible\n 1. Access-Control-Allow-Origin: *injectable*\n 2. Access-Control-Allow-Credentials: true\n- We craft a POC below and exploit the misconfigurations present by exposing the users API key, email, first name, last name, etc.\n\n███\n\n**POC:**\n* This is hosted on http://█████████\n\n```html\n<html>\n<script>\n  var xhttp = new XMLHttpRequest();\n  <!-- the below endpoint lists API tokens previously generated by the user -->\n  xhttp.open(\"GET\", \"https://█████/████/api/token/list\", true);\n  xhttp.withCredentials = true;\n  xhttp.send(null);\n</script>\n</html>\n```\n\n**Demo:**\n\n███████\n\n**Remediations:**\n- Do not allow the Access-Control-Allow-Origin to be arbitrarily set by the user; the domain should be whitelisted that is allowed access to CORS, or the wildcard operator `*` should be used instead, which will disallow the Allow-Credentials header\n\n## Impact\n\nThis attack works similarly to a CSRF attack in that an attacker would need to have a victim visit the attacker's website in order to trigger the exploit. If the victim is logged in, then the result is full access to API keys which serve in lieu of username/password as shown in the demo. The attacker then can perform any action within the user's account that the API allows.",
  "weakness": {
    "id": 26,
    "name": "Improper Access Control - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 4,
  "voters": [
    "loaymorad",
    "styrene",
    "destinedtohack",
    "modrnproph3t"
  ],
  "severity": {
    "rating": "high",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
