{
  "id": 1269242,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMjY5MjQy",
  "url": "https://hackerone.com/reports/1269242",
  "title": "CVE-2021-22945: UAF and double-free in MQTT sending",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2021-07-19T18:20:56.555Z",
  "submitted_at": "2021-07-19T18:20:56.643Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "z2_",
    "url": "/z2_",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/5eld4c9eg34za1r92ipvd757pa9d/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool doing internet transfers"
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2021-22945"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2021-09-15T14:24:16.296Z",
  "bug_reporter_agreed_on_going_public_at": "2021-09-15T14:24:16.231Z",
  "team_member_agreed_on_going_public_at": "2021-09-15T07:25:48.258Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "# Vulnerability Description\nlibcurl version 7.77.0 has a [Use-After-Free](https://github.com/curl/curl/blob/curl-7_77_0/lib/mqtt.c#L559) and a [Double-Free](https://github.com/curl/curl/blob/curl-7_77_0/lib/mqtt.c#L560) in `lib/mqtt.c` in the function `mqtt_doing` on [lines 556 - 563](https://github.com/curl/curl/blob/curl-7_77_0/lib/mqtt.c#L556):\n```c\nif(mq->nsend) {\n  /* send the remainder of an outgoing packet */\n  char *ptr = mq->sendleftovers;\n  result = mqtt_send(data, mq->sendleftovers, mq->nsend);\n  free(ptr);\n  if(result)\n    return result;\n}\n```\nAs can be seen in the code above `mq->sendleftovers` gets freed in line 560 but not set to `NULL`. If `mqtt_doing` gets called repeatedly and the values of `mq->nsend` and `mq->sendleftovers` don't change this can result in\n1. Sending the metadata of the freed chunk over the network via `mqtt_send`\n2. Freeing `mq->sendleftovers` multiple times\n\n`mq->nsend` and `mq->sendleftovers` get set in the function `mqtt_send` if `Curl_write` cannot send all bytes in the write-buffer at once. This can e.g. happen if `write()` returns `EAGAIN` or `EWOULDBLOCK`. Then `Curl_write` sets the number of written bytes to `0` and returns `CURLE_OK`.     \nThis can trigger the vulnerabilities as follows:\n1. Supply an `mqtt://` URL to curl\n2. Have some successfull transmissions with `mqtt_send`\n3. At some point have an unsuccessfull transmission such that not all bytes of the write-buffer can be sent.\nThis causes `mq->sendleftovers` and `mq->nsend` to be set.\n4. Have another invocation of `mqtt_doing`. The code mentioned above gets executed. `mq->sendleftovers` gets freed.\nIf `mqtt_send` could send all remaining bytes successfully `mq->sendleftovers` and `mq->nsend` don't get reset.\n5. Have another invocation of `mqtt_doing`. Since `mq->nsend` didn't change curl tries to send the leftover bytes again, triggering the vulnerabilities\n\n# How to reproduce the bug\n1. Checkout tag `curl-7_77_0` in the curl repository\n2. Apply the following patch that artificially creates a scenario as described above:\n```\ndiff --git a/lib/sendf.c b/lib/sendf.c\nindex e41bb805f..773d4b5b6 100644\n--- a/lib/sendf.c\n+++ b/lib/sendf.c\n@@ -294,6 +294,7 @@ void Curl_failf(struct Curl_easy *data, const char *fmt, ...)\n  * If the write would block (CURLE_AGAIN), we return CURLE_OK and\n  * (*written == 0). Otherwise we return regular CURLcode value.\n  */\n+static int CUSTOM_blocked = 0;\n CURLcode Curl_write(struct Curl_easy *data,\n                     curl_socket_t sockfd,\n                     const void *mem,\n@@ -322,8 +323,13 @@ CURLcode Curl_write(struct Curl_easy *data,\n   }\n #endif\n   bytes_written = conn->send[num](data, num, mem, len, &result);\n+  if(!CUSTOM_blocked) {\n+    bytes_written = 0;\n+    CUSTOM_blocked = 1;\n+  }\n \n   *written = bytes_written;\n+\n   if(bytes_written >= 0)\n     /* we completely ignore the curlcode value when subzero is not returned */\n     return CURLE_OK;\n\n```\n3. Rebuild curl\n4. Start a simple netcat session with: `nc -lp 5678`\n5. Invoke curl with: `curl mqtt://127.0.0.1:5678/`\n\nThe output:\n```\nfree(): double free detected in tcache 2\n[1]    199104 abort (core dumped)  ./curl mqtt://127.0.0.1:5678\n```\n\nAnd in the terminal where netcat was launched it can be seen\nthat the content of the freed heap chunk was sent.\n\n## Impact\n\nSince double frees of tcache chunks are not detected until glibc version 2.29\nthis vulnerability is perfectly exploitable for operationg systems using an older\nglibc. Causing `write()` to return `EAGAIN` is more difficult but not impossible\nto manage, e.g. this can always be the case if the peer is not reading as fast as\nthe curl client is writing ([source](https://stackoverflow.com/questions/36539580/write-to-tcp-socket-keeps-returning-eagain/36539632#36539632)).\nAt minimum this can be used to leak heap metadata which can help in exploitation.",
  "weakness": {
    "id": 49,
    "name": "Double Free"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 1382088,
      "file_name": "patch",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/bcnsmtmzouctlpnk0iap0ycdvxz8?response-content-disposition=attachment%3B%20filename%3D%22patch%22%3B%20filename%2A%3DUTF-8%27%27patch&response-content-type=text%2Fx-diff&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYXA2JSSL%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T013758Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEH4aCXVzLXdlc3QtMiJHMEUCIQC9JgjrvVUHLexbFFv1tEgfY61VXBaWjZG5Y1kCBeTTRwIgN4w9WZOIFqxTGgZtblXFHwLNndfRzCx7%2FtF990wpwqAquwUI9%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDFQQKMJ34gpArjRt1yqPBfsavkZG4y0a4%2B%2B6zExz7sIfTEiWsrYLUFI%2B2rH%2FMqEC5JKgvwN34AGHEcsJ6FYUyKBDyQvrKwNlUx1Dv6e69ooLk9%2FMwiE22BIdReSXJuRdc56g5VV0%2B4RAAjWzaggh5VSlobr4TGZcr0VEAJBljJ9xv71OuyL4%2FJspexJlmcgTHUxdCQYBOnAacgW8c4FLQXZqhY%2BJE%2BnGI7EuKx6E%2F5k0JEXErJOsVu0LtxE4wNrOwhGWzV%2BIA7BAkZvD9dd655%2BFzwD0nID%2FN36wizb6FRNXOsX93t%2Fm0wyHunGcvNKYfYDumcaKrR6mWgQeCDll%2BMomNPzEU6WUVdw%2BGKnckwUQVkrHCCeNAkqeL6LI6WiixgaTnnRaDOKz78g5QbTAy4a2kaywzuDPi6QHuRLZj3calmuqJQsHUJoQGsjexurUfZFmj0C1zz0lcAO48Dk888Ke2DdpvqUxJiY48beUl3v5B%2BnA8MRoQHTNMbyykk%2FuGKeiyFN54LUX7Q9aZXTV9fCu1f7DQKASWyWyRFdh4jLvHjKpSKwgNGJ2RJN7UrTRWO4WFfHLdNtyd2HpmT6TKv8DdOGpepARtBExTdU0w%2FstYcBn5e8bOgzUy9ujlcXJzBmvVgncLf1wK2d1LpCURcjpvoETmc3jpEmrnGDCKOSAy51TQTGSlqCXXwNApBTB2F2g6dI2dFi0T4YT08nbH0NFt2NhbnxBWyQlfRpRuRxA00gmv68Y8fRcn4GfP2Ur83OwMCndv4YUWq9jrRjeeKgC0PWX5yLbw5nflu7UVQGVfR0Ct2MPqcXfxmETgsh8jtV92SNqz0URr5eEN%2F7pTkS8skAfG1lo%2F13vu0OHsjVncbEMZ5ICBvJjyrWbPNkwlci8xgY6sQG%2B8Sed1scznEQp2l1oRVJoEoysZ8Uqp8zg1M3o42tyMwi%2BhBVuG%2FXGy1juWBwLBOTkdns%2BN3JdhwQnI3%2B%2FR6eHLGUyPB5xgieePV4Rj3%2FJ33lTbVxkHrvkIPdi%2Bp8jfQZJuyKwz6kN5IR%2FlR6OFVtN2oUwkN00DbVY%2FTZSaZcu%2BFRFJwNsFITbZqHpWyLk40OOFMeXoemxRC2JZzw380gA7oh3tqKilPIQfcSPzDvqOoo%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=59a60521f69f062a063dba3959e0743372d196fa2605a0ca360e333f5dd17afc",
      "file_size": 870,
      "type": "text/x-diff",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2021-10-15T07:25:48.358Z",
  "allow_singular_disclosure_after": -124135930.6040275,
  "singular_disclosure_allowed": true,
  "vote_count": 14,
  "voters": [
    "z2_",
    "alp",
    "fanimalikhack",
    "akashhamal0x01",
    "0xwise",
    "khizer47",
    "fat-fingers",
    "shivpalbilada",
    "xcess",
    "0rootshell",
    "and 4 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
