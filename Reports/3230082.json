{
  "id": 3230082,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMjMwMDgy",
  "url": "https://hackerone.com/reports/3230082",
  "title": "Stack-based Buffer Overflow in TELNET NEW_ENV Option Handling",
  "state": "Closed",
  "substate": "spam",
  "severity_rating": "high",
  "readable_substate": "Spam",
  "created_at": "2025-06-30T12:10:49.256Z",
  "submitted_at": "2025-06-30T14:41:01.515Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "agent_0",
    "url": "/agent_0",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/qltzjidilio20ouet2juahcqjm08/d86f3034cedc97192c6e25b49fb25d458f11529df403793678d43ead36f13cc4"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/36bca6668139d77be42208d896968344ae7a76c55ee0f8b0f28281ccd492ff02",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/19c85a12ac35f466af1ea2b0ae853bfe5e8f057fb1d6fb62db131707bb67b30d"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool doing internet transfers"
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2025-06-30T18:35:20.723Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2025-06-30T18:34:59.453Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Title:**\n\nStack-based Buffer Overflow in TELNET NEW_ENV Option Handling\n\n**Vulnerability Description:**\n\n**Summary:**\nA stack-based buffer overflow vulnerability exists in the `libcurl` TELNET handler. When `libcurl` connects to a malicious TELNET server, the server can trigger an overflow by sending a `NEW_ENVIRON SEND` request. This causes the client to construct a response that overwrites a fixed-size stack buffer, leading to a crash and potential remote code execution (RCE). The vulnerability can be triggered by a user connecting to a malicious URL using the `curl` command-line tool or any application that uses `libcurl`.\n\n**Root Cause Analysis:**\nThe vulnerability is located in the `suboption()` function within `curl/lib/telnet.c`. When the client receives a request from the server to send its environment variables (as specified by the user via the `CURLOPT_TELNETOPTIONS` setting), it attempts to build a response packet on the stack.\n\nThe function allocates a 2048-byte buffer named `temp` on the stack:\n```c\nunsigned char temp[2048];\n```\nIt then iterates through the user-provided environment variables (`tn->telnet_vars`). Before writing a variable to the buffer, it performs a size check:\n```c\nsize_t tmplen = (strlen(v->data) + 1);\nif(len + tmplen < (int)sizeof(temp)-6) {\n    // ... code to write to buffer ...\n}\n```\nThe flaw lies in how the variable is written to the buffer inside this `if` block. If the variable contains a comma (the format for `NEW_ENV` is `VAR,VALUE`), it is processed by the following `msnprintf` call:\n```c\nlen += msnprintf((char *)&temp[len], sizeof(temp) - len,\n                 \"%c%.*s%c%s\", CURL_NEW_ENV_VAR,\n                 (int)vlen, v->data, CURL_NEW_ENV_VALUE, ++s);\n```\nThe length check only accounts for `tmplen` (the original string length), but this `msnprintf` call expands the string by adding two control characters (`CURL_NEW_ENV_VAR` and `CURL_NEW_ENV_VALUE`). This discrepancy allows an attacker to bypass the length check. By providing a series of carefully sized `NEW_ENV` options, an attacker can cause `msnprintf` to write far beyond the 2048-byte boundary of the `temp` buffer, corrupting the stack.\n\n**Impact:**\nThis is a high-severity vulnerability. A successful exploit leads to a denial of service (crash) via stack corruption. More critically, because the overflow is controllable, it creates the potential for an attacker to achieve Remote Code Execution (RCE) with the permissions of the user running the `curl` client.\n\n**Proof of Concept (POC):**\n\nThis proof-of-concept reliably demonstrates the vulnerability. It requires two components: a simple Python server to act as the malicious TELNET server, and a C program that uses `libcurl` to connect to it.\n\n**Component 1: Malicious TELNET Server (`tiny_telnet_server.py`)**\nThis server listens on port 2323 and, upon connection, sends the specific TELNET command sequence (`IAC SB NEW_ENVIRON SEND IAC SE`) that triggers the vulnerable code path in the client.\n\n```python\nimport socket\nimport sys\nimport time\n\ndef main():\n    host = '127.0.0.1'\n    port = 2323\n\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server.bind((host, port))\n    server.listen(1)\n    print(f\"[*] Simple TELNET server listening on {host}:{port}\", file=sys.stderr)\n\n    # Command: IAC SB NEW_ENVIRON SEND IAC SE\n    telnet_command = b'\\xff\\xfa\\x27\\x01\\xff\\xf0'\n\n    try:\n        conn, addr = server.accept()\n        print(f\"[+] Connection from {addr}\", file=sys.stderr)\n        print(\"[*] Sending TELNET NEW_ENVIRON command to trigger the vulnerability...\", file=sys.stderr)\n        conn.sendall(telnet_command)\n        \n        time.sleep(2) # Give client time to process and crash\n        \n        print(\"[*] Closing connection.\", file=sys.stderr)\n        conn.close()\n\n    except Exception as e:\n        print(f\"[!] An error occurred: {e}\", file=sys.stderr)\n    finally:\n        server.close()\n        print(\"[*] Server shut down.\", file=sys.stderr)\n\nif __name__ == '__main__':\n    main()\n```\n\n**Component 2: Vulnerable Client (`telnet_poc.c`)**\nThis C program uses `libcurl` to connect to the server with specially crafted `CURLOPT_TELNETOPTIONS` that exploit the flawed length check.\n\n```c\n#include <stdio.h>\n#include <curl/curl.h>\n\nint main(void)\n{\n  CURL *curl;\n  CURLcode res;\n  struct curl_slist *options = NULL;\n\n  curl_global_init(CURL_GLOBAL_DEFAULT);\n\n  curl = curl_easy_init();\n  if(curl) {\n    /* This payload uses a series of environment variables that are sized to\n       pass the flawed length check but expand via msnprintf to cause an\n       overflow of the 2048-byte stack buffer. The format is \"NEW_ENV=VAR,VALUE\". */\n    options = curl_slist_append(optionsn    options = curl_slist_append(optionsn    options = curl_slist_append(optionsn    options = curl_slist_append(optionsn\n    curl_easy_setopt(curl, CURLOPT_URL, \"telnet://127.0.0.1:2323\");\n    curl_easy_setopt(curl, CURLOPT_TELNETOPTIONS, options);\n    curl_easy_setopt(curl, CURLOPT_VERBOSE, 1L);\n\n    res = curl_easy_perform(curl);\n\n    if(res != CURLE_OK && res != CURLE_RECV_ERROR)\n      fprintf(stderr, \"curl_easy_perform() failed: %s\\\\n\",\n              curl_easy_strerror(res));\n\n    curl_slist_free_all(options);\n    curl_easy_cleanup(curl);\n  }\n\n  curl_global_cleanup();\n\n  return 0;\n}\n\n\n**Reproduction Steps**\n\n**1. Set up the Environment**\nEnsure you have a Linux environment with the necessary build tools installed. On a Debian-based system (like Ubuntu), you can install them with:\n```bash\nsudo apt-get update\nsudo apt-get install gcc git autoconf libtool libpsl-dev\n```\n\n**2. Clone the `curl` Repository**\n```bash\ngit clone https://github.com/curl/curl.git\n```\n\n**3. Build `libcurl` from Source**\nThese commands will configure, compile, and install a local version of `libcurl`. We disable SSL because it is not needed to demonstrate this TELNET vulnerability.\n```bash\ncd curl\nautoreconf -fi\n./configure --prefix=$(pwd)/build --without-ssl\nmake\nmake install\ncd ..\n```\n\n**4. Compile the Proof of Concept (PoC) Client**\nThis command compiles `telnet_poc.c` and links it against the `libcurl` you just built. Make sure `telnet_poc.c` is in the same directory where you cloned the `curl` folder.\n```bash\ngcc telnet_poc.c -o telnet_poc -I curl/build/include -L curl/build/lib -lcurl -Wl,-rpath,$(pwd)/curl/build/lib\n```\n\n**5. Execute the Vulnerability Test**\nYou will need two separate terminal windows for this final step, both opened in your project directory.\n\n**Terminal 1: Start the Server**\nRun the Python server to listen for a connection. Make sure `tiny_telnet_server.py` is in your current directory.\n```bash\npython3 tiny_telnet_server.py\n```\n\n**Terminal 2: Run the Client**\nWhile the server is running, execute the compiled PoC client in the second terminal.\n```bash\n./telnet_poc\n```\n\n**Expected Result:**\nThe client in Terminal 2 will connect to the server and print verbose connection details. You will see a large stream of 'A' characters being sent back to the server, demonstrating that the client's stack buffer has been overflowed. The program will then terminate with an error like `Recv failure: Connection reset by peer` (because the server hangs up) or, on many systems, will crash with a `Segmentation fault`. Either result confirms the memory corruption.\n\n## Impact\n\n### **Detailed Impact Assessment**\n\nThe impact of this stack-based buffer overflow is **High**. The vulnerability allows for two primary attack scenarios, ranging from a guaranteed Denial of Service to a high probability of Remote Code Execution.\n\n**1. Denial of Service (DoS) - Guaranteed Impact**\n\nThe most immediate and easily achievable impact is a Denial of Service. As demonstrated by the proof-of-concept, an attacker can trigger a stack buffer overflow by convincing a user or an application to connect to a malicious TELNET server with specially crafted options.\n\nWhen the overflow occurs, critical data on the program's stack is corrupted. This data includes local variables and, most importantly, the function's saved return address. The moment the `suboption()` function attempts to return or access this corrupted memory, the program will crash due to an invalid memory access. This immediately terminates the `curl` process or any application using the `libcurl` library, preventing it from functioning further. This is a remotely triggerable, unauthenticated Denial of Service.\n\n**2. Remote Code Execution (RCE) - Potential Impact**\n\nThe more critical impact is the potential for Remote Code Execution. Stack-based buffer overflows are a classic and well-understood vector for achieving RCE. The attacker's goal is not just to crash the program, but to seize control of its execution flow.\n\nThis is typically achieved as follows:\n*   **Controlling the Return Address:** The primary target on the stack is the function's return address. This address tells the CPU where to continue execution after the current function (`suboption()`) is finished. The attacker's crafted payload, which overflows the `temp` buffer, can be precisely sized to overwrite this return address with an address of their choosing.\n*   **Injecting Malicious Code (Shellcode):** The attacker can include their own small, executable piece of code (known as \"shellcode\") within the overflowing data itself.\n*   **Redirecting Execution:** The attacker overwrites the return address to point back into the stack, specifically to the location where their shellcode was injected. When the `suboption()` function finishes, instead of returning to its legitimate caller, it will \"return\" to the attacker's shellcode and begin executing it.\n\nA successful RCE exploit would grant the attacker the ability to run arbitrary commands on the victim's machine with the **same permissions as the user who ran the `curl` command**. If a user runs the vulnerable `curl` command, the attacker gets control of that user's account. If the command is executed by a web server, a system script, or another automated process running with higher privileges (like `root`), the attacker could gain complete control over the entire system.",
  "weakness": {
    "id": 4,
    "name": "Stack Overflow"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 4509032,
      "file_name": "telnet_poc.c",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/zup6tmd4ujkt3m76qqapkmx7jdhe?response-content-disposition=attachment%3B%20filename%3D%22telnet_poc.c%22%3B%20filename%2A%3DUTF-8%27%27telnet_poc.c&response-content-type=text%2Fx-csrc&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6G65MFJS%2F20250704%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250704T194119Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQDPuxwsJDjHTxjH%2FqNRsDAmPHPdFiUeImrXoxwNaA%2FwkwIhAI%2BQdOMW1wIULIb6uWuoH5ctJ5dsZX5hl0qljtaB3m75KrEFCDMQAxoMMDEzNjE5Mjc0ODQ5Igz81WDmB4v8tHAjwMMqjgVSt5fjXfHwugJgQcPRAe2NMGtv2BKO5rpFyrQlAEz7oRlSq6YXGoSr7%2BBGu%2B%2Bqr7b6RwK1a75tcWwZ2stNkOCfiJRd3bhD7Cb4mxmKNtGLblienBlUM2tH52yuCi2SyZIThCaV967jwI0Mw2cUcyJQ6e32XzBqvdj8vB%2F095LCPd9Y6YSqjb1CWqAtoUZK9h5q37EVikXZehhp%2BVd2EjpnJfdmZ28ENSrmyBkPQsF5sfyZaTk6QI1Rfq0lH1YeDpdLPR%2BDk6aY3URBMehapeM%2FqvRZwi3mXhZaU52SIniJiMRAcPHlHnxoiWXTG8wPOy20rDUnRhOSQuXc%2FL30hkMmdgkHTX16W3%2BBftzcAJhUp8wKHpquSkZLyLd1g92IEZb6Ojtab%2FpCaJebjgo1fG7oSX5b5C%2BcsYstguz%2FtBh%2BRq1OhupdFCOIStIRaDBKnkh7P642BEW5%2FhVZs9r1uXuYLucgVYI2ceNCUL0wIbnFNW23z7lSNDotWN3YM86jAddDuC7yoTVaFg3oACLlMrxxGLBpB4qKln96x3wl2NWHOzOLtFC%2FiGFvLeNjxZrLiXvutWjdll%2FDZgxJPqDv7qrbLgGkwaARXgGcQNfbPMYVPdlbxCDwk%2BSQdpRQH74M6%2BF7xSdYWBgCfvOoff23IgSklGVp3fTm46DzypxrlJ8vRf4j8dj1mutEUtSCswMDgolANUjOD88YLhfuiucmi0SfaTiEoFC0fq4mjD7CmMvGl2znOCoQopfgulX%2B8vYbKM1VcSyiFf9DO3XkRyoksQYvjVWHp3pKRmLsutyDkVNugIkCUmm2RIrCc6m1hjPf32k%2BUV3vhZNsgEP1g9FyCxyYao7OzYO1W8bY1e3M6q4w56%2BgwwY6sAH5Zn%2BpdCoCGmUXocyvy8LyLLYOePbPQGqb1ow%2FYwAwDZ3rKKH5VijKY8Py0RYA5WmxO4WCDb7H63OIseNJlj26HxMdqFE61TXsXXWHjZ2p4rP2iXfyeNTzWfWpForgpMLSqURh5cQWwhDZ%2BXey%2FKSn1ViJT0h4xTZymDJhL%2FNmHQdPQsoXr%2FM%2BIFfRjS96QCiXtgsFJlPUSynecAznw1Y2hTDZwtUFG0tXRFBJiAuk1w%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=d7eee3939f2855dc25b086196cd06fba5d728bf83b6a324b6ed7cd70d2c0afbc",
      "file_size": 5383,
      "type": "text/x-csrc",
      "moderated": null
    },
    {
      "id": 4509033,
      "file_name": "tiny_telnet_server.py",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/awaztjgx4n1zpfp8vqp3dbyo8d6j?response-content-disposition=attachment%3B%20filename%3D%22tiny_telnet_server.py%22%3B%20filename%2A%3DUTF-8%27%27tiny_telnet_server.py&response-content-type=text%2Fx-python&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6G65MFJS%2F20250704%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250704T194119Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQDPuxwsJDjHTxjH%2FqNRsDAmPHPdFiUeImrXoxwNaA%2FwkwIhAI%2BQdOMW1wIULIb6uWuoH5ctJ5dsZX5hl0qljtaB3m75KrEFCDMQAxoMMDEzNjE5Mjc0ODQ5Igz81WDmB4v8tHAjwMMqjgVSt5fjXfHwugJgQcPRAe2NMGtv2BKO5rpFyrQlAEz7oRlSq6YXGoSr7%2BBGu%2B%2Bqr7b6RwK1a75tcWwZ2stNkOCfiJRd3bhD7Cb4mxmKNtGLblienBlUM2tH52yuCi2SyZIThCaV967jwI0Mw2cUcyJQ6e32XzBqvdj8vB%2F095LCPd9Y6YSqjb1CWqAtoUZK9h5q37EVikXZehhp%2BVd2EjpnJfdmZ28ENSrmyBkPQsF5sfyZaTk6QI1Rfq0lH1YeDpdLPR%2BDk6aY3URBMehapeM%2FqvRZwi3mXhZaU52SIniJiMRAcPHlHnxoiWXTG8wPOy20rDUnRhOSQuXc%2FL30hkMmdgkHTX16W3%2BBftzcAJhUp8wKHpquSkZLyLd1g92IEZb6Ojtab%2FpCaJebjgo1fG7oSX5b5C%2BcsYstguz%2FtBh%2BRq1OhupdFCOIStIRaDBKnkh7P642BEW5%2FhVZs9r1uXuYLucgVYI2ceNCUL0wIbnFNW23z7lSNDotWN3YM86jAddDuC7yoTVaFg3oACLlMrxxGLBpB4qKln96x3wl2NWHOzOLtFC%2FiGFvLeNjxZrLiXvutWjdll%2FDZgxJPqDv7qrbLgGkwaARXgGcQNfbPMYVPdlbxCDwk%2BSQdpRQH74M6%2BF7xSdYWBgCfvOoff23IgSklGVp3fTm46DzypxrlJ8vRf4j8dj1mutEUtSCswMDgolANUjOD88YLhfuiucmi0SfaTiEoFC0fq4mjD7CmMvGl2znOCoQopfgulX%2B8vYbKM1VcSyiFf9DO3XkRyoksQYvjVWHp3pKRmLsutyDkVNugIkCUmm2RIrCc6m1hjPf32k%2BUV3vhZNsgEP1g9FyCxyYao7OzYO1W8bY1e3M6q4w56%2BgwwY6sAH5Zn%2BpdCoCGmUXocyvy8LyLLYOePbPQGqb1ow%2FYwAwDZ3rKKH5VijKY8Py0RYA5WmxO4WCDb7H63OIseNJlj26HxMdqFE61TXsXXWHjZ2p4rP2iXfyeNTzWfWpForgpMLSqURh5cQWwhDZ%2BXey%2FKSn1ViJT0h4xTZymDJhL%2FNmHQdPQsoXr%2FM%2BIFfRjS96QCiXtgsFJlPUSynecAznw1Y2hTDZwtUFG0tXRFBJiAuk1w%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=ea0307613fe70efa346f9b6cc53a47aa368a27e9cd2dcc5d52d8d4f43d254c71",
      "file_size": 1079,
      "type": "text/x-python",
      "moderated": null
    },
    {
      "id": 4509606,
      "file_name": "POC-Screenshot2.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/5t8wpn5s4q3yc41lg9s6jjyjfcgd?response-content-disposition=attachment%3B%20filename%3D%22POC-Screenshot2.png%22%3B%20filename%2A%3DUTF-8%27%27POC-Screenshot2.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6G65MFJS%2F20250704%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250704T194119Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQDPuxwsJDjHTxjH%2FqNRsDAmPHPdFiUeImrXoxwNaA%2FwkwIhAI%2BQdOMW1wIULIb6uWuoH5ctJ5dsZX5hl0qljtaB3m75KrEFCDMQAxoMMDEzNjE5Mjc0ODQ5Igz81WDmB4v8tHAjwMMqjgVSt5fjXfHwugJgQcPRAe2NMGtv2BKO5rpFyrQlAEz7oRlSq6YXGoSr7%2BBGu%2B%2Bqr7b6RwK1a75tcWwZ2stNkOCfiJRd3bhD7Cb4mxmKNtGLblienBlUM2tH52yuCi2SyZIThCaV967jwI0Mw2cUcyJQ6e32XzBqvdj8vB%2F095LCPd9Y6YSqjb1CWqAtoUZK9h5q37EVikXZehhp%2BVd2EjpnJfdmZ28ENSrmyBkPQsF5sfyZaTk6QI1Rfq0lH1YeDpdLPR%2BDk6aY3URBMehapeM%2FqvRZwi3mXhZaU52SIniJiMRAcPHlHnxoiWXTG8wPOy20rDUnRhOSQuXc%2FL30hkMmdgkHTX16W3%2BBftzcAJhUp8wKHpquSkZLyLd1g92IEZb6Ojtab%2FpCaJebjgo1fG7oSX5b5C%2BcsYstguz%2FtBh%2BRq1OhupdFCOIStIRaDBKnkh7P642BEW5%2FhVZs9r1uXuYLucgVYI2ceNCUL0wIbnFNW23z7lSNDotWN3YM86jAddDuC7yoTVaFg3oACLlMrxxGLBpB4qKln96x3wl2NWHOzOLtFC%2FiGFvLeNjxZrLiXvutWjdll%2FDZgxJPqDv7qrbLgGkwaARXgGcQNfbPMYVPdlbxCDwk%2BSQdpRQH74M6%2BF7xSdYWBgCfvOoff23IgSklGVp3fTm46DzypxrlJ8vRf4j8dj1mutEUtSCswMDgolANUjOD88YLhfuiucmi0SfaTiEoFC0fq4mjD7CmMvGl2znOCoQopfgulX%2B8vYbKM1VcSyiFf9DO3XkRyoksQYvjVWHp3pKRmLsutyDkVNugIkCUmm2RIrCc6m1hjPf32k%2BUV3vhZNsgEP1g9FyCxyYao7OzYO1W8bY1e3M6q4w56%2BgwwY6sAH5Zn%2BpdCoCGmUXocyvy8LyLLYOePbPQGqb1ow%2FYwAwDZ3rKKH5VijKY8Py0RYA5WmxO4WCDb7H63OIseNJlj26HxMdqFE61TXsXXWHjZ2p4rP2iXfyeNTzWfWpForgpMLSqURh5cQWwhDZ%2BXey%2FKSn1ViJT0h4xTZymDJhL%2FNmHQdPQsoXr%2FM%2BIFfRjS96QCiXtgsFJlPUSynecAznw1Y2hTDZwtUFG0tXRFBJiAuk1w%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=df4b3ff0d9cec0867eee7ccffb9b5209262d2c5c3d10954960e3fca474b3333c",
      "file_size": 507246,
      "type": "image/png",
      "moderated": false
    },
    {
      "id": 4509607,
      "file_name": "POC-Screenshot3.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/1dxxb3x7kcb9ynpq1xt10qou67ab?response-content-disposition=attachment%3B%20filename%3D%22POC-Screenshot3.png%22%3B%20filename%2A%3DUTF-8%27%27POC-Screenshot3.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6G65MFJS%2F20250704%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250704T194119Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQDPuxwsJDjHTxjH%2FqNRsDAmPHPdFiUeImrXoxwNaA%2FwkwIhAI%2BQdOMW1wIULIb6uWuoH5ctJ5dsZX5hl0qljtaB3m75KrEFCDMQAxoMMDEzNjE5Mjc0ODQ5Igz81WDmB4v8tHAjwMMqjgVSt5fjXfHwugJgQcPRAe2NMGtv2BKO5rpFyrQlAEz7oRlSq6YXGoSr7%2BBGu%2B%2Bqr7b6RwK1a75tcWwZ2stNkOCfiJRd3bhD7Cb4mxmKNtGLblienBlUM2tH52yuCi2SyZIThCaV967jwI0Mw2cUcyJQ6e32XzBqvdj8vB%2F095LCPd9Y6YSqjb1CWqAtoUZK9h5q37EVikXZehhp%2BVd2EjpnJfdmZ28ENSrmyBkPQsF5sfyZaTk6QI1Rfq0lH1YeDpdLPR%2BDk6aY3URBMehapeM%2FqvRZwi3mXhZaU52SIniJiMRAcPHlHnxoiWXTG8wPOy20rDUnRhOSQuXc%2FL30hkMmdgkHTX16W3%2BBftzcAJhUp8wKHpquSkZLyLd1g92IEZb6Ojtab%2FpCaJebjgo1fG7oSX5b5C%2BcsYstguz%2FtBh%2BRq1OhupdFCOIStIRaDBKnkh7P642BEW5%2FhVZs9r1uXuYLucgVYI2ceNCUL0wIbnFNW23z7lSNDotWN3YM86jAddDuC7yoTVaFg3oACLlMrxxGLBpB4qKln96x3wl2NWHOzOLtFC%2FiGFvLeNjxZrLiXvutWjdll%2FDZgxJPqDv7qrbLgGkwaARXgGcQNfbPMYVPdlbxCDwk%2BSQdpRQH74M6%2BF7xSdYWBgCfvOoff23IgSklGVp3fTm46DzypxrlJ8vRf4j8dj1mutEUtSCswMDgolANUjOD88YLhfuiucmi0SfaTiEoFC0fq4mjD7CmMvGl2znOCoQopfgulX%2B8vYbKM1VcSyiFf9DO3XkRyoksQYvjVWHp3pKRmLsutyDkVNugIkCUmm2RIrCc6m1hjPf32k%2BUV3vhZNsgEP1g9FyCxyYao7OzYO1W8bY1e3M6q4w56%2BgwwY6sAH5Zn%2BpdCoCGmUXocyvy8LyLLYOePbPQGqb1ow%2FYwAwDZ3rKKH5VijKY8Py0RYA5WmxO4WCDb7H63OIseNJlj26HxMdqFE61TXsXXWHjZ2p4rP2iXfyeNTzWfWpForgpMLSqURh5cQWwhDZ%2BXey%2FKSn1ViJT0h4xTZymDJhL%2FNmHQdPQsoXr%2FM%2BIFfRjS96QCiXtgsFJlPUSynecAznw1Y2hTDZwtUFG0tXRFBJiAuk1w%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=d97c5e3d87979f92e8a353be0337124ba3ba7f5bedf6f5c80ef183f2dae5c883",
      "file_size": 517592,
      "type": "image/png",
      "moderated": false
    },
    {
      "id": 4509608,
      "file_name": "POC-Screenshot1.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/7jkr1hsycnu93nv81ewpgsy16re0?response-content-disposition=attachment%3B%20filename%3D%22POC-Screenshot1.png%22%3B%20filename%2A%3DUTF-8%27%27POC-Screenshot1.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6G65MFJS%2F20250704%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250704T194119Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjECoaCXVzLXdlc3QtMiJIMEYCIQDPuxwsJDjHTxjH%2FqNRsDAmPHPdFiUeImrXoxwNaA%2FwkwIhAI%2BQdOMW1wIULIb6uWuoH5ctJ5dsZX5hl0qljtaB3m75KrEFCDMQAxoMMDEzNjE5Mjc0ODQ5Igz81WDmB4v8tHAjwMMqjgVSt5fjXfHwugJgQcPRAe2NMGtv2BKO5rpFyrQlAEz7oRlSq6YXGoSr7%2BBGu%2B%2Bqr7b6RwK1a75tcWwZ2stNkOCfiJRd3bhD7Cb4mxmKNtGLblienBlUM2tH52yuCi2SyZIThCaV967jwI0Mw2cUcyJQ6e32XzBqvdj8vB%2F095LCPd9Y6YSqjb1CWqAtoUZK9h5q37EVikXZehhp%2BVd2EjpnJfdmZ28ENSrmyBkPQsF5sfyZaTk6QI1Rfq0lH1YeDpdLPR%2BDk6aY3URBMehapeM%2FqvRZwi3mXhZaU52SIniJiMRAcPHlHnxoiWXTG8wPOy20rDUnRhOSQuXc%2FL30hkMmdgkHTX16W3%2BBftzcAJhUp8wKHpquSkZLyLd1g92IEZb6Ojtab%2FpCaJebjgo1fG7oSX5b5C%2BcsYstguz%2FtBh%2BRq1OhupdFCOIStIRaDBKnkh7P642BEW5%2FhVZs9r1uXuYLucgVYI2ceNCUL0wIbnFNW23z7lSNDotWN3YM86jAddDuC7yoTVaFg3oACLlMrxxGLBpB4qKln96x3wl2NWHOzOLtFC%2FiGFvLeNjxZrLiXvutWjdll%2FDZgxJPqDv7qrbLgGkwaARXgGcQNfbPMYVPdlbxCDwk%2BSQdpRQH74M6%2BF7xSdYWBgCfvOoff23IgSklGVp3fTm46DzypxrlJ8vRf4j8dj1mutEUtSCswMDgolANUjOD88YLhfuiucmi0SfaTiEoFC0fq4mjD7CmMvGl2znOCoQopfgulX%2B8vYbKM1VcSyiFf9DO3XkRyoksQYvjVWHp3pKRmLsutyDkVNugIkCUmm2RIrCc6m1hjPf32k%2BUV3vhZNsgEP1g9FyCxyYao7OzYO1W8bY1e3M6q4w56%2BgwwY6sAH5Zn%2BpdCoCGmUXocyvy8LyLLYOePbPQGqb1ow%2FYwAwDZ3rKKH5VijKY8Py0RYA5WmxO4WCDb7H63OIseNJlj26HxMdqFE61TXsXXWHjZ2p4rP2iXfyeNTzWfWpForgpMLSqURh5cQWwhDZ%2BXey%2FKSn1ViJT0h4xTZymDJhL%2FNmHQdPQsoXr%2FM%2BIFfRjS96QCiXtgsFJlPUSynecAznw1Y2hTDZwtUFG0tXRFBJiAuk1w%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=d3e856e25ebbd1b8b7386128a40e822c99389cb074fc06c09869959a5c601b5d",
      "file_size": 543058,
      "type": "image/png",
      "moderated": false
    }
  ],
  "allow_singular_disclosure_at": null,
  "vote_count": 8,
  "voters": [
    "corrupted_bytes",
    "xchessy",
    "2026",
    "lance10t",
    "thalaivar304",
    "bilalhacker302",
    "bugtriage-jorge",
    "icongaurav9"
  ],
  "severity": {
    "rating": "high",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
