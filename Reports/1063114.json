{
  "id": 1063114,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDYzMTE0",
  "url": "https://hackerone.com/reports/1063114",
  "title": "Unread Messages can leak Message IDs",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2020-12-20T22:01:01.554Z",
  "submitted_at": "2020-12-20T22:01:01.605Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "gronke",
    "url": "/gronke",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 19858,
    "url": "https://hackerone.com/rocket_chat",
    "handle": "rocket_chat",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/019/858/ada6c92a338715afad123af214dd6e22fd8dc6ff_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/019/858/ada6c92a338715afad123af214dd6e22fd8dc6ff_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Rocket.Chat",
      "twitter_handle": "RocketChat",
      "website": "https://rocket.chat",
      "about": "Rocket.Chat is a company built on open source values and a love for efficiency. The company is driven by our amazing community of contributors."
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": true,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2024-08-10T21:59:12.079Z",
  "bug_reporter_agreed_on_going_public_at": "2024-07-11T21:59:05.769Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:** The Meteor Method `unreadMessages`, called with a regular expression, can leak existing Message IDs to unauthorized clients.\n\n**Description:**\nThe MongoDB `_id` of a Rocket.Chat Message is private, because unauthorized clients could use it to affect or leak chat messages. With a regular expression as target `firstUnreadMessage`, the following Meteor.call prints true when a matching message exists:\n\n```javascript\nMeteor.call(\"unreadMessages\", {\n  _id: { $regex: /(.*|<KNOWN_MESSAGE_ID>)/ }\n}, (error, i) => console.log(!!error));\n```\n\nWhen a regex does not match any message, the KNOWN_MESSAGE_ID is found instead, so that no error is returned. An `error-action-not-allowed` error only occurs when the regex matched a message that may not be accessed by the requesting client.\n\nThe affected code path can be found in [app/message-mark-as-unread/server/unreadMessages.js#L28](https://github.com/RocketChat/Rocket.Chat/blob/2de9b867eee43acfb3012faeb9a2a69f62f54776/app/message-mark-as-unread/server/unreadMessages.js#L28):\n\n```javascript\nconst originalMessage = Messages.findOneById(firstUnreadMessage._id, {\n\tfields: {\n\t\tu: 1,\n\t\trid: 1,\n\t\tfile: 1,\n\t\tts: 1,\n\t},\n});\nif (originalMessage == null || userId === originalMessage.u._id) {\n\tthrow new Meteor.Error('error-action-not-allowed', 'Not allowed', {\n\t\tmethod: 'unreadMessages',\n\t\taction: 'Unread_messages',\n\t});\n}\n```\n\n## Releases Affected:\n\n  * 3.9.3 / develop\n\n## Steps To Reproduce (from initial installation to vulnerability):\n\n  1. Login to Rocket.Chat\n  2. Open Web Inspector\n  3. Call `unreadMessages`\n  4. Repeat 3. with more specific regular expression until full message ID is known\n\n## Suggested mitigation\n\n  * Ensure input data `firstUnreadMessage._id` is a String\n\n## Impact\n\nUnauthorized clients can leak existing messages unique identifiers.",
  "weakness": {
    "id": 18,
    "name": "Information Disclosure"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2024-08-10T21:59:05.854Z",
  "allow_singular_disclosure_after": -35065459.96433246,
  "singular_disclosure_allowed": true,
  "vote_count": 17,
  "voters": [
    "shreyaschavhan",
    "spaghettisec",
    "mr-inspector",
    "skeptiker",
    "akkriley",
    "zack10_890",
    "1lo",
    "mr__________x",
    "maverick1henry",
    "mura0x",
    "and 7 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 6.5,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "high",
      "integrity": "none",
      "availability": "none"
    }
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
