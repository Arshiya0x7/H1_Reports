{
  "id": 17390,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNzM5MA==",
  "url": "https://hackerone.com/reports/17390",
  "title": "Flash Content-Type Sniffing Vulnerability ",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2014-06-23T22:00:12.795Z",
  "submitted_at": "2014-06-23T22:00:12.795Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "prakharprasad",
    "url": "/prakharprasad",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/4Qcsaci6HdNLQCPM7oBdhJYY/3cb67cc78dc0cba55b102dd9eca2ee89b206d3e960be830f070583d9070b69ef"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 230,
    "url": "https://hackerone.com/uzbey",
    "handle": "uzbey",
    "profile_picture_urls": {
      "small": "https://hackerone.com/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsiZGF0YSI6NTY5NTAsInB1ciI6ImJsb2JfaWQifX0=--ce31e4182e0952bac228c8685ab6ef98975f8594/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJwbmciLCJncmF2aXR5IjoiQ2VudGVyIiwicmVzaXplIjoiNjJ4NjJeIiwiY3JvcCI6IjYyeDYyKzArMCJ9LCJwdXIiOiJ2YXJpYXRpb24ifX0=--a4d91faed3dff6024dfc1a7b7f8ccc6b45e38396/Holding_hands__02.png",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/230/31db3ca09aa073798698f713a4c01d0e9faf39aa_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Uzbey",
      "twitter_handle": "",
      "website": "https://staging.uzbey.com/",
      "about": "The goal of Uzbey is to create the worlds largest selfie to be launched into space."
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2014-07-23T17:50:35.626Z",
  "bug_reporter_agreed_on_going_public_at": "2014-07-23T17:50:35.469Z",
  "team_member_agreed_on_going_public_at": "2014-07-23T12:35:16.227Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hello,\r\n\r\nThere's a **Flash Content-Type Sniffing vulnerability**. Using this vulnerability I can read the client side source code of your website from a different origin (say prakharprasad.com) and then look for potentially sensitive data in those pages for example - CSRF prevention tokens and then successfully mount a side-wide CSRF attack (as I can read the token every time and on every page) or read messages. Once the victim views my page, I can read his `https://staging.uzbey.com/*` webpage source and then extract out the data I need (messages, anti-csrf tokens and what not).\r\n\r\n**Proof-of-Concept**:\r\n\r\n1. Login to your Uzbey account\r\n2. Visit https://demo.prakharprasad.com/uzbey/uzbey.html (and wait for 5 -10 seconds)\r\n3. Now visit https://staging.uzbey.com/messages and you'll see a message has been sent to *admin* saying *DemoHAX :)* \r\n\r\n**How this works?**\r\n\r\n1. My webpage loads an `<iframe>` pointing to https://demo.prakharprasad.com/uzbey/sniff.html\r\n2. `sniff.html` essentially embeds an SWF-file that has been uploaded to my (attacker's) photo gallery with **.jpg** extension - https://staging.uzbey.com/sites/default/files/magic.jpg \r\n3. Once the embedded file run, it sends a **GET** request to `https://staging.uzbey.com/messages/new`and passes the callback to a function called `nice()`within `sniff.html`. The callback data is the source code of the page that was requested with a **GET** earlier.\r\n4. Now`nice()`function parses the page for `form_bulid_id`and `form_token` and then builds up a form to mount the CSRF attack and then submits the form with a **POST** request. \r\n5. **Game over ! :)**\r\n\r\nBasically I used the upload functionality to upload the malicious SWF with **.jpg** extension and then loaded it in an iframe and did my work!\r\n\r\nThanks, \r\n\r\n@prakharprasad",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2014-08-22T12:35:16.496Z",
  "allow_singular_disclosure_after": -349846294.23328817,
  "singular_disclosure_allowed": true,
  "vote_count": 1,
  "voters": [
    "shivammusic"
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
