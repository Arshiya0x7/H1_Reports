{
  "id": 1621540,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNjIxNTQw",
  "url": "https://hackerone.com/reports/1621540",
  "title": "Web Cache Poisoning leads to XSS and DoS",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2022-07-01T05:01:09.515Z",
  "submitted_at": "2022-07-01T05:01:09.596Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "nokline",
    "url": "/nokline",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/21as5318nc1hn5j4lncmpohiz51m/3cb67cc78dc0cba55b102dd9eca2ee89b206d3e960be830f070583d9070b69ef"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 204,
    "url": "https://hackerone.com/glassdoor",
    "handle": "glassdoor",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/u258rsub76htn189l6jc17ycwrc4/3cb67cc78dc0cba55b102dd9eca2ee89b206d3e960be830f070583d9070b69ef",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/u258rsub76htn189l6jc17ycwrc4/d9695107bfcd68eeb1c9e0912b109cdae9a6c00c0bda6fd4cbd6d9bdb828840a"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Glassdoor",
      "twitter_handle": "glassdoor",
      "website": "https://www.glassdoor.com/",
      "about": "Your work people are here"
    }
  },
  "has_bounty?": true,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": true,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "no-content",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2022-09-13T13:36:15.462Z",
  "bug_reporter_agreed_on_going_public_at": "2022-09-10T05:06:34.883Z",
  "team_member_agreed_on_going_public_at": "2022-09-13T13:36:15.295Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "",
  "weakness": {
    "id": 62,
    "name": "Cross-site Scripting (XSS) - Stored"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 70,
  "voters": [
    "loaymorad",
    "thr3athunt3r",
    "mizzle",
    "jumpydata",
    "he4am",
    "bavoen",
    "nakyamad",
    "palaziv",
    "bombon",
    "alp",
    "and 60 more..."
  ],
  "severity": {
    "rating": "high",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 8181,
    "asset_type": "WILDCARD",
    "asset_identifier": "https://www.glassdoor.com/*",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 191703,
      "category": "team",
      "content": "@nokline and @bombon were able to utilize URL parser confusion in combination with reflected XSS under https://glassdoor.com/Job/ and https://glassdoor.com/mz-survey/interview/collectQuestions_input.htm/ by caching XSS payloads via cookie and header params into a stored XSS for URLs /Award/* and /List/* endpoints.\nThe above combination allowed the self-reflected XSS to be converted to a stored XSS which was cached to a local CDN for a duration of approximately 10 mins.\nTo affect all of the users, researchers specified that they can theoretically target all CDNs and loop every 10 mins to keep the cache loaded with stored XSS.\nWe resolved the above by\n1. Fixing the XSS by handling the output encoding appropriately.\n2. Tightening up caching rules to be more strict on /Awards/ and /List/ endpoints.\n\nGiven the tricky nature of this finding, we are grateful that the researchers were cooperative and helped us all the way through the investigation. Thanks once again and looking forward to more findings from you.",
      "updated_at": "2022-09-13T13:18:50.722Z",
      "can_view?": true,
      "can_create?": false,
      "attachments": [],
      "user": {
        "id": 812081,
        "username": "jjone",
        "name": "JJ",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2019-11-07T21:07:23.824Z",
        "url": "https://hackerone.com/jjone",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png",
          "medium": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png",
          "xtralarge": "/assets/avatars/default-14ffa99f59cd01423c64904352cc130ffcb6a802eadfd11777a54485749e60f2.png"
        }
      }
    },
    {
      "id": 191171,
      "category": "researcher",
      "content": "I was able to escalate 2 unexploitable XSS vulnerabilities, one in the cookie + parameter under every page in https://glassdoor.com/Job/ to a reflected XSS, and one in the cookie+header under every page in https://glassdoor.com/mz-survey/interview/collectQuestions_input.htm/ to a stored XSS with web cache poisoning. I was able to poison the cache with these XSS vulnerabilities by abusing a URL parser confusion. This URL parser confusion was a misinterpretation of dot segments `/../` between the frontend caching server and the backend web server, where the frontend server normalized (removed) the dot segmants, but the backend didn't and considered it as a valid part of the path (disagreement over RFC 3986 section 5.2.4). Prior to this finding, I also found super relaxed cache rules in https://glassdoor.com/Award/* and https://glassdoor.com/List/* , which assumed every page under these paths were static and were subsequently cached. With these findings, I was able to abuse the URL parser confusion to construct a payload with a dot segment which will cache the unexploitable XSS vulnerabilities in `/Job/*` and `/mz-survey/interview/collectQuestions_input.htm/*` under every page in `/List/*` and `/Award/*`.  \nFull writeup: https://nokline.github.io/bugbounty/2022/09/02/Glassdoor-Cache-Poisoning.html",
      "updated_at": "2022-09-13T14:13:43.712Z",
      "can_view?": true,
      "can_create?": false,
      "attachments": [],
      "user": {
        "id": 1038784,
        "username": "nokline",
        "name": "Nokline",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": "https://nokline.github.io",
        "location": "",
        "created_at": "2020-04-12T02:03:01.701Z",
        "url": "https://hackerone.com/nokline",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/21as5318nc1hn5j4lncmpohiz51m/3cb67cc78dc0cba55b102dd9eca2ee89b206d3e960be830f070583d9070b69ef",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/21as5318nc1hn5j4lncmpohiz51m/d9695107bfcd68eeb1c9e0912b109cdae9a6c00c0bda6fd4cbd6d9bdb828840a",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/21as5318nc1hn5j4lncmpohiz51m/4ac84fbe897190579a137d0cf55152b233cdd4f9984435bd80ef67e5e51a0586"
        }
      }
    }
  ]
}
