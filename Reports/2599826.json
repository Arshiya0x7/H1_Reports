{
  "id": 2599826,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yNTk5ODI2",
  "url": "https://hackerone.com/reports/2599826",
  "title": "Boolen Based Blind Sql Injection Via User Agent in ███.mil",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2024-07-12T18:27:41.442Z",
  "submitted_at": "2024-07-12T18:27:41.560Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "iamunixtz",
    "url": "/iamunixtz",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/pxj6j6e3cj167uc6b7o6cjz740mz/3cb67cc78dc0cba55b102dd9eca2ee89b206d3e960be830f070583d9070b69ef"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 16064,
    "url": "https://hackerone.com/deptofdefense",
    "handle": "deptofdefense",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "U.S. Dept Of Defense",
      "twitter_handle": "DC3VDP",
      "website": "https://bit.ly/3ntULtN",
      "about": ""
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2025-01-24T14:47:28.868Z",
  "bug_reporter_agreed_on_going_public_at": "2025-01-08T17:37:19.664Z",
  "team_member_agreed_on_going_public_at": "2025-01-24T14:47:28.006Z",
  "comments_closed?": true,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "### Bug Bounty Report: Boolean-Based Blind SQL Injection\n\n#### **Summary**\n\nI have discovered a boolean-based blind SQL injection vulnerability in the `User-Agent` header of the `https://███████.mil/` application. This vulnerability can be exploited to extract sensitive data from the backend database by leveraging boolean-based blind SQL injection techniques.\n█████████\n\n## Impact\n\n- **Information Disclosure:** Attackers may infer database schema details and potentially sensitive information.\n**Database and Web Server Details**\n\n- **Database Management System:** MySQL 8 (MariaDB fork)\n- **Web Server Operating System:** Windows\n- **Web Application Technology:** Microsoft SharePoint 16.0.0.5452\n\n## System Host(s)\n████████.mil\n\n## Affected Product(s) and Version(s)\n\n\n## CVE Numbers\n\n\n## Steps to Reproduce\n#### **Steps to Reproduce**\n\n1. **Set Up SQLMap:**\n   Run the following `sqlmap` command to initiate a boolean-based blind SQL injection test:\n\n   ```bash\n   sqlmap --url https://█████████.mil/ --random-agent -risk 3 --level 5 --batch\n   ```\n\n2. **Identify Vulnerable Parameter:**\n   The `User-Agent` header is used to inject payloads. In this case, I used the following payload to test the boolean-based blind injection:\n\n   ```\n   Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en-us) AppleWebKit/523.10.3 (KHTML, like Gecko) Version/3.0.4 Safari/523.10' AND 8074=8074-- KwOG\n   ```\n3. **Confirm Vulnerability:**\n   By injecting the payload, you can observe that the application responds differently based on the boolean condition provided (`8074=8074`).\n\n4. **Test Using SQLMap or Burp Suite:**\n   - **SQLMap:** You can use `sqlmap` to further exploit the vulnerability and extract data.\n   - **Burp Suite:** Manually craft and test boolean-based blind SQL injection payloads to infer database information.\n\n## Suggested Mitigation/Remediation Actions\n1. **Sanitize User Inputs:** Ensure that all user inputs, including headers like `User-Agent`, are properly sanitized and validated to prevent SQL injection attacks.\n2. **Use Prepared Statements:** Implement parameterized queries using prepared statements to safeguard against SQL injection vulnerabilities.\n3. **Regular Security Audits:** Conduct regular security assessments and penetration testing to identify and mitigate potential vulnerabilities.\n4. **Update and Patch Systems:** Regularly update and patch all components of the web application and database management system to protect against known vulnerabilities\n\n",
  "weakness": {
    "id": 67,
    "name": "SQL Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 63,
  "voters": [
    "s0urc3_c0d3",
    "bewgsy",
    "almuntadhar",
    "mikelly",
    "2026",
    "spaghettisec",
    "ahmed_xyz",
    "mr-alienx-kurd",
    "jackhavoltrey",
    "iamunixtz",
    "and 53 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
